
C:\Users\vedan\AppData\Local\Temp\VMBuilds\main\teensy31\Debug/main.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 91 2a 00 00 49 2a 00 00     ... .....*..I*..
      10:	49 2a 00 00 49 2a 00 00 49 2a 00 00 49 2a 00 00     I*..I*..I*..I*..
      20:	49 2a 00 00 49 2a 00 00 49 2a 00 00 91 2a 00 00     I*..I*..I*...*..
      30:	91 2a 00 00 49 2a 00 00 e5 41 00 00 e9 42 00 00     .*..I*...A...B..
      40:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      50:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      60:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      70:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      80:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      90:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      a0:	61 0e 00 00 6d 0e 00 00 91 2a 00 00 91 2a 00 00     a...m....*...*..
      b0:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      c0:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      d0:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      e0:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
      f0:	91 2a 00 00 6d 47 00 00 91 2a 00 00 99 48 00 00     .*..mG...*...H..
     100:	91 2a 00 00 8d 2f 00 00 91 2a 00 00 91 2a 00 00     .*.../...*...*..
     110:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     120:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     130:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     140:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     150:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     160:	91 2a 00 00 19 32 00 00 91 2a 00 00 91 2a 00 00     .*...2...*...*..
     170:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     180:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     190:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     1a0:	91 2a 00 00 91 2a 00 00 91 2a 00 00 91 2a 00 00     .*...*...*...*..
     1b0:	91 2a 00 00 91 2a 00 00 91 2a 00 00                 .*...*...*..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f002 fc62 	bl	2a98 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f002 fd8a 	bl	2dec <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f002 fd17 	bl	2d14 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f002 fd08 	bl	2d14 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f005 fad0 	bl	58ac <__libc_init_array>

	startup_late_hook();
     30c:	f002 fbca 	bl	2aa4 <startup_late_hook>
	main();
     310:	f003 fff2 	bl	42f8 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff92ec 	.word	0x1fff92ec
     33c:	00006674 	.word	0x00006674
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff92f0 	.word	0x1fff92f0
     348:	1fff9938 	.word	0x1fff9938
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5dc413ad 	.word	0x5dc413ad
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff92f0 	.word	0x1fff92f0
     42c:	00000000 	.word	0x00000000
     430:	00006678 	.word	0x00006678

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff92f4 	.word	0x1fff92f4
     460:	00006678 	.word	0x00006678
     464:	1fff92ec 	.word	0x1fff92ec
     468:	00000000 	.word	0x00000000

0000046c <setup>:
float data[128];
// Start block address
uint32_t blockAddress;


void setup() {
     46c:	b508      	push	{r3, lr}
     46e:	f640 31b8 	movw	r1, #3000	; 0xbb8
     472:	4836      	ldr	r0, [pc, #216]	; (54c <setup+0xe0>)
     474:	f002 f974 	bl	2760 <VisualMicroDebug::init(unsigned long)>
     478:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     47c:	4833      	ldr	r0, [pc, #204]	; (54c <setup+0xe0>)
     47e:	f002 f96b 	bl	2758 <VisualMicroDebug::begin(unsigned long)>
     482:	2101      	movs	r1, #1
     484:	4831      	ldr	r0, [pc, #196]	; (54c <setup+0xe0>)
     486:	f002 f941 	bl	270c <VisualMicroDebug::outPacketStart(bool)>
     48a:	2800      	cmp	r0, #0
     48c:	d151      	bne.n	532 <setup+0xc6>
     48e:	2201      	movs	r2, #1
     490:	2100      	movs	r1, #0
     492:	482e      	ldr	r0, [pc, #184]	; (54c <setup+0xe0>)
     494:	f002 fa10 	bl	28b8 <VisualMicroDebug::start(bool, bool)>
	// Serial for communicating with the host (remove/ignore in flight)
	Serial.begin(115200);
	// I2C for MPU9250 and MS5611
	Wire.begin();
     498:	482d      	ldr	r0, [pc, #180]	; (550 <setup+0xe4>)
     49a:	f000 f99d 	bl	7d8 <TwoWire::begin()>
	// SPI for SD card
	SPI.begin();
     49e:	482d      	ldr	r0, [pc, #180]	; (554 <setup+0xe8>)
     4a0:	f000 fede 	bl	1260 <SPIClass::begin()>

class HardwareSerial3 : public HardwareSerial
{
public:
	constexpr HardwareSerial3() {}
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
     4a4:	f242 7010 	movw	r0, #10000	; 0x2710
     4a8:	f002 fd10 	bl	2ecc <serial3_begin>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4ac:	2113      	movs	r1, #19
     4ae:	482a      	ldr	r0, [pc, #168]	; (558 <setup+0xec>)
     4b0:	f003 fd32 	bl	3f18 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     4b4:	4829      	ldr	r0, [pc, #164]	; (55c <setup+0xf0>)
     4b6:	f003 ff27 	bl	4308 <Print::println()>
     4ba:	e003      	b.n	4c4 <setup+0x58>
	// Hardware serial lines for NEO-6M
	GPSSERIAL.begin(9600);


	Serial.println("Starting sensors...");
	while (mySDCard.init() != 0) { delay(1000); }
     4bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4c0:	f002 fc46 	bl	2d50 <delay>
     4c4:	4826      	ldr	r0, [pc, #152]	; (560 <setup+0xf4>)
     4c6:	f000 fd1f 	bl	f08 <leanSDCard::init()>
     4ca:	2800      	cmp	r0, #0
     4cc:	d1f6      	bne.n	4bc <setup+0x50>
	blockAddress = 13953097;
     4ce:	4b25      	ldr	r3, [pc, #148]	; (564 <setup+0xf8>)
     4d0:	4a25      	ldr	r2, [pc, #148]	; (568 <setup+0xfc>)
     4d2:	4826      	ldr	r0, [pc, #152]	; (56c <setup+0x100>)
     4d4:	601a      	str	r2, [r3, #0]
     4d6:	210e      	movs	r1, #14
     4d8:	f003 fd1e 	bl	3f18 <usb_serial_write>
     4dc:	481f      	ldr	r0, [pc, #124]	; (55c <setup+0xf0>)
     4de:	f003 ff13 	bl	4308 <Print::println()>
     4e2:	e003      	b.n	4ec <setup+0x80>
	Serial.println("	SD card ready");
	while (myMS5611.init() != 0) { delay(1000); }
     4e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4e8:	f002 fc32 	bl	2d50 <delay>
     4ec:	4820      	ldr	r0, [pc, #128]	; (570 <setup+0x104>)
     4ee:	f000 f89d 	bl	62c <MS5611::init()>
     4f2:	2800      	cmp	r0, #0
     4f4:	d1f6      	bne.n	4e4 <setup+0x78>
     4f6:	210d      	movs	r1, #13
     4f8:	481e      	ldr	r0, [pc, #120]	; (574 <setup+0x108>)
     4fa:	f003 fd0d 	bl	3f18 <usb_serial_write>
     4fe:	4817      	ldr	r0, [pc, #92]	; (55c <setup+0xf0>)
     500:	f003 ff02 	bl	4308 <Print::println()>
     504:	e001      	b.n	50a <setup+0x9e>
	Serial.println("	MS5611 ready");
	while (myMPU9250.begin() < 0) { delay(1000); }
     506:	f002 fc23 	bl	2d50 <delay>
     50a:	481b      	ldr	r0, [pc, #108]	; (578 <setup+0x10c>)
     50c:	f001 fe1c 	bl	2148 <MPU9250::begin()>
     510:	2800      	cmp	r0, #0
     512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     516:	dbf6      	blt.n	506 <setup+0x9a>
     518:	210e      	movs	r1, #14
     51a:	4818      	ldr	r0, [pc, #96]	; (57c <setup+0x110>)
     51c:	f003 fcfc 	bl	3f18 <usb_serial_write>
     520:	480e      	ldr	r0, [pc, #56]	; (55c <setup+0xf0>)
     522:	f003 fef1 	bl	4308 <Print::println()>
	Serial.println("	MPU9250 ready");
	myINA219.begin();
     526:	490a      	ldr	r1, [pc, #40]	; (550 <setup+0xe4>)
     528:	4815      	ldr	r0, [pc, #84]	; (580 <setup+0x114>)

}
     52a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Serial.println("	SD card ready");
	while (myMS5611.init() != 0) { delay(1000); }
	Serial.println("	MS5611 ready");
	while (myMPU9250.begin() < 0) { delay(1000); }
	Serial.println("	MPU9250 ready");
	myINA219.begin();
     52e:	f002 b897 	b.w	2660 <Adafruit_INA219::begin(TwoWire*)>
     532:	2110      	movs	r1, #16
     534:	4813      	ldr	r0, [pc, #76]	; (584 <setup+0x118>)
     536:	f003 fcef 	bl	3f18 <usb_serial_write>
float data[128];
// Start block address
uint32_t blockAddress;


void setup() {
     53a:	210a      	movs	r1, #10
     53c:	4803      	ldr	r0, [pc, #12]	; (54c <setup+0xe0>)
     53e:	f002 f8d3 	bl	26e8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     542:	4802      	ldr	r0, [pc, #8]	; (54c <setup+0xe0>)
     544:	f002 f906 	bl	2754 <VisualMicroDebug::outPacketEnd()>
     548:	e7a1      	b.n	48e <setup+0x22>
     54a:	bf00      	nop
     54c:	1fff95f8 	.word	0x1fff95f8
     550:	1fff87fc 	.word	0x1fff87fc
     554:	1fff88d4 	.word	0x1fff88d4
     558:	00006214 	.word	0x00006214
     55c:	1fff89f4 	.word	0x1fff89f4
     560:	1fff95dc 	.word	0x1fff95dc
     564:	1fff94f4 	.word	0x1fff94f4
     568:	00d4e849 	.word	0x00d4e849
     56c:	00006228 	.word	0x00006228
     570:	1fff94e0 	.word	0x1fff94e0
     574:	00006238 	.word	0x00006238
     578:	1fff9310 	.word	0x1fff9310
     57c:	00006248 	.word	0x00006248
     580:	1fff95e0 	.word	0x1fff95e0
     584:	00006200 	.word	0x00006200

00000588 <loop>:
//	//blockAddress++;
//
//	exit(0);
//}

void loop() {
     588:	b570      	push	{r4, r5, r6, lr}
	Serial.println(myINA219.getBusVoltage_V());
     58a:	4e13      	ldr	r6, [pc, #76]	; (5d8 <loop+0x50>)
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     58c:	4c13      	ldr	r4, [pc, #76]	; (5dc <loop+0x54>)
//	//blockAddress++;
//
//	exit(0);
//}

void loop() {
     58e:	b082      	sub	sp, #8
	Serial.println(myINA219.getBusVoltage_V());
     590:	4630      	mov	r0, r6
     592:	f002 f883 	bl	269c <Adafruit_INA219::getBusVoltage_V()>
     596:	f004 fbb1 	bl	4cfc <__aeabi_f2d>
     59a:	2502      	movs	r5, #2
     59c:	4602      	mov	r2, r0
     59e:	460b      	mov	r3, r1
     5a0:	9500      	str	r5, [sp, #0]
     5a2:	4620      	mov	r0, r4
     5a4:	f003 ff00 	bl	43a8 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     5a8:	4620      	mov	r0, r4
     5aa:	f003 fead 	bl	4308 <Print::println()>
	Serial.println(myINA219.getCurrent_mA());
     5ae:	4630      	mov	r0, r6
     5b0:	f002 f88a 	bl	26c8 <Adafruit_INA219::getCurrent_mA()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     5b4:	f004 fba2 	bl	4cfc <__aeabi_f2d>
     5b8:	9500      	str	r5, [sp, #0]
     5ba:	4602      	mov	r2, r0
     5bc:	460b      	mov	r3, r1
     5be:	4620      	mov	r0, r4
     5c0:	f003 fef2 	bl	43a8 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     5c4:	4620      	mov	r0, r4
     5c6:	f003 fe9f 	bl	4308 <Print::println()>
	delay(500);
     5ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     5ce:	b002      	add	sp, #8
     5d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
//}

void loop() {
	Serial.println(myINA219.getBusVoltage_V());
	Serial.println(myINA219.getCurrent_mA());
	delay(500);
     5d4:	f002 bbbc 	b.w	2d50 <delay>
     5d8:	1fff95e0 	.word	0x1fff95e0
     5dc:	1fff89f4 	.word	0x1fff89f4

000005e0 <_GLOBAL__sub_I_myMS5611>:
     5e0:	b508      	push	{r3, lr}
#include <Adafruit_INA219.h>


//		Initialize all sensors
// Init MS5611 with I2C address
MS5611 myMS5611(0x77);
     5e2:	2177      	movs	r1, #119	; 0x77
     5e4:	480a      	ldr	r0, [pc, #40]	; (610 <_GLOBAL__sub_I_myMS5611+0x30>)
     5e6:	f000 f81f 	bl	628 <MS5611::MS5611(int)>
// Init SD card with SS pin
leanSDCard mySDCard(10);
     5ea:	210a      	movs	r1, #10
     5ec:	4809      	ldr	r0, [pc, #36]	; (614 <_GLOBAL__sub_I_myMS5611+0x34>)
     5ee:	f000 fc43 	bl	e78 <leanSDCard::leanSDCard(int)>
// Init MPU9250 with I2C address
MPU9250 myMPU9250(Wire, 0x68);
     5f2:	4909      	ldr	r1, [pc, #36]	; (618 <_GLOBAL__sub_I_myMS5611+0x38>)
     5f4:	4809      	ldr	r0, [pc, #36]	; (61c <_GLOBAL__sub_I_myMS5611+0x3c>)
     5f6:	2268      	movs	r2, #104	; 0x68
     5f8:	f000 fe9a 	bl	1330 <MPU9250::MPU9250(TwoWire&, unsigned char)>
// Init the NEO-6M GPS module
#define GPSSERIAL Serial3
TinyGPS myNEO6M;
     5fc:	4808      	ldr	r0, [pc, #32]	; (620 <_GLOBAL__sub_I_myMS5611+0x40>)
     5fe:	f001 ff71 	bl	24e4 <TinyGPS::TinyGPS()>
// Init the INA219
Adafruit_INA219 myINA219;
     602:	2140      	movs	r1, #64	; 0x40
     604:	4807      	ldr	r0, [pc, #28]	; (624 <_GLOBAL__sub_I_myMS5611+0x44>)

void loop() {
	Serial.println(myINA219.getBusVoltage_V());
	Serial.println(myINA219.getCurrent_mA());
	delay(500);
     606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
MPU9250 myMPU9250(Wire, 0x68);
// Init the NEO-6M GPS module
#define GPSSERIAL Serial3
TinyGPS myNEO6M;
// Init the INA219
Adafruit_INA219 myINA219;
     60a:	f002 b821 	b.w	2650 <Adafruit_INA219::Adafruit_INA219(unsigned char)>
     60e:	bf00      	nop
     610:	1fff94e0 	.word	0x1fff94e0
     614:	1fff95dc 	.word	0x1fff95dc
     618:	1fff87fc 	.word	0x1fff87fc
     61c:	1fff9310 	.word	0x1fff9310
     620:	1fff94f8 	.word	0x1fff94f8
     624:	1fff95e0 	.word	0x1fff95e0

00000628 <MS5611::MS5611(int)>:
#include "MS5611.h"
#include <Wire.h>


MS5611::MS5611(int address) {
	_address = address;
     628:	6001      	str	r1, [r0, #0]
}
     62a:	4770      	bx	lr

0000062c <MS5611::init()>:

int MS5611::init() {
     62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     630:	6803      	ldr	r3, [r0, #0]
     632:	4e39      	ldr	r6, [pc, #228]	; (718 <MS5611::init()+0xec>)
		transmitting = 1;
     634:	2701      	movs	r7, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     636:	005b      	lsls	r3, r3, #1
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     638:	211e      	movs	r1, #30
     63a:	4680      	mov	r8, r0
     63c:	4630      	mov	r0, r6
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     63e:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
		transmitting = 1;
     642:	f886 705e 	strb.w	r7, [r6, #94]	; 0x5e
		txBufferLength = 1;
     646:	f886 705d 	strb.w	r7, [r6, #93]	; 0x5d
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     64a:	f000 f8b1 	bl	7b0 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
     64e:	4639      	mov	r1, r7
     650:	4630      	mov	r0, r6
     652:	f000 fa6d 	bl	b30 <TwoWire::endTransmission(unsigned char)>
	// Reset
	Wire.beginTransmission(_address);
	Wire.write(0x1E);
	if (Wire.endTransmission() != 0) {
     656:	2800      	cmp	r0, #0
     658:	d152      	bne.n	700 <MS5611::init()+0xd4>
     65a:	4605      	mov	r5, r0
		Serial.println("MS5611 reset failed");
		return -1;
	}
	delay(5);
     65c:	2005      	movs	r0, #5
     65e:	f002 fb77 	bl	2d50 <delay>
     662:	f108 0904 	add.w	r9, r8, #4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     666:	4634      	mov	r4, r6

	// Read PROM data
	for (int i = 0; i < 6; i++) {
		// Send address of PROM to read
		Wire.beginTransmission(_address);
		Wire.write(0xA0 | (i + 1) << 1 | 0x00);
     668:	3501      	adds	r5, #1
     66a:	f8d8 3000 	ldr.w	r3, [r8]
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     66e:	482a      	ldr	r0, [pc, #168]	; (718 <MS5611::init()+0xec>)
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
     670:	f886 705e 	strb.w	r7, [r6, #94]	; 0x5e
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     674:	0069      	lsls	r1, r5, #1
     676:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     67a:	005b      	lsls	r3, r3, #1
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     67c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     680:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
     684:	f886 705d 	strb.w	r7, [r6, #93]	; 0x5d
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     688:	f000 f892 	bl	7b0 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
     68c:	2101      	movs	r1, #1
     68e:	4822      	ldr	r0, [pc, #136]	; (718 <MS5611::init()+0xec>)
     690:	f000 fa4e 	bl	b30 <TwoWire::endTransmission(unsigned char)>
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
     694:	2301      	movs	r3, #1
     696:	2202      	movs	r2, #2
     698:	f898 1000 	ldrb.w	r1, [r8]
     69c:	481e      	ldr	r0, [pc, #120]	; (718 <MS5611::init()+0xec>)
     69e:	f000 fad1 	bl	c44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		Wire.endTransmission();
		// Read received bytes from PROM
		if (Wire.requestFrom(_address, 2)) {
     6a2:	b310      	cbz	r0, 6ea <MS5611::init()+0xbe>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     6a4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
     6a8:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
		return rxBuffer[rxBufferIndex++];
     6ac:	1c5a      	adds	r2, r3, #1
     6ae:	b2d2      	uxtb	r2, r2
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     6b0:	428b      	cmp	r3, r1
		return rxBuffer[rxBufferIndex++];
     6b2:	eb04 0e03 	add.w	lr, r4, r3
     6b6:	eb04 0002 	add.w	r0, r4, r2
     6ba:	f103 0302 	add.w	r3, r3, #2
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     6be:	d211      	bcs.n	6e4 <MS5611::init()+0xb8>
     6c0:	4291      	cmp	r1, r2
		return rxBuffer[rxBufferIndex++];
     6c2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
     6c6:	f89e e018 	ldrb.w	lr, [lr, #24]
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     6ca:	d90b      	bls.n	6e4 <MS5611::init()+0xb8>
		return rxBuffer[rxBufferIndex++];
     6cc:	7e02      	ldrb	r2, [r0, #24]
     6ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
     6d2:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
	}
	delay(5);


	// Read PROM data
	for (int i = 0; i < 6; i++) {
     6d6:	2d06      	cmp	r5, #6
		// Read received bytes from PROM
		if (Wire.requestFrom(_address, 2)) {
			uint16_t h1 = Wire.read();
			uint16_t h2 = Wire.read();
			uint16_t c = h1 << 8 | h2;
			_calibrationData[i + 1] = c;
     6d8:	f829 3f02 	strh.w	r3, [r9, #2]!
	}
	delay(5);


	// Read PROM data
	for (int i = 0; i < 6; i++) {
     6dc:	d1c4      	bne.n	668 <MS5611::init()+0x3c>
			Serial.println("PROM read failed");
			return -1;
		}
	}

	return 0;
     6de:	2000      	movs	r0, #0
}
     6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     6e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
     6e8:	e7f5      	b.n	6d6 <MS5611::init()+0xaa>
     6ea:	2110      	movs	r1, #16
     6ec:	480b      	ldr	r0, [pc, #44]	; (71c <MS5611::init()+0xf0>)
     6ee:	f003 fc13 	bl	3f18 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     6f2:	480b      	ldr	r0, [pc, #44]	; (720 <MS5611::init()+0xf4>)
     6f4:	f003 fe08 	bl	4308 <Print::println()>
			uint16_t c = h1 << 8 | h2;
			_calibrationData[i + 1] = c;
		}
		else {
			Serial.println("PROM read failed");
			return -1;
     6f8:	f04f 30ff 	mov.w	r0, #4294967295
     6fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     700:	2113      	movs	r1, #19
     702:	4808      	ldr	r0, [pc, #32]	; (724 <MS5611::init()+0xf8>)
     704:	f003 fc08 	bl	3f18 <usb_serial_write>
     708:	4805      	ldr	r0, [pc, #20]	; (720 <MS5611::init()+0xf4>)
     70a:	f003 fdfd 	bl	4308 <Print::println()>
	// Reset
	Wire.beginTransmission(_address);
	Wire.write(0x1E);
	if (Wire.endTransmission() != 0) {
		Serial.println("MS5611 reset failed");
		return -1;
     70e:	f04f 30ff 	mov.w	r0, #4294967295
     712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     716:	bf00      	nop
     718:	1fff87fc 	.word	0x1fff87fc
     71c:	0000626c 	.word	0x0000626c
     720:	1fff89f4 	.word	0x1fff89f4
     724:	00006258 	.word	0x00006258

00000728 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     728:	2000      	movs	r0, #0
     72a:	4770      	bx	lr

0000072c <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     72c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
     730:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
	}
     734:	1a10      	subs	r0, r2, r0
     736:	4770      	bx	lr

00000738 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     738:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
     73c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
     740:	429a      	cmp	r2, r3
     742:	d905      	bls.n	750 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     744:	1c5a      	adds	r2, r3, #1
     746:	4403      	add	r3, r0
     748:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
     74c:	7e18      	ldrb	r0, [r3, #24]
     74e:	4770      	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     750:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     758:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
     75c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
     760:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
     762:	bf86      	itte	hi
     764:	181b      	addhi	r3, r3, r0
     766:	7e18      	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     768:	f04f 30ff 	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
     76c:	4770      	bx	lr
     76e:	bf00      	nop

00000770 <TwoWire::flush()>:
	virtual void flush(void) {
     770:	4770      	bx	lr
     772:	bf00      	nop

00000774 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     774:	b538      	push	{r3, r4, r5, lr}
     776:	4605      	mov	r5, r0
	if (transmitting || slave_mode) {
     778:	f8b0 005e 	ldrh.w	r0, [r0, #94]	; 0x5e
     77c:	b190      	cbz	r0, 7a4 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     77e:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
     782:	4614      	mov	r4, r2
     784:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
     788:	4294      	cmp	r4, r2
     78a:	d80c      	bhi.n	7a6 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
     78c:	f105 003b 	add.w	r0, r5, #59	; 0x3b
     790:	4418      	add	r0, r3
     792:	4622      	mov	r2, r4
     794:	f002 f8be 	bl	2914 <memcpy>
		txBufferLength += quantity;
     798:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
     79c:	4423      	add	r3, r4
     79e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
     7a2:	4620      	mov	r0, r4
		return quantity;
	}
	return 0;
}
     7a4:	bd38      	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     7a6:	2001      	movs	r0, #1
     7a8:	4614      	mov	r4, r2
     7aa:	7128      	strb	r0, [r5, #4]
     7ac:	e7ee      	b.n	78c <TwoWire::write(unsigned char const*, unsigned int)+0x18>
     7ae:	bf00      	nop

000007b0 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
     7b0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
     7b4:	b16b      	cbz	r3, 7d2 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     7b6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
     7ba:	2b20      	cmp	r3, #32
     7bc:	d807      	bhi.n	7ce <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     7be:	18c2      	adds	r2, r0, r3
     7c0:	3301      	adds	r3, #1
     7c2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
     7c6:	2001      	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
     7c8:	f882 103b 	strb.w	r1, [r2, #59]	; 0x3b
     7cc:	4770      	bx	lr
     7ce:	2301      	movs	r3, #1
     7d0:	7103      	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
     7d2:	2000      	movs	r0, #0
     7d4:	4770      	bx	lr
     7d6:	bf00      	nop

000007d8 <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
     7d8:	2300      	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     7da:	6942      	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
     7dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
     7e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
     7e4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
     7e8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
     7ec:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
     7f0:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     7f4:	ca06      	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
     7f6:	b430      	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     7f8:	680d      	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
     7fa:	6904      	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
     7fc:	6643      	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     7fe:	432a      	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
     800:	6683      	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
     802:	600a      	str	r2, [r1, #0]
	port().C1 = 0;
     804:	70a3      	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
     806:	6942      	ldr	r2, [r0, #20]
     808:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
     80c:	4916      	ldr	r1, [pc, #88]	; (868 <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
     80e:	6814      	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
     810:	4413      	add	r3, r2
     812:	7a1d      	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     814:	7b5b      	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
     816:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     81a:	021b      	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
     81c:	686d      	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     81e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     822:	f043 0364 	orr.w	r3, r3, #100	; 0x64
     826:	602b      	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
     828:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
     82c:	4413      	add	r3, r2
     82e:	7c9d      	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     830:	7ddb      	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
     832:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     836:	021b      	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
     838:	6849      	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     83a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     83e:	f043 0364 	orr.w	r3, r3, #100	; 0x64
     842:	600b      	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
     844:	6821      	ldr	r1, [r4, #0]
     846:	6853      	ldr	r3, [r2, #4]
     848:	4219      	tst	r1, r3
     84a:	d005      	beq.n	858 <TwoWire::begin()+0x80>
     84c:	6903      	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV56; // 0.96 MHz
	}
	port().FLT = 4;
#elif F_BUS == 48000000
	if (frequency < 400000) {
		port().F = 0x27;	// 100 kHz
     84e:	2227      	movs	r2, #39	; 0x27
     850:	705a      	strb	r2, [r3, #1]
     852:	6903      	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1A; // 400 kHz
	} else {
		port().F = 0x0D; // 1 MHz
	}
	port().FLT = 4;
     854:	2204      	movs	r2, #4
     856:	719a      	strb	r2, [r3, #6]
     858:	6903      	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
     85a:	2220      	movs	r2, #32
     85c:	715a      	strb	r2, [r3, #5]
     85e:	6903      	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
     860:	2280      	movs	r2, #128	; 0x80
     862:	709a      	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
     864:	bc30      	pop	{r4, r5}
     866:	4770      	bx	lr
     868:	000064b4 	.word	0x000064b4

0000086c <TwoWire::setClock(unsigned long)>:

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
     86c:	6943      	ldr	r3, [r0, #20]
     86e:	cb0c      	ldmia	r3, {r2, r3}
     870:	6812      	ldr	r2, [r2, #0]
     872:	421a      	tst	r2, r3
     874:	d00c      	beq.n	890 <TwoWire::setClock(unsigned long)+0x24>
	} else {
		port().F = I2C_F_DIV56; // 0.96 MHz
	}
	port().FLT = 4;
#elif F_BUS == 48000000
	if (frequency < 400000) {
     876:	4b09      	ldr	r3, [pc, #36]	; (89c <TwoWire::setClock(unsigned long)+0x30>)
     878:	4299      	cmp	r1, r3
     87a:	d90a      	bls.n	892 <TwoWire::setClock(unsigned long)+0x26>
		port().F = 0x27;	// 100 kHz
	} else if (frequency < 1000000) {
     87c:	4b08      	ldr	r3, [pc, #32]	; (8a0 <TwoWire::setClock(unsigned long)+0x34>)
     87e:	4299      	cmp	r1, r3
     880:	6903      	ldr	r3, [r0, #16]
		port().F = 0x1A; // 400 kHz
     882:	bf94      	ite	ls
     884:	221a      	movls	r2, #26
	} else {
		port().F = 0x0D; // 1 MHz
     886:	220d      	movhi	r2, #13
     888:	705a      	strb	r2, [r3, #1]
     88a:	6903      	ldr	r3, [r0, #16]
	}
	port().FLT = 4;
     88c:	2204      	movs	r2, #4
     88e:	719a      	strb	r2, [r3, #6]
     890:	4770      	bx	lr
     892:	6903      	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV56; // 0.96 MHz
	}
	port().FLT = 4;
#elif F_BUS == 48000000
	if (frequency < 400000) {
		port().F = 0x27;	// 100 kHz
     894:	2227      	movs	r2, #39	; 0x27
     896:	705a      	strb	r2, [r3, #1]
     898:	e7f7      	b.n	88a <TwoWire::setClock(unsigned long)+0x1e>
     89a:	bf00      	nop
     89c:	00061a7f 	.word	0x00061a7f
     8a0:	000f423f 	.word	0x000f423f

000008a4 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
     8a4:	b510      	push	{r4, lr}
     8a6:	6902      	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
     8a8:	78d3      	ldrb	r3, [r2, #3]
     8aa:	b2db      	uxtb	r3, r3
	//serial_print(".");
	if (status & I2C_S_ARBL) {
     8ac:	06d9      	lsls	r1, r3, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
     8ae:	4604      	mov	r4, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
     8b0:	d53d      	bpl.n	92e <TwoWire::isr()+0x8a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
     8b2:	2110      	movs	r1, #16
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
     8b4:	0658      	lsls	r0, r3, #25

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
		// Arbitration Lost
		port().S = I2C_S_ARBL;
     8b6:	70d1      	strb	r1, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
     8b8:	d538      	bpl.n	92c <TwoWire::isr()+0x88>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
     8ba:	f003 0304 	and.w	r3, r3, #4
     8be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
     8c2:	2b00      	cmp	r3, #0
     8c4:	d051      	beq.n	96a <TwoWire::isr()+0xc6>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
     8c6:	493d      	ldr	r1, [pc, #244]	; (9bc <TwoWire::isr()+0x118>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
     8c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
     8ca:	2300      	movs	r3, #0
     8cc:	700b      	strb	r3, [r1, #0]
			txBufferLength = 0;
     8ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			if (user_onRequest != NULL) {
     8d2:	2a00      	cmp	r2, #0
     8d4:	d05b      	beq.n	98e <TwoWire::isr()+0xea>
				user_onRequest();
     8d6:	4790      	blx	r2
			}
			if (txBufferLength == 0) {
     8d8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
     8dc:	2b00      	cmp	r3, #0
     8de:	d056      	beq.n	98e <TwoWire::isr()+0xea>
     8e0:	6923      	ldr	r3, [r4, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
     8e2:	22d0      	movs	r2, #208	; 0xd0
     8e4:	709a      	strb	r2, [r3, #2]
     8e6:	6923      	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
     8e8:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
     8ec:	711a      	strb	r2, [r3, #4]
     8ee:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 1;
     8f0:	2201      	movs	r2, #1
     8f2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
			receiving = 1;
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
     8f6:	2202      	movs	r2, #2
     8f8:	70da      	strb	r2, [r3, #3]
		return;
     8fa:	bd10      	pop	{r4, pc}
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
     8fc:	4b30      	ldr	r3, [pc, #192]	; (9c0 <TwoWire::isr()+0x11c>)
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
     8fe:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
     902:	429c      	cmp	r4, r3
     904:	d04a      	beq.n	99c <TwoWire::isr()+0xf8>
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		} else if (this == &Wire1) {
     906:	4b2f      	ldr	r3, [pc, #188]	; (9c4 <TwoWire::isr()+0x120>)
     908:	429c      	cmp	r4, r3
     90a:	d052      	beq.n	9b2 <TwoWire::isr()+0x10e>
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
     90c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
     910:	7913      	ldrb	r3, [r2, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
     912:	291f      	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
     914:	b2db      	uxtb	r3, r3
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
     916:	d807      	bhi.n	928 <TwoWire::isr()+0x84>
     918:	4828      	ldr	r0, [pc, #160]	; (9bc <TwoWire::isr()+0x118>)
     91a:	7800      	ldrb	r0, [r0, #0]
     91c:	b120      	cbz	r0, 928 <TwoWire::isr()+0x84>
			rxBuffer[rxBufferLength++] = data;
     91e:	1860      	adds	r0, r4, r1
     920:	3101      	adds	r1, #1
     922:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
     926:	7603      	strb	r3, [r0, #24]
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
     928:	2302      	movs	r3, #2
     92a:	70d3      	strb	r3, [r2, #3]
     92c:	bd10      	pop	{r4, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
     92e:	0659      	lsls	r1, r3, #25
     930:	d4c3      	bmi.n	8ba <TwoWire::isr()+0x16>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
     932:	7891      	ldrb	r1, [r2, #2]
	if (c1 & I2C_C1_TX) {
     934:	f001 0110 	and.w	r1, r1, #16
     938:	f001 00ff 	and.w	r0, r1, #255	; 0xff
     93c:	2900      	cmp	r1, #0
     93e:	d0dd      	beq.n	8fc <TwoWire::isr()+0x58>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
     940:	f013 0301 	ands.w	r3, r3, #1
     944:	d11e      	bne.n	984 <TwoWire::isr()+0xe0>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
     946:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
     94a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
     94e:	4288      	cmp	r0, r1
				port().D = txBuffer[txBufferIndex++];
     950:	bf81      	itttt	hi
     952:	1c4b      	addhi	r3, r1, #1
     954:	1909      	addhi	r1, r1, r4
     956:	f884 305c 	strbhi.w	r3, [r4, #92]	; 0x5c
     95a:	f891 303b 	ldrbhi.w	r3, [r1, #59]	; 0x3b
			} else {
				port().D = 0;
     95e:	7113      	strb	r3, [r2, #4]
     960:	6923      	ldr	r3, [r4, #16]
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
     962:	22d0      	movs	r2, #208	; 0xd0
     964:	709a      	strb	r2, [r3, #2]
     966:	6922      	ldr	r2, [r4, #16]
     968:	e7de      	b.n	928 <TwoWire::isr()+0x84>
     96a:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
     96c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
     970:	22c0      	movs	r2, #192	; 0xc0
     972:	709a      	strb	r2, [r3, #2]
     974:	6923      	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
     976:	4a11      	ldr	r2, [pc, #68]	; (9bc <TwoWire::isr()+0x118>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
     978:	7919      	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
     97a:	2101      	movs	r1, #1
     97c:	7011      	strb	r1, [r2, #0]
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
     97e:	2202      	movs	r2, #2
     980:	70da      	strb	r2, [r3, #3]
		return;
     982:	bd10      	pop	{r4, pc}
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
     984:	23c0      	movs	r3, #192	; 0xc0
     986:	7093      	strb	r3, [r2, #2]
     988:	6922      	ldr	r2, [r4, #16]
			data = port().D;
     98a:	7913      	ldrb	r3, [r2, #4]
     98c:	e7cc      	b.n	928 <TwoWire::isr()+0x84>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
     98e:	2201      	movs	r2, #1
				txBuffer[0] = 0;
     990:	2300      	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
     992:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				txBuffer[0] = 0;
     996:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
     99a:	e7a1      	b.n	8e0 <TwoWire::isr()+0x3c>
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
     99c:	6962      	ldr	r2, [r4, #20]
     99e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
     9a2:	4909      	ldr	r1, [pc, #36]	; (9c8 <TwoWire::isr()+0x124>)
		} else if (this == &Wire1) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
     9a4:	4413      	add	r3, r2
     9a6:	2203      	movs	r2, #3
     9a8:	7a18      	ldrb	r0, [r3, #8]
     9aa:	f002 f8f3 	bl	2b94 <attachInterrupt>
     9ae:	6922      	ldr	r2, [r4, #16]
     9b0:	e7ac      	b.n	90c <TwoWire::isr()+0x68>
     9b2:	6962      	ldr	r2, [r4, #20]
     9b4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
     9b8:	4904      	ldr	r1, [pc, #16]	; (9cc <TwoWire::isr()+0x128>)
     9ba:	e7f3      	b.n	9a4 <TwoWire::isr()+0x100>
     9bc:	1fff95f4 	.word	0x1fff95f4
     9c0:	1fff87fc 	.word	0x1fff87fc
     9c4:	1fff8868 	.word	0x1fff8868
     9c8:	00000a2d 	.word	0x00000a2d
     9cc:	00000a39 	.word	0x00000a39

000009d0 <TwoWire::sda_rising_isr()>:
     9d0:	6903      	ldr	r3, [r0, #16]
#endif

void TwoWire::sda_rising_isr(void)
{
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
     9d2:	78db      	ldrb	r3, [r3, #3]
     9d4:	f003 0320 	and.w	r3, r3, #32
     9d8:	b173      	cbz	r3, 9f8 <TwoWire::sda_rising_isr()+0x28>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
     9da:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
     9de:	3301      	adds	r3, #1
     9e0:	b2db      	uxtb	r3, r3
     9e2:	2b01      	cmp	r3, #1
     9e4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
     9e8:	d91a      	bls.n	a20 <TwoWire::sda_rising_isr()+0x50>
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
     9ea:	6942      	ldr	r2, [r0, #20]
     9ec:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
     9f0:	4413      	add	r3, r2
     9f2:	7a18      	ldrb	r0, [r3, #8]
     9f4:	f002 b94a 	b.w	2c8c <detachInterrupt>
	Wire1.sda_rising_isr();
}
#endif

void TwoWire::sda_rising_isr(void)
{
     9f8:	b570      	push	{r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
     9fa:	6942      	ldr	r2, [r0, #20]
     9fc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
     a00:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
     a04:	4413      	add	r3, r2
     a06:	4604      	mov	r4, r0
     a08:	7a18      	ldrb	r0, [r3, #8]
     a0a:	f002 f93f 	bl	2c8c <detachInterrupt>
		if (user_onReceive != NULL) {
     a0e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
     a10:	b15b      	cbz	r3, a2a <TwoWire::sda_rising_isr()+0x5a>
			rxBufferIndex = 0;
     a12:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
			user_onReceive(rxBufferLength);
     a16:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
		if (++irqcount >= 2 || !slave_mode) {
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
		}
	}
	//digitalWrite(3, LOW);
}
     a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
		if (user_onReceive != NULL) {
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
     a1e:	4718      	bx	r3
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
     a20:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
     a24:	2b00      	cmp	r3, #0
     a26:	d0e0      	beq.n	9ea <TwoWire::sda_rising_isr()+0x1a>
     a28:	4770      	bx	lr
     a2a:	bd70      	pop	{r4, r5, r6, pc}

00000a2c <sda_rising_isr0()>:
#if !defined(WIRE_HAS_STOP_INTERRUPT)

#if defined(WIRE_IMPLEMENT_WIRE)
void sda_rising_isr0(void)
{
	Wire.sda_rising_isr();
     a2c:	4801      	ldr	r0, [pc, #4]	; (a34 <sda_rising_isr0()+0x8>)
     a2e:	f7ff bfcf 	b.w	9d0 <TwoWire::sda_rising_isr()>
     a32:	bf00      	nop
     a34:	1fff87fc 	.word	0x1fff87fc

00000a38 <sda_rising_isr1()>:
}
#endif
#if defined(WIRE_IMPLEMENT_WIRE1)
void sda_rising_isr1(void)
{
	Wire1.sda_rising_isr();
     a38:	4801      	ldr	r0, [pc, #4]	; (a40 <sda_rising_isr1()+0x8>)
     a3a:	f7ff bfc9 	b.w	9d0 <TwoWire::sda_rising_isr()>
     a3e:	bf00      	nop
     a40:	1fff8868 	.word	0x1fff8868

00000a44 <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
     a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a48:	4f37      	ldr	r7, [pc, #220]	; (b28 <L_1545_delayMicroseconds+0x1a>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
     a4a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b2c <L_1545_delayMicroseconds+0x1e>
     a4e:	683b      	ldr	r3, [r7, #0]
     a50:	6902      	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
     a52:	b082      	sub	sp, #8
     a54:	4606      	mov	r6, r0
     a56:	9300      	str	r3, [sp, #0]
	return ret;
     a58:	f8dd 8000 	ldr.w	r8, [sp]
	bool reset=false;
     a5c:	2100      	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
     a5e:	25a0      	movs	r5, #160	; 0xa0
	uint8_t i2c_status(void) {
		return port().S;
     a60:	78d3      	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
     a62:	069b      	lsls	r3, r3, #26
     a64:	d55b      	bpl.n	b1e <L_1545_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a66:	683b      	ldr	r3, [r7, #0]
     a68:	9301      	str	r3, [sp, #4]
	return ret;
     a6a:	9b01      	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
     a6c:	ebc8 0303 	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
     a70:	2b0f      	cmp	r3, #15
     a72:	d9f5      	bls.n	a60 <TwoWire::wait_idle()+0x1c>
     a74:	b149      	cbz	r1, a8a <TwoWire::wait_idle()+0x46>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
     a76:	2b10      	cmp	r3, #16
     a78:	d0f2      	beq.n	a60 <TwoWire::wait_idle()+0x1c>
			// bus stuck busy too long
			port().C1 = 0;
     a7a:	2000      	movs	r0, #0
     a7c:	7090      	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
     a7e:	6933      	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
     a80:	2280      	movs	r2, #128	; 0x80
     a82:	709a      	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
     a84:	b002      	add	sp, #8
     a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
     a8a:	6972      	ldr	r2, [r6, #20]
     a8c:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
     a90:	4413      	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
     a92:	2105      	movs	r1, #5
     a94:	7a18      	ldrb	r0, [r3, #8]
     a96:	f002 f955 	bl	2d44 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
     a9a:	6972      	ldr	r2, [r6, #20]
     a9c:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
     aa0:	4413      	add	r3, r2
			pinMode(scl_pin, OUTPUT);
     aa2:	2101      	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
     aa4:	f893 a012 	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
     aa8:	4650      	mov	r0, sl
     aaa:	f002 f94b 	bl	2d44 <pinMode>
     aae:	2409      	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
     ab0:	2100      	movs	r1, #0
     ab2:	4650      	mov	r0, sl
     ab4:	f002 f940 	bl	2d38 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
     ab8:	462b      	mov	r3, r5

00000aba <L_1480_delayMicroseconds>:
     aba:	3b01      	subs	r3, #1
     abc:	d1fd      	bne.n	aba <L_1480_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
     abe:	2101      	movs	r1, #1
     ac0:	4650      	mov	r0, sl
     ac2:	f002 f939 	bl	2d38 <digitalWrite>
     ac6:	462b      	mov	r3, r5

00000ac8 <L_1494_delayMicroseconds>:
     ac8:	3b01      	subs	r3, #1
     aca:	d1fd      	bne.n	ac8 <L_1494_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
     acc:	3c01      	subs	r4, #1
     ace:	d1ef      	bne.n	ab0 <TwoWire::wait_idle()+0x6c>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
     ad0:	6970      	ldr	r0, [r6, #20]
     ad2:	f896 1061 	ldrb.w	r1, [r6, #97]	; 0x61
     ad6:	4401      	add	r1, r0
     ad8:	f44f 72a0 	mov.w	r2, #320	; 0x140
     adc:	7a0c      	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     ade:	7b4b      	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
     ae0:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     ae4:	021b      	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
     ae6:	6849      	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     aec:	f043 0364 	orr.w	r3, r3, #100	; 0x64
     af0:	600b      	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
     af2:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
     af6:	4403      	add	r3, r0
     af8:	7c99      	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     afa:	7ddb      	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
     afc:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     b00:	021b      	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
     b02:	6849      	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
     b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     b08:	f043 0364 	orr.w	r3, r3, #100	; 0x64
     b0c:	600b      	str	r3, [r1, #0]

00000b0e <L_1545_delayMicroseconds>:
     b0e:	3a01      	subs	r2, #1
     b10:	d1fd      	bne.n	b0e <L_1545_delayMicroseconds>
     b12:	6932      	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
     b14:	78d3      	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
     b16:	069b      	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
     b18:	f04f 0101 	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
     b1c:	d4a3      	bmi.n	a66 <TwoWire::wait_idle()+0x22>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
     b1e:	2001      	movs	r0, #1
}
     b20:	b002      	add	sp, #8
     b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b26:	bf00      	nop
     b28:	1fff9640 	.word	0x1fff9640
     b2c:	000064b4 	.word	0x000064b4

00000b30 <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
     b30:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
     b32:	6903      	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
     b34:	2212      	movs	r2, #18
     b36:	70da      	strb	r2, [r3, #3]
     b38:	6902      	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
     b3a:	7893      	ldrb	r3, [r2, #2]
     b3c:	f003 0320 	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
     b40:	b085      	sub	sp, #20
     b42:	4604      	mov	r4, r0
     b44:	460d      	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
     b46:	2b00      	cmp	r3, #0
     b48:	d05e      	beq.n	c08 <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
     b4a:	23b4      	movs	r3, #180	; 0xb4
     b4c:	7093      	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b4e:	493c      	ldr	r1, [pc, #240]	; (c40 <TwoWire::endTransmission(unsigned char)+0x110>)
     b50:	6922      	ldr	r2, [r4, #16]
     b52:	680b      	ldr	r3, [r1, #0]
     b54:	9300      	str	r3, [sp, #0]
	return ret;
     b56:	9e00      	ldr	r6, [sp, #0]
     b58:	e005      	b.n	b66 <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b5a:	680b      	ldr	r3, [r1, #0]
     b5c:	9301      	str	r3, [sp, #4]
	return ret;
     b5e:	9b01      	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
     b60:	1b9b      	subs	r3, r3, r6
     b62:	2b04      	cmp	r3, #4
     b64:	d842      	bhi.n	bec <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
     b66:	78d3      	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
     b68:	f003 0320 	and.w	r3, r3, #32
     b6c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     b70:	2b00      	cmp	r3, #0
     b72:	d0f2      	beq.n	b5a <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
     b74:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
     b78:	2b00      	cmp	r3, #0
     b7a:	d031      	beq.n	be0 <TwoWire::endTransmission(unsigned char)+0xb0>
     b7c:	f04f 0e00 	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
     b80:	f04f 0c02 	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
     b84:	eb04 030e 	add.w	r3, r4, lr
     b88:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
     b8c:	7113      	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b8e:	680b      	ldr	r3, [r1, #0]
     b90:	9303      	str	r3, [sp, #12]
	return ret;
     b92:	9f03      	ldr	r7, [sp, #12]
     b94:	6920      	ldr	r0, [r4, #16]
     b96:	e007      	b.n	ba8 <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
     b98:	069b      	lsls	r3, r3, #26
     b9a:	d50d      	bpl.n	bb8 <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b9c:	680b      	ldr	r3, [r1, #0]
     b9e:	9302      	str	r3, [sp, #8]
	return ret;
     ba0:	9b02      	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
     ba2:	1bdb      	subs	r3, r3, r7
     ba4:	2b05      	cmp	r3, #5
     ba6:	d828      	bhi.n	bfa <TwoWire::endTransmission(unsigned char)+0xca>
     ba8:	78c3      	ldrb	r3, [r0, #3]
     baa:	b2db      	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
     bac:	f003 0202 	and.w	r2, r3, #2
     bb0:	f002 06ff 	and.w	r6, r2, #255	; 0xff
     bb4:	2a00      	cmp	r2, #0
     bb6:	d0ef      	beq.n	b98 <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
     bb8:	f880 c003 	strb.w	ip, [r0, #3]
     bbc:	6926      	ldr	r6, [r4, #16]
     bbe:	78f3      	ldrb	r3, [r6, #3]
     bc0:	b2db      	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
     bc2:	06df      	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
     bc4:	4632      	mov	r2, r6
     bc6:	d42d      	bmi.n	c24 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
     bc8:	069f      	lsls	r7, r3, #26
     bca:	d52b      	bpl.n	c24 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
     bcc:	07db      	lsls	r3, r3, #31
     bce:	d431      	bmi.n	c34 <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
     bd0:	f10e 0e01 	add.w	lr, lr, #1
     bd4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
     bd8:	fa5f fe8e 	uxtb.w	lr, lr
     bdc:	4573      	cmp	r3, lr
     bde:	d8d1      	bhi.n	b84 <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
     be0:	2000      	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
     be2:	bb1d      	cbnz	r5, c2c <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
     be4:	2300      	movs	r3, #0
     be6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
     bea:	e004      	b.n	bf6 <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
     bec:	7090      	strb	r0, [r2, #2]
     bee:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
     bf0:	2280      	movs	r2, #128	; 0x80
     bf2:	709a      	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
     bf4:	2004      	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
     bf6:	b005      	add	sp, #20
     bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
     bfa:	7086      	strb	r6, [r0, #2]
     bfc:	6923      	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
     bfe:	2280      	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
     c00:	2004      	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
     c02:	709a      	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
     c04:	b005      	add	sp, #20
     c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c08:	f003 06ff 	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
     c0c:	f7ff ff1a 	bl	a44 <TwoWire::wait_idle()>
     c10:	b910      	cbnz	r0, c18 <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
     c12:	2004      	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
     c14:	b005      	add	sp, #20
     c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c18:	6923      	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
     c1a:	f884 605f 	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
     c1e:	22b0      	movs	r2, #176	; 0xb0
     c20:	709a      	strb	r2, [r3, #2]
     c22:	e794      	b.n	b4e <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
     c24:	2380      	movs	r3, #128	; 0x80
     c26:	70b3      	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
     c28:	2004      	movs	r0, #4
     c2a:	e7da      	b.n	be2 <TwoWire::endTransmission(unsigned char)+0xb2>
     c2c:	6926      	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
     c2e:	2380      	movs	r3, #128	; 0x80
     c30:	70b3      	strb	r3, [r6, #2]
     c32:	e7d7      	b.n	be4 <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
     c34:	f1be 0f00 	cmp.w	lr, #0
     c38:	bf0c      	ite	eq
     c3a:	2002      	moveq	r0, #2
     c3c:	2003      	movne	r0, #3
     c3e:	e7f6      	b.n	c2e <TwoWire::endTransmission(unsigned char)+0xfe>
     c40:	1fff9640 	.word	0x1fff9640

00000c44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
     c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c48:	6906      	ldr	r6, [r0, #16]
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
     c4a:	2500      	movs	r5, #0
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
     c4c:	2712      	movs	r7, #18
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
     c4e:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
	rxBufferLength = 0;
     c52:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
     c56:	70f7      	strb	r7, [r6, #3]
     c58:	f8d0 c010 	ldr.w	ip, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
     c5c:	f89c e002 	ldrb.w	lr, [ip, #2]
     c60:	f00e 0e20 	and.w	lr, lr, #32
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
     c64:	b088      	sub	sp, #32
     c66:	4604      	mov	r4, r0
     c68:	4688      	mov	r8, r1
     c6a:	4615      	mov	r5, r2
     c6c:	461e      	mov	r6, r3
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
     c6e:	f1be 0f00 	cmp.w	lr, #0
     c72:	d049      	beq.n	d08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc4>
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
     c74:	23b4      	movs	r3, #180	; 0xb4
     c76:	f88c 3002 	strb.w	r3, [ip, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c7a:	4b78      	ldr	r3, [pc, #480]	; (e5c <L_3073_delayMicroseconds+0x1a>)
     c7c:	6921      	ldr	r1, [r4, #16]
     c7e:	681a      	ldr	r2, [r3, #0]
     c80:	9200      	str	r2, [sp, #0]
	return ret;
     c82:	f8dd e000 	ldr.w	lr, [sp]
     c86:	e006      	b.n	c96 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c88:	681a      	ldr	r2, [r3, #0]
     c8a:	9201      	str	r2, [sp, #4]
	return ret;
     c8c:	9801      	ldr	r0, [sp, #4]
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
     c8e:	ebce 0000 	rsb	r0, lr, r0
     c92:	2804      	cmp	r0, #4
     c94:	d830      	bhi.n	cf8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
	uint8_t i2c_status(void) {
		return port().S;
     c96:	78c8      	ldrb	r0, [r1, #3]
     c98:	f000 0020 	and.w	r0, r0, #32

	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
     c9c:	f000 07ff 	and.w	r7, r0, #255	; 0xff
     ca0:	2800      	cmp	r0, #0
     ca2:	d0f1      	beq.n	c88 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
			//Serial.printf("requestFrom err2\n");
			return 0; // error generating start condition
		}
	}
	// send the address
	port().D = (address << 1) | 1;
     ca4:	ea4f 0248 	mov.w	r2, r8, lsl #1
     ca8:	f042 0201 	orr.w	r2, r2, #1
     cac:	b2d2      	uxtb	r2, r2
     cae:	710a      	strb	r2, [r1, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cb0:	681a      	ldr	r2, [r3, #0]
     cb2:	9202      	str	r2, [sp, #8]
	return ret;
     cb4:	f8dd e008 	ldr.w	lr, [sp, #8]
     cb8:	6920      	ldr	r0, [r4, #16]
     cba:	e006      	b.n	cca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	9203      	str	r2, [sp, #12]
	return ret;
     cc0:	9903      	ldr	r1, [sp, #12]
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
     cc2:	ebce 0101 	rsb	r1, lr, r1
     cc6:	2905      	cmp	r1, #5
     cc8:	d82a      	bhi.n	d20 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xdc>
		}
	}
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
     cca:	78c1      	ldrb	r1, [r0, #3]
     ccc:	f001 0102 	and.w	r1, r1, #2
     cd0:	f001 07ff 	and.w	r7, r1, #255	; 0xff
     cd4:	2900      	cmp	r1, #0
     cd6:	d0f1      	beq.n	cbc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("requestFrom err3\n");
			return 0; // clock stretch too long (during address)
		}
	}
	port().S = I2C_S_IICIF;
     cd8:	f04f 0c02 	mov.w	ip, #2
     cdc:	f880 c003 	strb.w	ip, [r0, #3]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
     ce0:	6922      	ldr	r2, [r4, #16]
	uint8_t i2c_status(void) {
		return port().S;
     ce2:	78d1      	ldrb	r1, [r2, #3]
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
     ce4:	f011 0711 	ands.w	r7, r1, #17
     ce8:	d122      	bne.n	d30 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
		//Serial.printf("requestFrom err4\n");
		return 0;
	}
	if (length == 0) {
     cea:	bb2d      	cbnz	r5, d38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf4>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
     cec:	2e00      	cmp	r6, #0
     cee:	bf0c      	ite	eq
     cf0:	23a0      	moveq	r3, #160	; 0xa0
     cf2:	2380      	movne	r3, #128	; 0x80
     cf4:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err5\n");
		return 0;
     cf6:	e003      	b.n	d00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
     cf8:	708f      	strb	r7, [r1, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
     cfa:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
     cfc:	2280      	movs	r2, #128	; 0x80
     cfe:	709a      	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
     d00:	4638      	mov	r0, r7
     d02:	b008      	add	sp, #32
     d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d08:	f00e 07ff 	and.w	r7, lr, #255	; 0xff
	if (port().C1 & I2C_C1_MST) {
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
     d0c:	f7ff fe9a 	bl	a44 <TwoWire::wait_idle()>
     d10:	2800      	cmp	r0, #0
     d12:	d0f5      	beq.n	d00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
     d14:	6923      	ldr	r3, [r4, #16]
			//Serial.printf("requestFrom err1\n");
			return 0; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
     d16:	f884 705f 	strb.w	r7, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
     d1a:	22b0      	movs	r2, #176	; 0xb0
     d1c:	709a      	strb	r2, [r3, #2]
     d1e:	e7ac      	b.n	c7a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x36>
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
     d20:	7087      	strb	r7, [r0, #2]
     d22:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
     d24:	2280      	movs	r2, #128	; 0x80
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
     d26:	4638      	mov	r0, r7
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
     d28:	709a      	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
     d2a:	b008      	add	sp, #32
     d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	port().S = I2C_S_IICIF;
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
		// the slave device did not acknowledge
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
     d30:	2380      	movs	r3, #128	; 0x80
     d32:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err4\n");
		return 0;
     d34:	2700      	movs	r7, #0
     d36:	e7e3      	b.n	d00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
     d38:	2d01      	cmp	r5, #1
     d3a:	d075      	beq.n	e28 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1e4>
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
     d3c:	21a0      	movs	r1, #160	; 0xa0
     d3e:	7091      	strb	r1, [r2, #2]
     d40:	6921      	ldr	r1, [r4, #16]
	}
	tmp = port().D; // initiate the first receive
     d42:	790a      	ldrb	r2, [r1, #4]
     d44:	46be      	mov	lr, r7
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
     d46:	4667      	mov	r7, ip
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
     d48:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d4c:	681a      	ldr	r2, [r3, #0]
     d4e:	9204      	str	r2, [sp, #16]
	return ret;
     d50:	9804      	ldr	r0, [sp, #16]
     d52:	e005      	b.n	d60 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d54:	681a      	ldr	r2, [r3, #0]
     d56:	9205      	str	r2, [sp, #20]
	return ret;
     d58:	9a05      	ldr	r2, [sp, #20]
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
     d5a:	1a12      	subs	r2, r2, r0
     d5c:	2a05      	cmp	r2, #5
     d5e:	d84a      	bhi.n	df6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b2>
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
     d60:	78ca      	ldrb	r2, [r1, #3]
     d62:	f002 0202 	and.w	r2, r2, #2
     d66:	f002 08ff 	and.w	r8, r2, #255	; 0xff
     d6a:	2a00      	cmp	r2, #0
     d6c:	d0f2      	beq.n	d54 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
     d6e:	70cf      	strb	r7, [r1, #3]
     d70:	6921      	ldr	r1, [r4, #16]
		status = port().S;
     d72:	78ca      	ldrb	r2, [r1, #3]
     d74:	b2d2      	uxtb	r2, r2
		if ((status & I2C_S_ARBL)) {
     d76:	f012 0f10 	tst.w	r2, #16
     d7a:	4608      	mov	r0, r1
     d7c:	d15a      	bne.n	e34 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7a\n");
			return count;
		}
		if (!(status & I2C_S_BUSY)) {
     d7e:	0692      	lsls	r2, r2, #26
     d80:	d558      	bpl.n	e34 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
     d82:	3d01      	subs	r5, #1
     d84:	b2ed      	uxtb	r5, r5
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
     d86:	2d01      	cmp	r5, #1
     d88:	d049      	beq.n	e1e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1da>
		if (count < BUFFER_LENGTH) {
     d8a:	f1be 0f1f 	cmp.w	lr, #31
     d8e:	d93b      	bls.n	e08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1c4>
			rxBuffer[count++] = port().D;
		} else {
			tmp = port().D;
     d90:	790a      	ldrb	r2, [r1, #4]
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
     d92:	2d01      	cmp	r5, #1
     d94:	d1da      	bne.n	d4c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x108>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d96:	681a      	ldr	r2, [r3, #0]
     d98:	9206      	str	r2, [sp, #24]
	return ret;
     d9a:	9d06      	ldr	r5, [sp, #24]
     d9c:	e005      	b.n	daa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x166>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d9e:	681a      	ldr	r2, [r3, #0]
     da0:	9207      	str	r2, [sp, #28]
	return ret;
     da2:	9a07      	ldr	r2, [sp, #28]
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
     da4:	1b52      	subs	r2, r2, r5
     da6:	2a05      	cmp	r2, #5
     da8:	d846      	bhi.n	e38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f4>
		} else {
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
     daa:	78c2      	ldrb	r2, [r0, #3]
     dac:	f002 0202 	and.w	r2, r2, #2
     db0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
     db4:	2a00      	cmp	r2, #0
     db6:	d0f2      	beq.n	d9e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15a>
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
		}
	}
	port().S = I2C_S_IICIF;
     db8:	2302      	movs	r3, #2
     dba:	70c3      	strb	r3, [r0, #3]
     dbc:	6922      	ldr	r2, [r4, #16]
	status = port().S;
     dbe:	78d3      	ldrb	r3, [r2, #3]
     dc0:	b2db      	uxtb	r3, r3
	if ((status & I2C_S_ARBL)) {
     dc2:	06d9      	lsls	r1, r3, #27
     dc4:	d43a      	bmi.n	e3c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f8>
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
		//Serial.printf("requestFrom err9a\n");
		return count;
	}
	if (!(status & I2C_S_BUSY)) {
     dc6:	069b      	lsls	r3, r3, #26
     dc8:	d534      	bpl.n	e34 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
     dca:	23b0      	movs	r3, #176	; 0xb0
	if (count < BUFFER_LENGTH) {
     dcc:	f1be 0f1f 	cmp.w	lr, #31
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
     dd0:	7093      	strb	r3, [r2, #2]
	if (count < BUFFER_LENGTH) {
     dd2:	d83f      	bhi.n	e54 <L_3073_delayMicroseconds+0x12>
     dd4:	6922      	ldr	r2, [r4, #16]
		rxBuffer[count++] = port().D;
     dd6:	eb04 030e 	add.w	r3, r4, lr
     dda:	7912      	ldrb	r2, [r2, #4]
     ddc:	761a      	strb	r2, [r3, #24]
     dde:	f10e 0e01 	add.w	lr, lr, #1
     de2:	fa5f fe8e 	uxtb.w	lr, lr
#if F_CPU > 120000000
	__asm__("nop");
	__asm__("nop");
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
     de6:	b116      	cbz	r6, dee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1aa>
     de8:	6923      	ldr	r3, [r4, #16]
     dea:	2280      	movs	r2, #128	; 0x80
     dec:	709a      	strb	r2, [r3, #2]
	rxBufferLength = count;
     dee:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
	return count;
     df2:	4677      	mov	r7, lr
     df4:	e784      	b.n	d00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
     df6:	f881 8002 	strb.w	r8, [r1, #2]
     dfa:	6923      	ldr	r3, [r4, #16]
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
     dfc:	2280      	movs	r2, #128	; 0x80
     dfe:	709a      	strb	r2, [r3, #2]
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
     e00:	4677      	mov	r7, lr
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
			rxBufferLength = count;
     e02:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
     e06:	e77b      	b.n	d00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
		if (count < BUFFER_LENGTH) {
			rxBuffer[count++] = port().D;
     e08:	eb04 020e 	add.w	r2, r4, lr
     e0c:	f891 8004 	ldrb.w	r8, [r1, #4]
     e10:	f882 8018 	strb.w	r8, [r2, #24]
     e14:	f10e 0e01 	add.w	lr, lr, #1
     e18:	fa5f fe8e 	uxtb.w	lr, lr
     e1c:	e7b9      	b.n	d92 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x14e>
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
     e1e:	f881 c002 	strb.w	ip, [r1, #2]
     e22:	6921      	ldr	r1, [r4, #16]
     e24:	4608      	mov	r0, r1
     e26:	e7b0      	b.n	d8a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x146>
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
     e28:	21a8      	movs	r1, #168	; 0xa8
     e2a:	7091      	strb	r1, [r2, #2]
     e2c:	6920      	ldr	r0, [r4, #16]


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
     e2e:	46be      	mov	lr, r7
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
     e30:	7902      	ldrb	r2, [r0, #4]
     e32:	e7b0      	b.n	d96 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x152>
     e34:	4677      	mov	r7, lr
     e36:	e763      	b.n	d00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
     e38:	7081      	strb	r1, [r0, #2]
     e3a:	e7de      	b.n	dfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b6>
	if ((status & I2C_S_ARBL)) {
		// we lost bus arbitration to another master
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
     e3c:	2110      	movs	r1, #16
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
     e3e:	23a0      	movs	r3, #160	; 0xa0
     e40:	70d1      	strb	r1, [r2, #3]

00000e42 <L_3073_delayMicroseconds>:
     e42:	3b01      	subs	r3, #1
     e44:	d1fd      	bne.n	e42 <L_3073_delayMicroseconds>
     e46:	6922      	ldr	r2, [r4, #16]
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
     e48:	7893      	ldrb	r3, [r2, #2]
     e4a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		//Serial.printf("requestFrom err9a\n");
		return count;
     e4e:	4677      	mov	r7, lr
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
     e50:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err9a\n");
		return count;
     e52:	e755      	b.n	d00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
     e54:	6923      	ldr	r3, [r4, #16]
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
	if (count < BUFFER_LENGTH) {
		rxBuffer[count++] = port().D;
	} else {
		tmp = port().D;
     e56:	791b      	ldrb	r3, [r3, #4]
     e58:	e7c5      	b.n	de6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1a2>
     e5a:	bf00      	nop
     e5c:	1fff9640 	.word	0x1fff9640

00000e60 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
     e60:	4801      	ldr	r0, [pc, #4]	; (e68 <i2c0_isr+0x8>)
     e62:	f7ff bd1f 	b.w	8a4 <TwoWire::isr()>
     e66:	bf00      	nop
     e68:	1fff87fc 	.word	0x1fff87fc

00000e6c <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
     e6c:	4801      	ldr	r0, [pc, #4]	; (e74 <i2c1_isr+0x8>)
     e6e:	f7ff bd19 	b.w	8a4 <TwoWire::isr()>
     e72:	bf00      	nop
     e74:	1fff8868 	.word	0x1fff8868

00000e78 <leanSDCard::leanSDCard(int)>:

#include "leanSD.h"


leanSDCard::leanSDCard(int SSPin) {
	_SSPin = SSPin;
     e78:	6001      	str	r1, [r0, #0]
}
     e7a:	4770      	bx	lr

00000e7c <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:

void leanSDCard::sendCommand(uint8_t cmd, uint8_t arg1, uint8_t arg2, uint8_t arg3, uint8_t arg4, uint8_t crc) {
     e7c:	b4f0      	push	{r4, r5, r6, r7}
     e7e:	4821      	ldr	r0, [pc, #132]	; (f04 <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x88>)
     e80:	f89d 6010 	ldrb.w	r6, [sp, #16]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     e84:	6800      	ldr	r0, [r0, #0]
     e86:	f89d 5014 	ldrb.w	r5, [sp, #20]
     e8a:	f89d 4018 	ldrb.w	r4, [sp, #24]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     e8e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
     e92:	62c7      	str	r7, [r0, #44]	; 0x2c
		port().PUSHR = data;
     e94:	6341      	str	r1, [r0, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     e96:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
     e98:	2900      	cmp	r1, #0
     e9a:	dafc      	bge.n	e96 <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1a>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     e9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     ea0:	6b87      	ldr	r7, [r0, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ea2:	62c1      	str	r1, [r0, #44]	; 0x2c
		port().PUSHR = data;
     ea4:	6342      	str	r2, [r0, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     ea6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     ea8:	2a00      	cmp	r2, #0
     eaa:	dafc      	bge.n	ea6 <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     eac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     eb0:	6b81      	ldr	r1, [r0, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     eb2:	62c2      	str	r2, [r0, #44]	; 0x2c
		port().PUSHR = data;
     eb4:	6343      	str	r3, [r0, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     eb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     eb8:	2b00      	cmp	r3, #0
     eba:	dafc      	bge.n	eb6 <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x3a>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     ec0:	6b82      	ldr	r2, [r0, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ec2:	62c3      	str	r3, [r0, #44]	; 0x2c
		port().PUSHR = data;
     ec4:	6346      	str	r6, [r0, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     ec6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     ec8:	2b00      	cmp	r3, #0
     eca:	dafc      	bge.n	ec6 <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x4a>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     ed0:	6b82      	ldr	r2, [r0, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ed2:	62c3      	str	r3, [r0, #44]	; 0x2c
		port().PUSHR = data;
     ed4:	6345      	str	r5, [r0, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     ed6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     ed8:	2b00      	cmp	r3, #0
     eda:	dafc      	bge.n	ed6 <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x5a>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     ee0:	6b82      	ldr	r2, [r0, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ee2:	62c3      	str	r3, [r0, #44]	; 0x2c
		port().PUSHR = data;
     ee4:	6344      	str	r4, [r0, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     ee6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     ee8:	2b00      	cmp	r3, #0
     eea:	dafc      	bge.n	ee6 <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     eec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
     ef0:	23ff      	movs	r3, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     ef2:	6b81      	ldr	r1, [r0, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ef4:	62c2      	str	r2, [r0, #44]	; 0x2c
		port().PUSHR = data;
     ef6:	6343      	str	r3, [r0, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     ef8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     efa:	2b00      	cmp	r3, #0
     efc:	dafc      	bge.n	ef8 <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x7c>
		return port().POPR;
     efe:	6b83      	ldr	r3, [r0, #56]	; 0x38
	SPI.transfer(arg3);
	SPI.transfer(arg4);
	SPI.transfer(crc);
	// Response wait cycle
	SPI.transfer(0xFF);
}
     f00:	bcf0      	pop	{r4, r5, r6, r7}
     f02:	4770      	bx	lr
     f04:	1fff88d4 	.word	0x1fff88d4

00000f08 <leanSDCard::init()>:
	for (int i = 0; i < 5; i++) {
		SPI.transfer(0xFF);
	}
}

int leanSDCard::init() {
     f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		} else if (clockDiv == SPI_CLOCK_DIV32) {
			setClockDivider_noInline(SPISettings(500000, MSBFIRST, SPI_MODE0).ctar);
		} else if (clockDiv == SPI_CLOCK_DIV64) {
			setClockDivider_noInline(SPISettings(250000, MSBFIRST, SPI_MODE0).ctar);
		} else { /* clockDiv == SPI_CLOCK_DIV128 */
			setClockDivider_noInline(SPISettings(125000, MSBFIRST, SPI_MODE0).ctar);
     f0c:	4d79      	ldr	r5, [pc, #484]	; (10f4 <leanSDCard::init()+0x1ec>)
     f0e:	b087      	sub	sp, #28
	// Set the Slave Select pin
	pinMode(_SSPin, OUTPUT);
     f10:	2101      	movs	r1, #1
	for (int i = 0; i < 5; i++) {
		SPI.transfer(0xFF);
	}
}

int leanSDCard::init() {
     f12:	4606      	mov	r6, r0
	// Set the Slave Select pin
	pinMode(_SSPin, OUTPUT);
     f14:	7800      	ldrb	r0, [r0, #0]
     f16:	f001 ff15 	bl	2d44 <pinMode>
     f1a:	4628      	mov	r0, r5
     f1c:	4976      	ldr	r1, [pc, #472]	; (10f8 <leanSDCard::init()+0x1f0>)
     f1e:	f000 f9dd 	bl	12dc <SPIClass::setClockDivider_noInline(unsigned long)>
     f22:	6829      	ldr	r1, [r5, #0]
     f24:	230a      	movs	r3, #10
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f26:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
		port().PUSHR = data;
     f2a:	20ff      	movs	r0, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f2c:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().PUSHR = data;
     f2e:	6348      	str	r0, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     f30:	6aca      	ldr	r2, [r1, #44]	; 0x2c
     f32:	2a00      	cmp	r2, #0
     f34:	dafc      	bge.n	f30 <leanSDCard::init()+0x28>
	// Slow down clock for initialization
	SPI.setClockDivider(SPI_CLOCK_DIV128);

	// Send 80 bits to get tell the SD card the rate of transfer
	for (int i = 0; i < 10; i++) {
     f36:	3b01      	subs	r3, #1
		return port().POPR;
     f38:	6b8a      	ldr	r2, [r1, #56]	; 0x38
     f3a:	d1f7      	bne.n	f2c <leanSDCard::init()+0x24>
		SPI.transfer(0xFF);
	}

	// CMD0
	sendCommand(0x40, 0x00, 0x00, 0x00, 0x00, 0x95);
     f3c:	2295      	movs	r2, #149	; 0x95
     f3e:	9301      	str	r3, [sp, #4]
     f40:	9300      	str	r3, [sp, #0]
     f42:	9202      	str	r2, [sp, #8]
     f44:	2140      	movs	r1, #64	; 0x40
     f46:	461a      	mov	r2, r3
     f48:	4630      	mov	r0, r6
     f4a:	f7ff ff97 	bl	e7c <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     f4e:	6829      	ldr	r1, [r5, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
     f54:	23ff      	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f56:	62ca      	str	r2, [r1, #44]	; 0x2c
		port().PUSHR = data;
     f58:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     f5a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     f5c:	2b00      	cmp	r3, #0
     f5e:	dafc      	bge.n	f5a <leanSDCard::init()+0x52>
		return port().POPR;
     f60:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	// R1 response
	if (SPI.transfer(0xFF) != 0x01) {
     f62:	b2db      	uxtb	r3, r3
     f64:	2b01      	cmp	r3, #1
     f66:	f040 80bb 	bne.w	10e0 <leanSDCard::init()+0x1d8>
     f6a:	2305      	movs	r3, #5
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f6c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
		port().PUSHR = data;
     f70:	20ff      	movs	r0, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f72:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().PUSHR = data;
     f74:	6348      	str	r0, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     f76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
     f78:	2a00      	cmp	r2, #0
     f7a:	dafc      	bge.n	f76 <leanSDCard::init()+0x6e>
	// Response wait cycle
	SPI.transfer(0xFF);
}

void leanSDCard::wait() {
	for (int i = 0; i < 5; i++) {
     f7c:	3b01      	subs	r3, #1
		return port().POPR;
     f7e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
     f80:	d1f7      	bne.n	f72 <leanSDCard::init()+0x6a>
		return -1;
	};
	wait();

	// CMD8
	sendCommand(0x48, 0x00, 0x00, 0x01, 0xAA, 0x87);
     f82:	2001      	movs	r0, #1
     f84:	21aa      	movs	r1, #170	; 0xaa
     f86:	2287      	movs	r2, #135	; 0x87
     f88:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
     f8c:	461a      	mov	r2, r3
     f8e:	2148      	movs	r1, #72	; 0x48
     f90:	4630      	mov	r0, r6
     f92:	f7ff ff73 	bl	e7c <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     f96:	682b      	ldr	r3, [r5, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
     f9c:	22ff      	movs	r2, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f9e:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     fa0:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fa4:	2a00      	cmp	r2, #0
     fa6:	dafc      	bge.n	fa2 <leanSDCard::init()+0x9a>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     fa8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
     fac:	22ff      	movs	r2, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     fae:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     fb0:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     fb2:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fb6:	2a00      	cmp	r2, #0
     fb8:	dafc      	bge.n	fb4 <leanSDCard::init()+0xac>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     fba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
     fbe:	22ff      	movs	r2, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     fc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     fc2:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     fc4:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fc8:	2a00      	cmp	r2, #0
     fca:	dafc      	bge.n	fc6 <leanSDCard::init()+0xbe>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     fcc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
     fd0:	22ff      	movs	r2, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     fd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     fd4:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
     fd6:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fda:	2a00      	cmp	r2, #0
     fdc:	dafc      	bge.n	fd8 <leanSDCard::init()+0xd0>
		return port().POPR;
     fde:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     fe0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
		port().PUSHR = data;
     fe4:	22ff      	movs	r2, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     fe6:	62d8      	str	r0, [r3, #44]	; 0x2c
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     fe8:	b2c9      	uxtb	r1, r1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
     fea:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fee:	2a00      	cmp	r2, #0
     ff0:	dafc      	bge.n	fec <leanSDCard::init()+0xe4>
		return port().POPR;
     ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	SPI.transfer(0xFF);
	SPI.transfer(0xFF);
	SPI.transfer(0xFF);
	byte voltage = SPI.transfer(0xFF);
	byte echo = SPI.transfer(0xFF);
	if (voltage != 0x01 || echo != 0xAA) {
     ff4:	2901      	cmp	r1, #1
     ff6:	b2db      	uxtb	r3, r3
     ff8:	d166      	bne.n	10c8 <leanSDCard::init()+0x1c0>
     ffa:	2baa      	cmp	r3, #170	; 0xaa
     ffc:	d164      	bne.n	10c8 <leanSDCard::init()+0x1c0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ffe:	4f3f      	ldr	r7, [pc, #252]	; (10fc <leanSDCard::init()+0x1f4>)
    1000:	683b      	ldr	r3, [r7, #0]
    1002:	9304      	str	r3, [sp, #16]
	return ret;
    1004:	f8dd 9010 	ldr.w	r9, [sp, #16]
		return -1;
	}

	// CMD55 and ACMD41 repeat
	unsigned long start = millis();
	while (millis() - start < 5000) {
    1008:	f241 3887 	movw	r8, #4999	; 0x1387
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    100c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1010:	683b      	ldr	r3, [r7, #0]
    1012:	9305      	str	r3, [sp, #20]
	return ret;
    1014:	9b05      	ldr	r3, [sp, #20]
    1016:	ebc9 0303 	rsb	r3, r9, r3
    101a:	4543      	cmp	r3, r8
    101c:	d833      	bhi.n	1086 <leanSDCard::init()+0x17e>
		// CMD55
		sendCommand(0x77, 0x00, 0x00, 0x00, 0x00, 0x65);
    101e:	2300      	movs	r3, #0
    1020:	2265      	movs	r2, #101	; 0x65
    1022:	9202      	str	r2, [sp, #8]
    1024:	9301      	str	r3, [sp, #4]
    1026:	9300      	str	r3, [sp, #0]
    1028:	461a      	mov	r2, r3
    102a:	2177      	movs	r1, #119	; 0x77
    102c:	4630      	mov	r0, r6
    102e:	f7ff ff25 	bl	e7c <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    1032:	6829      	ldr	r1, [r5, #0]
    1034:	2305      	movs	r3, #5
		port().PUSHR = data;
    1036:	20ff      	movs	r0, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1038:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().PUSHR = data;
    103a:	6348      	str	r0, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    103c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    103e:	2a00      	cmp	r2, #0
    1040:	dafc      	bge.n	103c <leanSDCard::init()+0x134>
	// Response wait cycle
	SPI.transfer(0xFF);
}

void leanSDCard::wait() {
	for (int i = 0; i < 5; i++) {
    1042:	3b01      	subs	r3, #1
		return port().POPR;
    1044:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    1046:	d1f7      	bne.n	1038 <leanSDCard::init()+0x130>
		// CMD55
		sendCommand(0x77, 0x00, 0x00, 0x00, 0x00, 0x65);
		wait();

		// ACMD41
		sendCommand(0x69, 0x40, 0x00, 0x00, 0x00, 0x77);
    1048:	2277      	movs	r2, #119	; 0x77
    104a:	9301      	str	r3, [sp, #4]
    104c:	9300      	str	r3, [sp, #0]
    104e:	9202      	str	r2, [sp, #8]
    1050:	2169      	movs	r1, #105	; 0x69
    1052:	2240      	movs	r2, #64	; 0x40
    1054:	4630      	mov	r0, r6
    1056:	f7ff ff11 	bl	e7c <leanSDCard::sendCommand(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    105a:	682a      	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
    105c:	23ff      	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    105e:	62d4      	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    1060:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1062:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1064:	2b00      	cmp	r3, #0
    1066:	dafc      	bge.n	1062 <leanSDCard::init()+0x15a>
		return port().POPR;
    1068:	6b93      	ldr	r3, [r2, #56]	; 0x38
		if (SPI.transfer(0xFF) == 0x00) {
    106a:	f013 0fff 	tst.w	r3, #255	; 0xff
    106e:	d016      	beq.n	109e <leanSDCard::init()+0x196>
    1070:	2105      	movs	r1, #5
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
    1072:	20ff      	movs	r0, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1074:	62d4      	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    1076:	6350      	str	r0, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1078:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    107a:	2b00      	cmp	r3, #0
    107c:	dafc      	bge.n	1078 <leanSDCard::init()+0x170>
	// Response wait cycle
	SPI.transfer(0xFF);
}

void leanSDCard::wait() {
	for (int i = 0; i < 5; i++) {
    107e:	3901      	subs	r1, #1
		return port().POPR;
    1080:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1082:	d1f7      	bne.n	1074 <leanSDCard::init()+0x16c>
    1084:	e7c4      	b.n	1010 <leanSDCard::init()+0x108>
    1086:	2113      	movs	r1, #19
    1088:	481d      	ldr	r0, [pc, #116]	; (1100 <leanSDCard::init()+0x1f8>)
    108a:	f002 ff45 	bl	3f18 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    108e:	481d      	ldr	r0, [pc, #116]	; (1104 <leanSDCard::init()+0x1fc>)
    1090:	f003 f93a 	bl	4308 <Print::println()>
		}
		wait();
	}
	
	Serial.println("CMD55/ACMD41 failed");
	return -1;
    1094:	f04f 30ff 	mov.w	r0, #4294967295
}
    1098:	b007      	add	sp, #28
    109a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (clockDiv == SPI_CLOCK_DIV4) {
			setClockDivider_noInline(SPISettings(4000000, MSBFIRST, SPI_MODE0).ctar);
		} else if (clockDiv == SPI_CLOCK_DIV8) {
			setClockDivider_noInline(SPISettings(2000000, MSBFIRST, SPI_MODE0).ctar);
		} else if (clockDiv == SPI_CLOCK_DIV16) {
			setClockDivider_noInline(SPISettings(1000000, MSBFIRST, SPI_MODE0).ctar);
    109e:	491a      	ldr	r1, [pc, #104]	; (1108 <leanSDCard::init()+0x200>)
    10a0:	4814      	ldr	r0, [pc, #80]	; (10f4 <leanSDCard::init()+0x1ec>)
    10a2:	f000 f91b 	bl	12dc <SPIClass::setClockDivider_noInline(unsigned long)>
    10a6:	682a      	ldr	r2, [r5, #0]
    10a8:	2105      	movs	r1, #5
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    10aa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
		port().PUSHR = data;
    10ae:	20ff      	movs	r0, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    10b0:	62d4      	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    10b2:	6350      	str	r0, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    10b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    10b6:	2b00      	cmp	r3, #0
    10b8:	dafc      	bge.n	10b4 <leanSDCard::init()+0x1ac>
	// Response wait cycle
	SPI.transfer(0xFF);
}

void leanSDCard::wait() {
	for (int i = 0; i < 5; i++) {
    10ba:	3901      	subs	r1, #1
		return port().POPR;
    10bc:	6b93      	ldr	r3, [r2, #56]	; 0x38
    10be:	d1f7      	bne.n	10b0 <leanSDCard::init()+0x1a8>
		if (SPI.transfer(0xFF) == 0x00) {
			// Speed up clock for fast writes
			SPI.setClockDivider(SPI_CLOCK_DIV16);
			wait();

			return 0;
    10c0:	4608      	mov	r0, r1
		wait();
	}
	
	Serial.println("CMD55/ACMD41 failed");
	return -1;
}
    10c2:	b007      	add	sp, #28
    10c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    10c8:	210b      	movs	r1, #11
    10ca:	4810      	ldr	r0, [pc, #64]	; (110c <leanSDCard::init()+0x204>)
    10cc:	f002 ff24 	bl	3f18 <usb_serial_write>
    10d0:	480c      	ldr	r0, [pc, #48]	; (1104 <leanSDCard::init()+0x1fc>)
    10d2:	f003 f919 	bl	4308 <Print::println()>
	SPI.transfer(0xFF);
	byte voltage = SPI.transfer(0xFF);
	byte echo = SPI.transfer(0xFF);
	if (voltage != 0x01 || echo != 0xAA) {
		Serial.println("CMD8 failed");
		return -1;
    10d6:	f04f 30ff 	mov.w	r0, #4294967295
		wait();
	}
	
	Serial.println("CMD55/ACMD41 failed");
	return -1;
}
    10da:	b007      	add	sp, #28
    10dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    10e0:	210b      	movs	r1, #11
    10e2:	480b      	ldr	r0, [pc, #44]	; (1110 <leanSDCard::init()+0x208>)
    10e4:	f002 ff18 	bl	3f18 <usb_serial_write>
    10e8:	4806      	ldr	r0, [pc, #24]	; (1104 <leanSDCard::init()+0x1fc>)
    10ea:	f003 f90d 	bl	4308 <Print::println()>
	// CMD0
	sendCommand(0x40, 0x00, 0x00, 0x00, 0x00, 0x95);
	// R1 response
	if (SPI.transfer(0xFF) != 0x01) {
		Serial.println("CMD0 failed");
		return -1;
    10ee:	f04f 30ff 	mov.w	r0, #4294967295
    10f2:	e7d1      	b.n	1098 <leanSDCard::init()+0x190>
    10f4:	1fff88d4 	.word	0x1fff88d4
    10f8:	38016007 	.word	0x38016007
    10fc:	1fff9640 	.word	0x1fff9640
    1100:	0000631c 	.word	0x0000631c
    1104:	1fff89f4 	.word	0x1fff89f4
    1108:	38032003 	.word	0x38032003
    110c:	00006310 	.word	0x00006310
    1110:	00006304 	.word	0x00006304

00001114 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1114:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1116:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1118:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    111a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    111c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    111e:	d002      	beq.n	1126 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1120:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1122:	f002 bffd 	b.w	4120 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1126:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1128:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    112a:	4718      	bx	r3

0000112c <_spi_dma_rxISR0()>:
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    112c:	b4f0      	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    112e:	4b46      	ldr	r3, [pc, #280]	; (1248 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1130:	4a46      	ldr	r2, [pc, #280]	; (124c <_spi_dma_rxISR0()+0x120>)
    1132:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1134:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1136:	7901      	ldrb	r1, [r0, #4]
    1138:	7011      	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    113a:	4945      	ldr	r1, [pc, #276]	; (1250 <_spi_dma_rxISR0()+0x124>)
    113c:	7922      	ldrb	r2, [r4, #4]
    113e:	700a      	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    1140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1142:	7900      	ldrb	r0, [r0, #4]
    1144:	7008      	strb	r0, [r1, #0]
    1146:	2a00      	cmp	r2, #0
    1148:	d046      	beq.n	11d8 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    114a:	6859      	ldr	r1, [r3, #4]
    114c:	68c9      	ldr	r1, [r1, #12]
    114e:	428a      	cmp	r2, r1
    1150:	d83e      	bhi.n	11d0 <_spi_dma_rxISR0()+0xa4>
    1152:	6821      	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1154:	8bcc      	ldrh	r4, [r1, #30]
    1156:	0424      	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    1158:	f102 30ff 	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    115c:	d465      	bmi.n	122a <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    115e:	f3c0 000e 	ubfx	r0, r0, #0, #15
    1162:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1164:	8bc8      	ldrh	r0, [r1, #30]
    1166:	b280      	uxth	r0, r0
    1168:	82c8      	strh	r0, [r1, #22]
    116a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    116c:	6809      	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    116e:	8bc8      	ldrh	r0, [r1, #30]
    1170:	0400      	lsls	r0, r0, #16
    1172:	d452      	bmi.n	121a <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    1174:	f3c2 000e 	ubfx	r0, r2, #0, #15
    1178:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    117a:	8bc8      	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    117c:	2400      	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    117e:	b280      	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    1180:	f112 32ff 	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1184:	82c8      	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    1186:	bf18      	it	ne
    1188:	2201      	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    118a:	629c      	str	r4, [r3, #40]	; 0x28
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    118c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    118e:	482e      	ldr	r0, [pc, #184]	; (1248 <_spi_dma_rxISR0()+0x11c>)
    1190:	6809      	ldr	r1, [r1, #0]
    1192:	680d      	ldr	r5, [r1, #0]
    1194:	f100 0424 	add.w	r4, r0, #36	; 0x24
    1198:	42a5      	cmp	r5, r4
    119a:	d036      	beq.n	120a <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    119c:	6800      	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    119e:	68c4      	ldr	r4, [r0, #12]
    11a0:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    11a4:	680c      	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    11a6:	680d      	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    11a8:	bf15      	itete	ne
    11aa:	8824      	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    11ac:	7824      	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    11ae:	3502      	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    11b0:	3501      	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    11b2:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    11b6:	600d      	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    11b8:	6344      	str	r4, [r0, #52]	; 0x34
    11ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    11bc:	4b25      	ldr	r3, [pc, #148]	; (1254 <_spi_dma_rxISR0()+0x128>)
    11be:	7909      	ldrb	r1, [r1, #4]
    11c0:	7019      	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    11c2:	4921      	ldr	r1, [pc, #132]	; (1248 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    11c4:	b112      	cbz	r2, 11cc <_spi_dma_rxISR0()+0xa0>
    11c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    11c8:	7912      	ldrb	r2, [r2, #4]
    11ca:	701a      	strb	r2, [r3, #0]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    11cc:	bcf0      	pop	{r4, r5, r6, r7}
    11ce:	4770      	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    11d0:	1a52      	subs	r2, r2, r1
    11d2:	629a      	str	r2, [r3, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    11d4:	2201      	movs	r2, #1
    11d6:	e7d9      	b.n	118c <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    11d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    11da:	6819      	ldr	r1, [r3, #0]
    11dc:	6805      	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    11de:	4c1e      	ldr	r4, [pc, #120]	; (1258 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    11e0:	630a      	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    11e2:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    11e4:	68cc      	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    11e6:	682d      	ldr	r5, [r5, #0]
    11e8:	4e1c      	ldr	r6, [pc, #112]	; (125c <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    11ea:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    11ee:	2703      	movs	r7, #3
    11f0:	42b5      	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    11f2:	60cc      	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    11f4:	f883 7025 	strb.w	r7, [r3, #37]	; 0x25
    11f8:	d11f      	bne.n	123a <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    11fa:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    11fc:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    11fe:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1200:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1202:	d01e      	beq.n	1242 <_spi_dma_rxISR0()+0x116>
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1204:	bcf0      	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1206:	f002 bf8b 	b.w	4120 <EventResponder::triggerEventNotImmediate()>
    120a:	6801      	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    120c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    1210:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1212:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    1216:	6348      	str	r0, [r1, #52]	; 0x34
    1218:	e7cf      	b.n	11ba <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    121a:	8bcc      	ldrh	r4, [r1, #30]
    121c:	f3c2 0008 	ubfx	r0, r2, #0, #9
    1220:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    1224:	4320      	orrs	r0, r4
    1226:	83c8      	strh	r0, [r1, #30]
    1228:	e7a7      	b.n	117a <_spi_dma_rxISR0()+0x4e>
    122a:	8bcc      	ldrh	r4, [r1, #30]
    122c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    1230:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    1234:	4320      	orrs	r0, r4
    1236:	83c8      	strh	r0, [r1, #30]
    1238:	e794      	b.n	1164 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    123a:	462b      	mov	r3, r5
    123c:	4611      	mov	r1, r2
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    123e:	bcf0      	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1240:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1242:	6883      	ldr	r3, [r0, #8]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1244:	bcf0      	pop	{r4, r5, r6, r7}
    1246:	4718      	bx	r3
    1248:	1fff88d4 	.word	0x1fff88d4
    124c:	4000801f 	.word	0x4000801f
    1250:	4000801c 	.word	0x4000801c
    1254:	4000801b 	.word	0x4000801b
    1258:	ff0f0000 	.word	0xff0f0000
    125c:	00001115 	.word	0x00001115

00001260 <SPIClass::begin()>:
    1260:	e890 000c 	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    1264:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    1266:	681c      	ldr	r4, [r3, #0]
    1268:	6859      	ldr	r1, [r3, #4]
    126a:	6825      	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    126c:	4f16      	ldr	r7, [pc, #88]	; (12c8 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    126e:	4e17      	ldr	r6, [pc, #92]	; (12cc <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    1270:	4329      	orrs	r1, r5
    1272:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    1274:	4d16      	ldr	r5, [pc, #88]	; (12d0 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    1276:	4917      	ldr	r1, [pc, #92]	; (12d4 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    1278:	6017      	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    127a:	60d6      	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    127c:	6115      	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    127e:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    1280:	7a41      	ldrb	r1, [r0, #9]
    1282:	4a15      	ldr	r2, [pc, #84]	; (12d8 <SPIClass::begin()+0x78>)
    1284:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    1286:	310a      	adds	r1, #10
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    1288:	f894 4024 	ldrb.w	r4, [r4, #36]	; 0x24
	*reg = hardware().mosi_mux[mosi_pin_index];
    128c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    1290:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    1294:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    1296:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    1298:	7a01      	ldrb	r1, [r0, #8]
    129a:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    129c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    12a0:	7e24      	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    12a2:	69cd      	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    12a4:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    12a8:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    12aa:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    12ac:	7a81      	ldrb	r1, [r0, #10]
    12ae:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    12b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    12b4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
	*reg = hardware().sck_mux[sck_pin_index];
    12b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    12ba:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    12be:	bcf0      	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    12c0:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    12c2:	6019      	str	r1, [r3, #0]
}
    12c4:	4770      	bx	lr
    12c6:	bf00      	nop
    12c8:	001f4001 	.word	0x001f4001
    12cc:	38001001 	.word	0x38001001
    12d0:	78001001 	.word	0x78001001
    12d4:	801f0000 	.word	0x801f0000
    12d8:	000064b4 	.word	0x000064b4

000012dc <SPIClass::setClockDivider_noInline(unsigned long)>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    12dc:	6842      	ldr	r2, [r0, #4]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    12de:	6803      	ldr	r3, [r0, #0]
	//SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
}

void SPIClass::setClockDivider_noInline(uint32_t clk)
{
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    12e0:	ca05      	ldmia	r2, {r0, r2}
	// TODO: implement with native code
	//SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
}

void SPIClass::setClockDivider_noInline(uint32_t clk)
{
    12e2:	b410      	push	{r4}
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    12e4:	6804      	ldr	r4, [r0, #0]
    12e6:	4322      	orrs	r2, r4
    12e8:	6002      	str	r2, [r0, #0]
	uint32_t ctar = port().CTAR0;
    12ea:	68d8      	ldr	r0, [r3, #12]
	ctar &= (SPI_CTAR_CPOL | SPI_CTAR_CPHA | SPI_CTAR_LSBFE);
	if (ctar & SPI_CTAR_CPHA) {
    12ec:	0184      	lsls	r4, r0, #6

void SPIClass::setClockDivider_noInline(uint32_t clk)
{
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	uint32_t ctar = port().CTAR0;
	ctar &= (SPI_CTAR_CPOL | SPI_CTAR_CPHA | SPI_CTAR_LSBFE);
    12ee:	f000 62e0 	and.w	r2, r0, #117440512	; 0x7000000
	if (ctar & SPI_CTAR_CPHA) {
    12f2:	d505      	bpl.n	1300 <SPIClass::setClockDivider_noInline(unsigned long)+0x24>
		clk = (clk & 0xFFFF0FFF) | ((clk & 0xF000) >> 4);
    12f4:	0908      	lsrs	r0, r1, #4
    12f6:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    12fa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
    12fe:	4301      	orrs	r1, r0
	SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7)
};

void SPIClass::updateCTAR(uint32_t ctar)
{
	if (port().CTAR0 != ctar) {
    1300:	68d8      	ldr	r0, [r3, #12]
	uint32_t ctar = port().CTAR0;
	ctar &= (SPI_CTAR_CPOL | SPI_CTAR_CPHA | SPI_CTAR_LSBFE);
	if (ctar & SPI_CTAR_CPHA) {
		clk = (clk & 0xFFFF0FFF) | ((clk & 0xF000) >> 4);
	}
	ctar |= clk;
    1302:	4311      	orrs	r1, r2
	SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7)
};

void SPIClass::updateCTAR(uint32_t ctar)
{
	if (port().CTAR0 != ctar) {
    1304:	4281      	cmp	r1, r0
    1306:	d009      	beq.n	131c <SPIClass::setClockDivider_noInline(unsigned long)+0x40>
		uint32_t mcr = port().MCR;
    1308:	681a      	ldr	r2, [r3, #0]
		if (mcr & SPI_MCR_MDIS) {
    130a:	0450      	lsls	r0, r2, #17
    130c:	d408      	bmi.n	1320 <SPIClass::setClockDivider_noInline(unsigned long)+0x44>
			port().CTAR0 = ctar;
			port().CTAR1 = ctar | SPI_CTAR_FMSZ(8);
		} else {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    130e:	4807      	ldr	r0, [pc, #28]	; (132c <SPIClass::setClockDivider_noInline(unsigned long)+0x50>)
    1310:	6018      	str	r0, [r3, #0]
			port().CTAR0 = ctar;
			port().CTAR1 = ctar | SPI_CTAR_FMSZ(8);
    1312:	f041 4080 	orr.w	r0, r1, #1073741824	; 0x40000000
		if (mcr & SPI_MCR_MDIS) {
			port().CTAR0 = ctar;
			port().CTAR1 = ctar | SPI_CTAR_FMSZ(8);
		} else {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
			port().CTAR0 = ctar;
    1316:	60d9      	str	r1, [r3, #12]
			port().CTAR1 = ctar | SPI_CTAR_FMSZ(8);
    1318:	6118      	str	r0, [r3, #16]
			port().MCR = mcr;
    131a:	601a      	str	r2, [r3, #0]
	if (ctar & SPI_CTAR_CPHA) {
		clk = (clk & 0xFFFF0FFF) | ((clk & 0xF000) >> 4);
	}
	ctar |= clk;
	updateCTAR(ctar);
}
    131c:	bc10      	pop	{r4}
    131e:	4770      	bx	lr
{
	if (port().CTAR0 != ctar) {
		uint32_t mcr = port().MCR;
		if (mcr & SPI_MCR_MDIS) {
			port().CTAR0 = ctar;
			port().CTAR1 = ctar | SPI_CTAR_FMSZ(8);
    1320:	f041 4280 	orr.w	r2, r1, #1073741824	; 0x40000000
void SPIClass::updateCTAR(uint32_t ctar)
{
	if (port().CTAR0 != ctar) {
		uint32_t mcr = port().MCR;
		if (mcr & SPI_MCR_MDIS) {
			port().CTAR0 = ctar;
    1324:	60d9      	str	r1, [r3, #12]
	if (ctar & SPI_CTAR_CPHA) {
		clk = (clk & 0xFFFF0FFF) | ((clk & 0xF000) >> 4);
	}
	ctar |= clk;
	updateCTAR(ctar);
}
    1326:	bc10      	pop	{r4}
{
	if (port().CTAR0 != ctar) {
		uint32_t mcr = port().MCR;
		if (mcr & SPI_MCR_MDIS) {
			port().CTAR0 = ctar;
			port().CTAR1 = ctar | SPI_CTAR_FMSZ(8);
    1328:	611a      	str	r2, [r3, #16]
	if (ctar & SPI_CTAR_CPHA) {
		clk = (clk & 0xFFFF0FFF) | ((clk & 0xF000) >> 4);
	}
	ctar |= clk;
	updateCTAR(ctar);
}
    132a:	4770      	bx	lr
    132c:	001f4001 	.word	0x001f4001

00001330 <MPU9250::MPU9250(TwoWire&, unsigned char)>:

#include "Arduino.h"
#include "MPU9250.h"

/* MPU9250 object, input the I2C bus and address */
MPU9250::MPU9250(TwoWire &bus,uint8_t address){
    1330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1334:	f8df 8284 	ldr.w	r8, [pc, #644]	; 15bc <MPU9250::MPU9250(TwoWire&, unsigned char)+0x28c>
    1338:	f8c0 8008 	str.w	r8, [r0, #8]
    133c:	f8df a280 	ldr.w	sl, [pc, #640]	; 15c0 <MPU9250::MPU9250(TwoWire&, unsigned char)+0x290>
    1340:	4e9b      	ldr	r6, [pc, #620]	; (15b0 <MPU9250::MPU9250(TwoWire&, unsigned char)+0x280>)
    1342:	4d9c      	ldr	r5, [pc, #624]	; (15b4 <MPU9250::MPU9250(TwoWire&, unsigned char)+0x284>)
    1344:	f8df 927c 	ldr.w	r9, [pc, #636]	; 15c4 <MPU9250::MPU9250(TwoWire&, unsigned char)+0x294>
    1348:	f8c0 a018 	str.w	sl, [r0, #24]
    134c:	f04f 0864 	mov.w	r8, #100	; 0x64
    1350:	61c6      	str	r6, [r0, #28]
    1352:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    1356:	f8c0 809c 	str.w	r8, [r0, #156]	; 0x9c
    135a:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
    135e:	f8df c268 	ldr.w	ip, [pc, #616]	; 15c8 <MPU9250::MPU9250(TwoWire&, unsigned char)+0x298>
    1362:	f8df e268 	ldr.w	lr, [pc, #616]	; 15cc <MPU9250::MPU9250(TwoWire&, unsigned char)+0x29c>
    1366:	4c94      	ldr	r4, [pc, #592]	; (15b8 <MPU9250::MPU9250(TwoWire&, unsigned char)+0x288>)
    1368:	f8c0 c094 	str.w	ip, [r0, #148]	; 0x94
    136c:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    1370:	f64f 76ff 	movw	r6, #65535	; 0xffff
    1374:	253b      	movs	r5, #59	; 0x3b
    1376:	f04f 0841 	mov.w	r8, #65	; 0x41
    137a:	f04f 091c 	mov.w	r9, #28
    137e:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    1382:	f8a0 a110 	strh.w	sl, [r0, #272]	; 0x110
    1386:	f8a0 6174 	strh.w	r6, [r0, #372]	; 0x174
    138a:	f8c0 e178 	str.w	lr, [r0, #376]	; 0x178
    138e:	2680      	movs	r6, #128	; 0x80
    1390:	f04f 0e08 	mov.w	lr, #8
    1394:	f8c0 417c 	str.w	r4, [r0, #380]	; 0x17c
    1398:	f880 5180 	strb.w	r5, [r0, #384]	; 0x180
    139c:	2400      	movs	r4, #0
    139e:	2501      	movs	r5, #1
    13a0:	f880 8182 	strb.w	r8, [r0, #386]	; 0x182
    13a4:	f880 9184 	strb.w	r9, [r0, #388]	; 0x184
    13a8:	f04f 0c43 	mov.w	ip, #67	; 0x43
    13ac:	f04f 0a49 	mov.w	sl, #73	; 0x49
    13b0:	f04f 081d 	mov.w	r8, #29
    13b4:	f04f 0919 	mov.w	r9, #25
    13b8:	f880 c181 	strb.w	ip, [r0, #385]	; 0x181
    13bc:	f880 a183 	strb.w	sl, [r0, #387]	; 0x183
    13c0:	75c6      	strb	r6, [r0, #23]
    13c2:	f8c0 7104 	str.w	r7, [r0, #260]	; 0x104
    13c6:	f8c0 7108 	str.w	r7, [r0, #264]	; 0x108
    13ca:	f8c0 710c 	str.w	r7, [r0, #268]	; 0x10c
    13ce:	f8c0 7154 	str.w	r7, [r0, #340]	; 0x154
    13d2:	f8c0 7158 	str.w	r7, [r0, #344]	; 0x158
    13d6:	f8c0 715c 	str.w	r7, [r0, #348]	; 0x15c
    13da:	f880 e118 	strb.w	lr, [r0, #280]	; 0x118
    13de:	f04f 0c1b 	mov.w	ip, #27
    13e2:	f04f 0a37 	mov.w	sl, #55	; 0x37
    13e6:	f8a0 4164 	strh.w	r4, [r0, #356]	; 0x164
    13ea:	f8a0 4168 	strh.w	r4, [r0, #360]	; 0x168
    13ee:	f8a0 416c 	strh.w	r4, [r0, #364]	; 0x16c
    13f2:	f8a0 416e 	strh.w	r4, [r0, #366]	; 0x16e
    13f6:	f8a0 4170 	strh.w	r4, [r0, #368]	; 0x170
    13fa:	f8a0 4172 	strh.w	r4, [r0, #370]	; 0x172
    13fe:	f8a0 5166 	strh.w	r5, [r0, #358]	; 0x166
    1402:	f8a0 516a 	strh.w	r5, [r0, #362]	; 0x16a
    1406:	f880 818e 	strb.w	r8, [r0, #398]	; 0x18e
    140a:	f880 919c 	strb.w	r9, [r0, #412]	; 0x19c
    140e:	f04f 086b 	mov.w	r8, #107	; 0x6b
    1412:	f04f 0918 	mov.w	r9, #24
    1416:	f880 c189 	strb.w	ip, [r0, #393]	; 0x189
    141a:	f880 a19d 	strb.w	sl, [r0, #413]	; 0x19d
    141e:	f880 81a3 	strb.w	r8, [r0, #419]	; 0x1a3
    1422:	f04f 0a02 	mov.w	sl, #2
    1426:	f04f 0804 	mov.w	r8, #4
    142a:	f880 9188 	strb.w	r9, [r0, #392]	; 0x188
    142e:	f880 918d 	strb.w	r9, [r0, #397]	; 0x18d
    1432:	f04f 0c38 	mov.w	ip, #56	; 0x38
    1436:	f04f 0905 	mov.w	r9, #5
    143a:	2710      	movs	r7, #16
    143c:	f880 c19e 	strb.w	ip, [r0, #414]	; 0x19e
    1440:	f880 a190 	strb.w	sl, [r0, #400]	; 0x190
    1444:	f04f 0c03 	mov.w	ip, #3
    1448:	f880 a197 	strb.w	sl, [r0, #407]	; 0x197
    144c:	f880 8192 	strb.w	r8, [r0, #402]	; 0x192
    1450:	f04f 0a06 	mov.w	sl, #6
    1454:	f880 8199 	strb.w	r8, [r0, #409]	; 0x199
    1458:	f880 9193 	strb.w	r9, [r0, #403]	; 0x193
    145c:	f04f 0840 	mov.w	r8, #64	; 0x40
    1460:	f880 919a 	strb.w	r9, [r0, #410]	; 0x19a
    1464:	f04f 0b1a 	mov.w	fp, #26
    1468:	f04f 0920 	mov.w	r9, #32
    146c:	f880 e186 	strb.w	lr, [r0, #390]	; 0x186
    1470:	f880 e18b 	strb.w	lr, [r0, #395]	; 0x18b
    1474:	f880 61a5 	strb.w	r6, [r0, #421]	; 0x1a5
    1478:	f880 b195 	strb.w	fp, [r0, #405]	; 0x195
    147c:	f880 c191 	strb.w	ip, [r0, #401]	; 0x191
    1480:	f880 c198 	strb.w	ip, [r0, #408]	; 0x198
    1484:	f880 a194 	strb.w	sl, [r0, #404]	; 0x194
    1488:	f880 a19b 	strb.w	sl, [r0, #411]	; 0x19b
    148c:	f880 81a1 	strb.w	r8, [r0, #417]	; 0x1a1
    1490:	f880 4185 	strb.w	r4, [r0, #389]	; 0x185
    1494:	f880 418a 	strb.w	r4, [r0, #394]	; 0x18a
    1498:	f880 518f 	strb.w	r5, [r0, #399]	; 0x18f
    149c:	f880 5196 	strb.w	r5, [r0, #406]	; 0x196
    14a0:	f880 419f 	strb.w	r4, [r0, #415]	; 0x19f
    14a4:	f880 41a0 	strb.w	r4, [r0, #416]	; 0x1a0
    14a8:	f880 51a2 	strb.w	r5, [r0, #418]	; 0x1a2
    14ac:	f880 7187 	strb.w	r7, [r0, #391]	; 0x187
    14b0:	f880 718c 	strb.w	r7, [r0, #396]	; 0x18c
    14b4:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    14b8:	f880 91a4 	strb.w	r9, [r0, #420]	; 0x1a4
    14bc:	f880 91ab 	strb.w	r9, [r0, #427]	; 0x1ab
    14c0:	f880 81b6 	strb.w	r8, [r0, #438]	; 0x1b6
    14c4:	f04f 0907 	mov.w	r9, #7
    14c8:	f04f 086a 	mov.w	r8, #106	; 0x6a
    14cc:	f880 61b2 	strb.w	r6, [r0, #434]	; 0x1b2
    14d0:	f880 61b3 	strb.w	r6, [r0, #435]	; 0x1b3
    14d4:	f880 61b5 	strb.w	r6, [r0, #437]	; 0x1b5
    14d8:	f880 61bb 	strb.w	r6, [r0, #443]	; 0x1bb
    14dc:	f880 c1c2 	strb.w	ip, [r0, #450]	; 0x1c2
    14e0:	f880 a1a7 	strb.w	sl, [r0, #423]	; 0x1a7
    14e4:	f880 91a9 	strb.w	r9, [r0, #425]	; 0x1a9
    14e8:	f880 81aa 	strb.w	r8, [r0, #426]	; 0x1aa
    14ec:	260d      	movs	r6, #13
    14ee:	f04f 0b24 	mov.w	fp, #36	; 0x24
    14f2:	f04f 0c25 	mov.w	ip, #37	; 0x25
    14f6:	f04f 0a26 	mov.w	sl, #38	; 0x26
    14fa:	f04f 0827 	mov.w	r8, #39	; 0x27
    14fe:	f04f 0969 	mov.w	r9, #105	; 0x69
    1502:	f880 e1bd 	strb.w	lr, [r0, #445]	; 0x1bd
    1506:	f880 61ac 	strb.w	r6, [r0, #428]	; 0x1ac
    150a:	f880 b1ad 	strb.w	fp, [r0, #429]	; 0x1ad
    150e:	f880 c1ae 	strb.w	ip, [r0, #430]	; 0x1ae
    1512:	f880 a1af 	strb.w	sl, [r0, #431]	; 0x1af
    1516:	f880 81b1 	strb.w	r8, [r0, #433]	; 0x1b1
    151a:	f880 91b4 	strb.w	r9, [r0, #436]	; 0x1b4
    151e:	f04f 0e63 	mov.w	lr, #99	; 0x63
    1522:	f04f 0b1e 	mov.w	fp, #30
    1526:	f04f 0c1f 	mov.w	ip, #31
    152a:	2675      	movs	r6, #117	; 0x75
    152c:	f04f 0a23 	mov.w	sl, #35	; 0x23
    1530:	f04f 0870 	mov.w	r8, #112	; 0x70
    1534:	f04f 0972 	mov.w	r9, #114	; 0x72
    1538:	f880 e1b0 	strb.w	lr, [r0, #432]	; 0x1b0
    153c:	f880 b1b7 	strb.w	fp, [r0, #439]	; 0x1b7
    1540:	f880 c1b8 	strb.w	ip, [r0, #440]	; 0x1b8
    1544:	f880 61b9 	strb.w	r6, [r0, #441]	; 0x1b9
    1548:	f880 a1ba 	strb.w	sl, [r0, #442]	; 0x1ba
    154c:	f880 81bc 	strb.w	r8, [r0, #444]	; 0x1bc
    1550:	f880 91bf 	strb.w	r9, [r0, #447]	; 0x1bf
    1554:	f04f 0b74 	mov.w	fp, #116	; 0x74
    1558:	f04f 0e0c 	mov.w	lr, #12
    155c:	f04f 0c0a 	mov.w	ip, #10
    1560:	f04f 0a12 	mov.w	sl, #18
    1564:	f04f 0816 	mov.w	r8, #22
    1568:	f04f 090f 	mov.w	r9, #15
    156c:	260b      	movs	r6, #11
    156e:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    1572:	f880 41a8 	strb.w	r4, [r0, #424]	; 0x1a8
    1576:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    157a:	f880 41c4 	strb.w	r4, [r0, #452]	; 0x1c4
    157e:	f880 b1c0 	strb.w	fp, [r0, #448]	; 0x1c0
    1582:	f880 e1c1 	strb.w	lr, [r0, #449]	; 0x1c1
    1586:	f880 c1c3 	strb.w	ip, [r0, #451]	; 0x1c3
    158a:	f880 a1c5 	strb.w	sl, [r0, #453]	; 0x1c5
    158e:	f880 81c6 	strb.w	r8, [r0, #454]	; 0x1c6
    1592:	f880 91c7 	strb.w	r9, [r0, #455]	; 0x1c7
    1596:	f880 51c9 	strb.w	r5, [r0, #457]	; 0x1c9
    159a:	f880 71ca 	strb.w	r7, [r0, #458]	; 0x1ca
    159e:	f880 41cb 	strb.w	r4, [r0, #459]	; 0x1cb
  _i2c = &bus; // I2C bus
    15a2:	6041      	str	r1, [r0, #4]
  _address = address; // I2C address
    15a4:	7002      	strb	r2, [r0, #0]
  _useSPI = false; // set to use I2C
    15a6:	7544      	strb	r4, [r0, #21]

#include "Arduino.h"
#include "MPU9250.h"

/* MPU9250 object, input the I2C bus and address */
MPU9250::MPU9250(TwoWire &bus,uint8_t address){
    15a8:	f880 61c8 	strb.w	r6, [r0, #456]	; 0x1c8
  _i2c = &bus; // I2C bus
  _address = address; // I2C address
  _useSPI = false; // set to use I2C
}
    15ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15b0:	00e4e1c0 	.word	0x00e4e1c0
    15b4:	43a6ef5c 	.word	0x43a6ef5c
    15b8:	3c8efa35 	.word	0x3c8efa35
    15bc:	00061a80 	.word	0x00061a80
    15c0:	000f4240 	.word	0x000f4240
    15c4:	3e99999a 	.word	0x3e99999a
    15c8:	41a80000 	.word	0x41a80000
    15cc:	411ce979 	.word	0x411ce979

000015d0 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)>:
    return -1;
  }
}

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
int MPU9250::readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
    15d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if( _useSPI ){
    15d4:	f890 8015 	ldrb.w	r8, [r0, #21]
    return -1;
  }
}

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
int MPU9250::readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
    15d8:	4604      	mov	r4, r0
    15da:	4615      	mov	r5, r2
    15dc:	461e      	mov	r6, r3
  if( _useSPI ){
    15de:	f1b8 0f00 	cmp.w	r8, #0
    15e2:	f000 80e3 	beq.w	17ac <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1dc>
    // begin the transaction
    if(_useSPIHS){
    15e6:	7d83      	ldrb	r3, [r0, #22]
    15e8:	460f      	mov	r7, r1
    15ea:	2b00      	cmp	r3, #0
    15ec:	d078      	beq.n	16e0 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x110>
      _spi->beginTransaction(SPISettings(SPI_HS_CLOCK, MSBFIRST, SPI_MODE3));
    15ee:	6902      	ldr	r2, [r0, #16]
    15f0:	f8d0 801c 	ldr.w	r8, [r0, #28]
    15f4:	f8df e254 	ldr.w	lr, [pc, #596]	; 184c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x27c>
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    15f8:	f8df c254 	ldr.w	ip, [pc, #596]	; 1850 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x280>
    15fc:	2100      	movs	r1, #0
    15fe:	e002      	b.n	1606 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x36>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    1600:	2817      	cmp	r0, #23
    1602:	d008      	beq.n	1616 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x46>
    1604:	4601      	mov	r1, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    1606:	f83e 3f02 	ldrh.w	r3, [lr, #2]!
    160a:	fb9c f3f3 	sdiv	r3, ip, r3
    160e:	4598      	cmp	r8, r3
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    1610:	f101 0001 	add.w	r0, r1, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    1614:	d3f4      	bcc.n	1600 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x30>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    1616:	4b87      	ldr	r3, [pc, #540]	; (1834 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x264>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1618:	7ad0      	ldrb	r0, [r2, #11]
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    161a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    161e:	0919      	lsrs	r1, r3, #4
    1620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    1624:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
    1628:	f043 5378 	orr.w	r3, r3, #1040187392	; 0x3e000000
    162c:	430b      	orrs	r3, r1

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    162e:	b328      	cbz	r0, 167c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0xac>
			__disable_irq();
    1630:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1632:	7ad1      	ldrb	r1, [r2, #11]
    1634:	07c8      	lsls	r0, r1, #31
    1636:	d509      	bpl.n	164c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x7c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1638:	f8df e218 	ldr.w	lr, [pc, #536]	; 1854 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x284>
    163c:	68d0      	ldr	r0, [r2, #12]
    163e:	f8de 1000 	ldr.w	r1, [lr]
    1642:	4001      	ands	r1, r0
    1644:	6191      	str	r1, [r2, #24]
				NVIC_ICER0 = interruptSave[0];
    1646:	f8ce 1000 	str.w	r1, [lr]
    164a:	7ad1      	ldrb	r1, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    164c:	0788      	lsls	r0, r1, #30
    164e:	d509      	bpl.n	1664 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x94>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1650:	f8df e204 	ldr.w	lr, [pc, #516]	; 1858 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x288>
    1654:	6910      	ldr	r0, [r2, #16]
    1656:	f8de 1000 	ldr.w	r1, [lr]
    165a:	4001      	ands	r1, r0
    165c:	61d1      	str	r1, [r2, #28]
				NVIC_ICER1 = interruptSave[1];
    165e:	f8ce 1000 	str.w	r1, [lr]
    1662:	7ad1      	ldrb	r1, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1664:	0749      	lsls	r1, r1, #29
    1666:	d508      	bpl.n	167a <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0xaa>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1668:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 185c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x28c>
    166c:	6950      	ldr	r0, [r2, #20]
    166e:	f8de 1000 	ldr.w	r1, [lr]
    1672:	4001      	ands	r1, r0
    1674:	6211      	str	r1, [r2, #32]
				NVIC_ICER2 = interruptSave[2];
    1676:	f8ce 1000 	str.w	r1, [lr]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    167a:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    167c:	6812      	ldr	r2, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    167e:	68d1      	ldr	r1, [r2, #12]
    1680:	4299      	cmp	r1, r3
    1682:	d007      	beq.n	1694 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0xc4>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    1684:	486c      	ldr	r0, [pc, #432]	; (1838 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x268>)
    1686:	6010      	str	r0, [r2, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1688:	496c      	ldr	r1, [pc, #432]	; (183c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x26c>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    168a:	60d3      	str	r3, [r2, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    168c:	f043 4080 	orr.w	r0, r3, #1073741824	; 0x40000000
    1690:	6110      	str	r0, [r2, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1692:	6011      	str	r1, [r2, #0]
    }
    else{
      _spi->beginTransaction(SPISettings(SPI_LS_CLOCK, MSBFIRST, SPI_MODE3));
    }
    digitalWrite(_csPin,LOW); // select the MPU9250 chip
    1694:	2100      	movs	r1, #0
    1696:	7d20      	ldrb	r0, [r4, #20]
    1698:	f001 fb4e 	bl	2d38 <digitalWrite>
    169c:	6922      	ldr	r2, [r4, #16]
    _spi->transfer(subAddress | SPI_READ); // specify the starting register address
    169e:	7de3      	ldrb	r3, [r4, #23]
    16a0:	6812      	ldr	r2, [r2, #0]
    16a2:	433b      	orrs	r3, r7
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    16a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    16a8:	62d1      	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    16aa:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    16ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    16ae:	2b00      	cmp	r3, #0
    16b0:	dafc      	bge.n	16ac <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0xdc>
		return port().POPR;
    16b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    for(uint8_t i = 0; i < count; i++){
    16b4:	2d00      	cmp	r5, #0
    16b6:	d05e      	beq.n	1776 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1a6>
    16b8:	1e68      	subs	r0, r5, #1
    16ba:	fa56 f080 	uxtab	r0, r6, r0
    16be:	1e71      	subs	r1, r6, #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
    16c0:	2500      	movs	r5, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    16c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    16c6:	62d6      	str	r6, [r2, #44]	; 0x2c
		port().PUSHR = data;
    16c8:	6355      	str	r5, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    16ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    16cc:	2b00      	cmp	r3, #0
    16ce:	dafc      	bge.n	16ca <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0xfa>
		return port().POPR;
    16d0:	6b93      	ldr	r3, [r2, #56]	; 0x38
      dest[i] = _spi->transfer(0x00); // read the data
    16d2:	f801 3f01 	strb.w	r3, [r1, #1]!
    else{
      _spi->beginTransaction(SPISettings(SPI_LS_CLOCK, MSBFIRST, SPI_MODE3));
    }
    digitalWrite(_csPin,LOW); // select the MPU9250 chip
    _spi->transfer(subAddress | SPI_READ); // specify the starting register address
    for(uint8_t i = 0; i < count; i++){
    16d6:	4288      	cmp	r0, r1
    16d8:	d04d      	beq.n	1776 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1a6>
    16da:	6923      	ldr	r3, [r4, #16]
    16dc:	681a      	ldr	r2, [r3, #0]
    16de:	e7f2      	b.n	16c6 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0xf6>
    // begin the transaction
    if(_useSPIHS){
      _spi->beginTransaction(SPISettings(SPI_HS_CLOCK, MSBFIRST, SPI_MODE3));
    }
    else{
      _spi->beginTransaction(SPISettings(SPI_LS_CLOCK, MSBFIRST, SPI_MODE3));
    16e0:	6901      	ldr	r1, [r0, #16]
    16e2:	f8d0 8018 	ldr.w	r8, [r0, #24]
    16e6:	f8df e164 	ldr.w	lr, [pc, #356]	; 184c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x27c>
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    16ea:	f8df c164 	ldr.w	ip, [pc, #356]	; 1850 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x280>
    16ee:	e002      	b.n	16f6 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x126>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    16f0:	2817      	cmp	r0, #23
    16f2:	d008      	beq.n	1706 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x136>
    16f4:	4603      	mov	r3, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    16f6:	f83e 2f02 	ldrh.w	r2, [lr, #2]!
    16fa:	fb9c f2f2 	sdiv	r2, ip, r2
    16fe:	4590      	cmp	r8, r2
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    1700:	f103 0001 	add.w	r0, r3, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    1704:	d3f4      	bcc.n	16f0 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x120>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    1706:	4a4b      	ldr	r2, [pc, #300]	; (1834 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x264>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1708:	7ac8      	ldrb	r0, [r1, #11]
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    170e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
    1712:	091b      	lsrs	r3, r3, #4
    1714:	f042 5278 	orr.w	r2, r2, #1040187392	; 0x3e000000
    1718:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    171c:	4313      	orrs	r3, r2

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    171e:	b328      	cbz	r0, 176c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x19c>
			__disable_irq();
    1720:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1722:	7aca      	ldrb	r2, [r1, #11]
    1724:	07d0      	lsls	r0, r2, #31
    1726:	d509      	bpl.n	173c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x16c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1728:	f8df e128 	ldr.w	lr, [pc, #296]	; 1854 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x284>
    172c:	68c8      	ldr	r0, [r1, #12]
    172e:	f8de 2000 	ldr.w	r2, [lr]
    1732:	4002      	ands	r2, r0
    1734:	618a      	str	r2, [r1, #24]
				NVIC_ICER0 = interruptSave[0];
    1736:	f8ce 2000 	str.w	r2, [lr]
    173a:	7aca      	ldrb	r2, [r1, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    173c:	0790      	lsls	r0, r2, #30
    173e:	d509      	bpl.n	1754 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x184>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1740:	f8df e114 	ldr.w	lr, [pc, #276]	; 1858 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x288>
    1744:	6908      	ldr	r0, [r1, #16]
    1746:	f8de 2000 	ldr.w	r2, [lr]
    174a:	4002      	ands	r2, r0
    174c:	61ca      	str	r2, [r1, #28]
				NVIC_ICER1 = interruptSave[1];
    174e:	f8ce 2000 	str.w	r2, [lr]
    1752:	7aca      	ldrb	r2, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1754:	0752      	lsls	r2, r2, #29
    1756:	d508      	bpl.n	176a <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x19a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1758:	f8df e100 	ldr.w	lr, [pc, #256]	; 185c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x28c>
    175c:	6948      	ldr	r0, [r1, #20]
    175e:	f8de 2000 	ldr.w	r2, [lr]
    1762:	4002      	ands	r2, r0
    1764:	620a      	str	r2, [r1, #32]
				NVIC_ICER2 = interruptSave[2];
    1766:	f8ce 2000 	str.w	r2, [lr]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    176a:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    176c:	680a      	ldr	r2, [r1, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    176e:	68d1      	ldr	r1, [r2, #12]
    1770:	4299      	cmp	r1, r3
    1772:	d187      	bne.n	1684 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0xb4>
    1774:	e78e      	b.n	1694 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0xc4>
    digitalWrite(_csPin,LOW); // select the MPU9250 chip
    _spi->transfer(subAddress | SPI_READ); // specify the starting register address
    for(uint8_t i = 0; i < count; i++){
      dest[i] = _spi->transfer(0x00); // read the data
    }
    digitalWrite(_csPin,HIGH); // deselect the MPU9250 chip
    1776:	2101      	movs	r1, #1
    1778:	7d20      	ldrb	r0, [r4, #20]
    177a:	f001 fadd 	bl	2d38 <digitalWrite>
    _spi->endTransaction(); // end the transaction
    177e:	6922      	ldr	r2, [r4, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1780:	7ad3      	ldrb	r3, [r2, #11]
    1782:	b183      	cbz	r3, 17a6 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1d6>
			if (interruptMasksUsed & 0x01) {
    1784:	07d8      	lsls	r0, r3, #31
    1786:	d503      	bpl.n	1790 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1c0>
				NVIC_ISER0 = interruptSave[0];
    1788:	4b2d      	ldr	r3, [pc, #180]	; (1840 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x270>)
    178a:	6991      	ldr	r1, [r2, #24]
    178c:	6019      	str	r1, [r3, #0]
    178e:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    1790:	0799      	lsls	r1, r3, #30
    1792:	d503      	bpl.n	179c <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1cc>
				NVIC_ISER1 = interruptSave[1];
    1794:	4b2b      	ldr	r3, [pc, #172]	; (1844 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x274>)
    1796:	69d1      	ldr	r1, [r2, #28]
    1798:	6019      	str	r1, [r3, #0]
    179a:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    179c:	075b      	lsls	r3, r3, #29
    179e:	d502      	bpl.n	17a6 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1d6>
				NVIC_ISER2 = interruptSave[2];
    17a0:	4b29      	ldr	r3, [pc, #164]	; (1848 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x278>)
    17a2:	6a12      	ldr	r2, [r2, #32]
    17a4:	601a      	str	r2, [r3, #0]
    return 1;
    17a6:	2001      	movs	r0, #1
    17a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    17ac:	7802      	ldrb	r2, [r0, #0]
  }
  else{
    _i2c->beginTransmission(_address); // open the device
    17ae:	6843      	ldr	r3, [r0, #4]
    17b0:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    17b2:	2701      	movs	r7, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    17b4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		transmitting = 1;
    17b8:	f883 705e 	strb.w	r7, [r3, #94]	; 0x5e
		txBufferLength = 1;
    17bc:	f883 705d 	strb.w	r7, [r3, #93]	; 0x5d
    _i2c->write(subAddress); // specify the starting register address
    17c0:	6840      	ldr	r0, [r0, #4]
    17c2:	6803      	ldr	r3, [r0, #0]
    17c4:	681b      	ldr	r3, [r3, #0]
    17c6:	4798      	blx	r3
    _i2c->endTransmission(false);
    17c8:	4641      	mov	r1, r8
    17ca:	6860      	ldr	r0, [r4, #4]
    17cc:	f7ff f9b0 	bl	b30 <TwoWire::endTransmission(unsigned char)>
	uint8_t endTransmission(void) {
		return endTransmission(1);
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    17d0:	463b      	mov	r3, r7
    17d2:	462a      	mov	r2, r5
    17d4:	7821      	ldrb	r1, [r4, #0]
    17d6:	6860      	ldr	r0, [r4, #4]
    17d8:	f7ff fa34 	bl	c44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
    _numBytes = _i2c->requestFrom(_address, count); // specify the number of bytes to receive
    if (_numBytes == count) {
    17dc:	42a8      	cmp	r0, r5
  }
  else{
    _i2c->beginTransmission(_address); // open the device
    _i2c->write(subAddress); // specify the starting register address
    _i2c->endTransmission(false);
    _numBytes = _i2c->requestFrom(_address, count); // specify the number of bytes to receive
    17de:	60e0      	str	r0, [r4, #12]
    if (_numBytes == count) {
    17e0:	d123      	bne.n	182a <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x25a>
      for(uint8_t i = 0; i < count; i++){ 
    17e2:	2800      	cmp	r0, #0
    17e4:	d0df      	beq.n	17a6 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1d6>
    17e6:	3801      	subs	r0, #1
    17e8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1860 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x290>
    17ec:	fa56 f780 	uxtab	r7, r6, r0
    17f0:	1e75      	subs	r5, r6, #1
    17f2:	e010      	b.n	1816 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x246>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    17f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    17f8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    17fc:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    17fe:	f103 0601 	add.w	r6, r3, #1
    1802:	eb00 0103 	add.w	r1, r0, r3
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1806:	d90e      	bls.n	1826 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x256>
		return rxBuffer[rxBufferIndex++];
    1808:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
    180c:	7e08      	ldrb	r0, [r1, #24]
        dest[i] = _i2c->read();
    180e:	f805 0f01 	strb.w	r0, [r5, #1]!
    _i2c->beginTransmission(_address); // open the device
    _i2c->write(subAddress); // specify the starting register address
    _i2c->endTransmission(false);
    _numBytes = _i2c->requestFrom(_address, count); // specify the number of bytes to receive
    if (_numBytes == count) {
      for(uint8_t i = 0; i < count; i++){ 
    1812:	42af      	cmp	r7, r5
    1814:	d0c7      	beq.n	17a6 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x1d6>
        dest[i] = _i2c->read();
    1816:	6860      	ldr	r0, [r4, #4]
    1818:	6803      	ldr	r3, [r0, #0]
    181a:	695b      	ldr	r3, [r3, #20]
    181c:	4543      	cmp	r3, r8
    181e:	d0e9      	beq.n	17f4 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x224>
    1820:	4798      	blx	r3
    1822:	b2c0      	uxtb	r0, r0
    1824:	e7f3      	b.n	180e <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x23e>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1826:	20ff      	movs	r0, #255	; 0xff
    1828:	e7f1      	b.n	180e <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)+0x23e>
      }
      return 1;
    } else {
      return -1;
    182a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }
}
    182e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1832:	bf00      	nop
    1834:	00006370 	.word	0x00006370
    1838:	003f4001 	.word	0x003f4001
    183c:	803f0000 	.word	0x803f0000
    1840:	e000e100 	.word	0xe000e100
    1844:	e000e104 	.word	0xe000e104
    1848:	e000e108 	.word	0xe000e108
    184c:	0000633e 	.word	0x0000633e
    1850:	02dc6c00 	.word	0x02dc6c00
    1854:	e000e180 	.word	0xe000e180
    1858:	e000e184 	.word	0xe000e184
    185c:	e000e188 	.word	0xe000e188
    1860:	00000739 	.word	0x00000739

00001864 <MPU9250::readSensor()>:
  _fifoFrameSize = accel*6 + gyro*6 + mag*7 + temp*2;
  return 1;
}

/* reads the most current data from MPU9250 and stores in buffer */
int MPU9250::readSensor() {
    1864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _useSPIHS = true; // use the high speed SPI for data readout
    1868:	f04f 0301 	mov.w	r3, #1
    186c:	7583      	strb	r3, [r0, #22]
  _fifoFrameSize = accel*6 + gyro*6 + mag*7 + temp*2;
  return 1;
}

/* reads the most current data from MPU9250 and stores in buffer */
int MPU9250::readSensor() {
    186e:	b08d      	sub	sp, #52	; 0x34
  _useSPIHS = true; // use the high speed SPI for data readout
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    1870:	f100 0324 	add.w	r3, r0, #36	; 0x24
    1874:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    1878:	2215      	movs	r2, #21
  _fifoFrameSize = accel*6 + gyro*6 + mag*7 + temp*2;
  return 1;
}

/* reads the most current data from MPU9250 and stores in buffer */
int MPU9250::readSensor() {
    187a:	4604      	mov	r4, r0
  _useSPIHS = true; // use the high speed SPI for data readout
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    187c:	f7ff fea8 	bl	15d0 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)>
    1880:	2800      	cmp	r0, #0
    1882:	f2c0 8159 	blt.w	1b38 <MPU9250::readSensor()+0x2d4>
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
    1886:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    188a:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
    188e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    1892:	9601      	str	r6, [sp, #4]
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
    1894:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    1898:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
    189c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    18a0:	9500      	str	r5, [sp, #0]
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
    18a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    18a6:	9801      	ldr	r0, [sp, #4]
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
    18a8:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    18ac:	f894 c033 	ldrb.w	ip, [r4, #51]	; 0x33
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
    18b0:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    18b4:	9502      	str	r5, [sp, #8]
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    18b6:	f8cd c014 	str.w	ip, [sp, #20]
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    18ba:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    18be:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
    18c2:	9604      	str	r6, [sp, #16]
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
    18c4:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    18c8:	4680      	mov	r8, r0
    18ca:	9800      	ldr	r0, [sp, #0]
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    18cc:	f8cd c018 	str.w	ip, [sp, #24]
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    18d0:	9508      	str	r5, [sp, #32]
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
    18d2:	f894 c035 	ldrb.w	ip, [r4, #53]	; 0x35
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    18d6:	f9b4 5166 	ldrsh.w	r5, [r4, #358]	; 0x166
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
    18da:	f894 b026 	ldrb.w	fp, [r4, #38]	; 0x26
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
    18de:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
    18e2:	f894 902a 	ldrb.w	r9, [r4, #42]	; 0x2a
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
    18e6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
    18ea:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
    18ee:	f894 e02b 	ldrb.w	lr, [r4, #43]	; 0x2b
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
    18f2:	f8cd c01c 	str.w	ip, [sp, #28]
    18f6:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    18fa:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    18fe:	9503      	str	r5, [sp, #12]
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    1900:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
    1904:	9804      	ldr	r0, [sp, #16]
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
    1906:	9d07      	ldr	r5, [sp, #28]
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
    1908:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
    190c:	4681      	mov	r9, r0
    190e:	9802      	ldr	r0, [sp, #8]
    1910:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    1914:	9806      	ldr	r0, [sp, #24]
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
    1916:	ea41 210a 	orr.w	r1, r1, sl, lsl #8
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    191a:	4682      	mov	sl, r0
    191c:	9805      	ldr	r0, [sp, #20]
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
    191e:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    1922:	9d08      	ldr	r5, [sp, #32]
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    1924:	ea4a 2000 	orr.w	r0, sl, r0, lsl #8
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    1928:	ea45 2c0c 	orr.w	ip, r5, ip, lsl #8
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
    192c:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    1930:	b200      	sxth	r0, r0
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
    1932:	fa0f fb82 	sxth.w	fp, r2
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    1936:	9001      	str	r0, [sp, #4]
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    1938:	fa0f f28c 	sxth.w	r2, ip
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
    193c:	fa0f fa81 	sxth.w	sl, r1
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    1940:	9202      	str	r2, [sp, #8]
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
    1942:	fa0f f18e 	sxth.w	r1, lr
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    1946:	9a03      	ldr	r2, [sp, #12]
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
    1948:	f8bd e004 	ldrh.w	lr, [sp, #4]
    194c:	f8a4 e046 	strh.w	lr, [r4, #70]	; 0x46
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
    1950:	b21d      	sxth	r5, r3
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    1952:	f8bd e008 	ldrh.w	lr, [sp, #8]
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    1956:	f9b4 3164 	ldrsh.w	r3, [r4, #356]	; 0x164
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
    195a:	f8a4 e04a 	strh.w	lr, [r4, #74]	; 0x4a
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    195e:	fb02 f00b 	mul.w	r0, r2, fp
    1962:	f9b4 e168 	ldrsh.w	lr, [r4, #360]	; 0x168
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
    1966:	8765      	strh	r5, [r4, #58]	; 0x3a
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
    1968:	b236      	sxth	r6, r6
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    196a:	fb03 0005 	mla	r0, r3, r5, r0
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    196e:	fa0f f888 	sxth.w	r8, r8
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
    1972:	fa0f f989 	sxth.w	r9, r9
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
    1976:	b23f      	sxth	r7, r7
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
    1978:	9605      	str	r6, [sp, #20]
    197a:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    197e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
    1980:	f8a4 b03c 	strh.w	fp, [r4, #60]	; 0x3c
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    1984:	fb0e 000a 	mla	r0, lr, sl, r0
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
    1988:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
    198c:	f8a4 7040 	strh.w	r7, [r4, #64]	; 0x40
    return -1;
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
    1990:	f8a4 a03e 	strh.w	sl, [r4, #62]	; 0x3e
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
    1994:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
    1998:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    199c:	9306      	str	r3, [sp, #24]
    199e:	f8cd e01c 	str.w	lr, [sp, #28]
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];  
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
    19a2:	9104      	str	r1, [sp, #16]
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
    19a4:	9700      	str	r7, [sp, #0]
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    19a6:	f003 fdd7 	bl	5558 <__aeabi_i2f>
    19aa:	4631      	mov	r1, r6
    19ac:	f003 fe28 	bl	5600 <__aeabi_fmul>
    19b0:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
    19b4:	f003 fd1a 	bl	53ec <__aeabi_fsub>
    19b8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
    19bc:	f003 fe20 	bl	5600 <__aeabi_fmul>
  _ay = (((float)(tY[0]*_axcounts + tY[1]*_aycounts + tY[2]*_azcounts) * _accelScale) - _ayb)*_ays;
    19c0:	f9b4 316c 	ldrsh.w	r3, [r4, #364]	; 0x16c
    19c4:	f9b4 716a 	ldrsh.w	r7, [r4, #362]	; 0x16a
    19c8:	f9b4 e16e 	ldrsh.w	lr, [r4, #366]	; 0x16e
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
    19cc:	6520      	str	r0, [r4, #80]	; 0x50
  _ay = (((float)(tY[0]*_axcounts + tY[1]*_aycounts + tY[2]*_azcounts) * _accelScale) - _ayb)*_ays;
    19ce:	fb0b f003 	mul.w	r0, fp, r3
    19d2:	fb05 0007 	mla	r0, r5, r7, r0
    19d6:	fb0a 000e 	mla	r0, sl, lr, r0
    19da:	f8cd e020 	str.w	lr, [sp, #32]
    19de:	930b      	str	r3, [sp, #44]	; 0x2c
    19e0:	f003 fdba 	bl	5558 <__aeabi_i2f>
    19e4:	4631      	mov	r1, r6
    19e6:	f003 fe0b 	bl	5600 <__aeabi_fmul>
    19ea:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    19ee:	f003 fcfd 	bl	53ec <__aeabi_fsub>
    19f2:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    19f6:	f003 fe03 	bl	5600 <__aeabi_fmul>
  _az = (((float)(tZ[0]*_axcounts + tZ[1]*_aycounts + tZ[2]*_azcounts) * _accelScale) - _azb)*_azs;
    19fa:	f9b4 3172 	ldrsh.w	r3, [r4, #370]	; 0x172
    19fe:	f9b4 2170 	ldrsh.w	r2, [r4, #368]	; 0x170
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
  _ay = (((float)(tY[0]*_axcounts + tY[1]*_aycounts + tY[2]*_azcounts) * _accelScale) - _ayb)*_ays;
    1a02:	6560      	str	r0, [r4, #84]	; 0x54
  _az = (((float)(tZ[0]*_axcounts + tZ[1]*_aycounts + tZ[2]*_azcounts) * _accelScale) - _azb)*_azs;
    1a04:	fb0b f003 	mul.w	r0, fp, r3
    1a08:	f9b4 b174 	ldrsh.w	fp, [r4, #372]	; 0x174
    1a0c:	9309      	str	r3, [sp, #36]	; 0x24
    1a0e:	fb05 0002 	mla	r0, r5, r2, r0
    1a12:	fb0a 000b 	mla	r0, sl, fp, r0
    1a16:	920a      	str	r2, [sp, #40]	; 0x28
    1a18:	f003 fd9e 	bl	5558 <__aeabi_i2f>
    1a1c:	4631      	mov	r1, r6
    1a1e:	f003 fdef 	bl	5600 <__aeabi_fmul>
    1a22:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    1a26:	f003 fce1 	bl	53ec <__aeabi_fsub>
    1a2a:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    1a2e:	f003 fde7 	bl	5600 <__aeabi_fmul>
  _gx = ((float)(tX[0]*_gxcounts + tX[1]*_gycounts + tX[2]*_gzcounts) * _gyroScale) - _gxb;
    1a32:	9a03      	ldr	r2, [sp, #12]
    1a34:	9e00      	ldr	r6, [sp, #0]
    1a36:	9b07      	ldr	r3, [sp, #28]
    1a38:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
  _ay = (((float)(tY[0]*_axcounts + tY[1]*_aycounts + tY[2]*_azcounts) * _accelScale) - _ayb)*_ays;
  _az = (((float)(tZ[0]*_axcounts + tZ[1]*_aycounts + tZ[2]*_azcounts) * _accelScale) - _azb)*_azs;
    1a3c:	65a0      	str	r0, [r4, #88]	; 0x58
  _gx = ((float)(tX[0]*_gxcounts + tX[1]*_gycounts + tX[2]*_gzcounts) * _gyroScale) - _gxb;
    1a3e:	fb02 f108 	mul.w	r1, r2, r8
    1a42:	9a06      	ldr	r2, [sp, #24]
    1a44:	fb02 1106 	mla	r1, r2, r6, r1
    1a48:	fb03 1009 	mla	r0, r3, r9, r1
    1a4c:	f003 fd84 	bl	5558 <__aeabi_i2f>
    1a50:	4629      	mov	r1, r5
    1a52:	f003 fdd5 	bl	5600 <__aeabi_fmul>
    1a56:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
    1a5a:	f003 fcc7 	bl	53ec <__aeabi_fsub>
  _gy = ((float)(tY[0]*_gxcounts + tY[1]*_gycounts + tY[2]*_gzcounts) * _gyroScale) - _gyb;
    1a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a60:	9908      	ldr	r1, [sp, #32]
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
  _ay = (((float)(tY[0]*_axcounts + tY[1]*_aycounts + tY[2]*_azcounts) * _accelScale) - _ayb)*_ays;
  _az = (((float)(tZ[0]*_axcounts + tZ[1]*_aycounts + tZ[2]*_azcounts) * _accelScale) - _azb)*_azs;
  _gx = ((float)(tX[0]*_gxcounts + tX[1]*_gycounts + tX[2]*_gzcounts) * _gyroScale) - _gxb;
    1a62:	65e0      	str	r0, [r4, #92]	; 0x5c
  _gy = ((float)(tY[0]*_gxcounts + tY[1]*_gycounts + tY[2]*_gzcounts) * _gyroScale) - _gyb;
    1a64:	fb03 f308 	mul.w	r3, r3, r8
    1a68:	fb07 3706 	mla	r7, r7, r6, r3
    1a6c:	fb01 7009 	mla	r0, r1, r9, r7
    1a70:	9600      	str	r6, [sp, #0]
    1a72:	f003 fd71 	bl	5558 <__aeabi_i2f>
    1a76:	4629      	mov	r1, r5
    1a78:	f003 fdc2 	bl	5600 <__aeabi_fmul>
    1a7c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
    1a80:	f003 fcb4 	bl	53ec <__aeabi_fsub>
  _gz = ((float)(tZ[0]*_gxcounts + tZ[1]*_gycounts + tZ[2]*_gzcounts) * _gyroScale) - _gzb;
    1a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a86:	9a00      	ldr	r2, [sp, #0]
  // transform and convert to float values
  _ax = (((float)(tX[0]*_axcounts + tX[1]*_aycounts + tX[2]*_azcounts) * _accelScale) - _axb)*_axs;
  _ay = (((float)(tY[0]*_axcounts + tY[1]*_aycounts + tY[2]*_azcounts) * _accelScale) - _ayb)*_ays;
  _az = (((float)(tZ[0]*_axcounts + tZ[1]*_aycounts + tZ[2]*_azcounts) * _accelScale) - _azb)*_azs;
  _gx = ((float)(tX[0]*_gxcounts + tX[1]*_gycounts + tX[2]*_gzcounts) * _gyroScale) - _gxb;
  _gy = ((float)(tY[0]*_gxcounts + tY[1]*_gycounts + tY[2]*_gzcounts) * _gyroScale) - _gyb;
    1a88:	6620      	str	r0, [r4, #96]	; 0x60
  _gz = ((float)(tZ[0]*_gxcounts + tZ[1]*_gycounts + tZ[2]*_gzcounts) * _gyroScale) - _gzb;
    1a8a:	fb03 f608 	mul.w	r6, r3, r8
    1a8e:	4613      	mov	r3, r2
    1a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a92:	fb02 6703 	mla	r7, r2, r3, r6
    1a96:	fb0b 7009 	mla	r0, fp, r9, r7
    1a9a:	f003 fd5d 	bl	5558 <__aeabi_i2f>
    1a9e:	4629      	mov	r1, r5
    1aa0:	f003 fdae 	bl	5600 <__aeabi_fmul>
    1aa4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
    1aa8:	f003 fca0 	bl	53ec <__aeabi_fsub>
    1aac:	6660      	str	r0, [r4, #100]	; 0x64
  _hx = (((float)(_hxcounts) * _magScaleX) - _hxb)*_hxs;
    1aae:	9801      	ldr	r0, [sp, #4]
    1ab0:	f003 fd52 	bl	5558 <__aeabi_i2f>
    1ab4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    1ab8:	f003 fda2 	bl	5600 <__aeabi_fmul>
    1abc:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    1ac0:	f003 fc94 	bl	53ec <__aeabi_fsub>
    1ac4:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
    1ac8:	f003 fd9a 	bl	5600 <__aeabi_fmul>
    1acc:	66a0      	str	r0, [r4, #104]	; 0x68
  _hy = (((float)(_hycounts) * _magScaleY) - _hyb)*_hys;
    1ace:	9805      	ldr	r0, [sp, #20]
    1ad0:	f003 fd42 	bl	5558 <__aeabi_i2f>
    1ad4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    1ad8:	f003 fd92 	bl	5600 <__aeabi_fmul>
    1adc:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    1ae0:	f003 fc84 	bl	53ec <__aeabi_fsub>
    1ae4:	f8d4 1158 	ldr.w	r1, [r4, #344]	; 0x158
    1ae8:	f003 fd8a 	bl	5600 <__aeabi_fmul>
    1aec:	66e0      	str	r0, [r4, #108]	; 0x6c
  _hz = (((float)(_hzcounts) * _magScaleZ) - _hzb)*_hzs;
    1aee:	9802      	ldr	r0, [sp, #8]
    1af0:	f003 fd32 	bl	5558 <__aeabi_i2f>
    1af4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    1af8:	f003 fd82 	bl	5600 <__aeabi_fmul>
    1afc:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    1b00:	f003 fc74 	bl	53ec <__aeabi_fsub>
    1b04:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
    1b08:	f003 fd7a 	bl	5600 <__aeabi_fmul>
  _t = ((((float) _tcounts) - _tempOffset)/_tempScale) + _tempOffset;
    1b0c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  _gx = ((float)(tX[0]*_gxcounts + tX[1]*_gycounts + tX[2]*_gzcounts) * _gyroScale) - _gxb;
  _gy = ((float)(tY[0]*_gxcounts + tY[1]*_gycounts + tY[2]*_gzcounts) * _gyroScale) - _gyb;
  _gz = ((float)(tZ[0]*_gxcounts + tZ[1]*_gycounts + tZ[2]*_gzcounts) * _gyroScale) - _gzb;
  _hx = (((float)(_hxcounts) * _magScaleX) - _hxb)*_hxs;
  _hy = (((float)(_hycounts) * _magScaleY) - _hyb)*_hys;
  _hz = (((float)(_hzcounts) * _magScaleZ) - _hzb)*_hzs;
    1b10:	6720      	str	r0, [r4, #112]	; 0x70
  _t = ((((float) _tcounts) - _tempOffset)/_tempScale) + _tempOffset;
    1b12:	9804      	ldr	r0, [sp, #16]
    1b14:	f003 fd20 	bl	5558 <__aeabi_i2f>
    1b18:	4629      	mov	r1, r5
    1b1a:	f003 fc67 	bl	53ec <__aeabi_fsub>
    1b1e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    1b22:	f003 fe21 	bl	5768 <__aeabi_fdiv>
    1b26:	4629      	mov	r1, r5
    1b28:	f003 fc62 	bl	53f0 <__addsf3>
  return 1;
    1b2c:	2301      	movs	r3, #1
  _gy = ((float)(tY[0]*_gxcounts + tY[1]*_gycounts + tY[2]*_gzcounts) * _gyroScale) - _gyb;
  _gz = ((float)(tZ[0]*_gxcounts + tZ[1]*_gycounts + tZ[2]*_gzcounts) * _gyroScale) - _gzb;
  _hx = (((float)(_hxcounts) * _magScaleX) - _hxb)*_hxs;
  _hy = (((float)(_hycounts) * _magScaleY) - _hyb)*_hys;
  _hz = (((float)(_hzcounts) * _magScaleZ) - _hzb)*_hzs;
  _t = ((((float) _tcounts) - _tempOffset)/_tempScale) + _tempOffset;
    1b2e:	6760      	str	r0, [r4, #116]	; 0x74
  return 1;
}
    1b30:	4618      	mov	r0, r3
    1b32:	b00d      	add	sp, #52	; 0x34
    1b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/* reads the most current data from MPU9250 and stores in buffer */
int MPU9250::readSensor() {
  _useSPIHS = true; // use the high speed SPI for data readout
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
    return -1;
    1b38:	f04f 33ff 	mov.w	r3, #4294967295
    1b3c:	e7f8      	b.n	1b30 <MPU9250::readSensor()+0x2cc>
    1b3e:	bf00      	nop

00001b40 <MPU9250::writeRegister(unsigned char, unsigned char)>:
  _hzb = bias;
  _hzs = scaleFactor;
}

/* writes a byte to MPU9250 register given a register address and data */
int MPU9250::writeRegister(uint8_t subAddress, uint8_t data){
    1b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* write data to device */
  if( _useSPI ){
    1b42:	7d43      	ldrb	r3, [r0, #21]
  _hzb = bias;
  _hzs = scaleFactor;
}

/* writes a byte to MPU9250 register given a register address and data */
int MPU9250::writeRegister(uint8_t subAddress, uint8_t data){
    1b44:	4604      	mov	r4, r0
    1b46:	4615      	mov	r5, r2
    1b48:	460e      	mov	r6, r1
  /* write data to device */
  if( _useSPI ){
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	f000 8089 	beq.w	1c62 <MPU9250::writeRegister(unsigned char, unsigned char)+0x122>
    _spi->beginTransaction(SPISettings(SPI_LS_CLOCK, MSBFIRST, SPI_MODE3)); // begin the transaction
    1b50:	6901      	ldr	r1, [r0, #16]
    1b52:	f8d0 c018 	ldr.w	ip, [r0, #24]
    1b56:	4f4f      	ldr	r7, [pc, #316]	; (1c94 <MPU9250::writeRegister(unsigned char, unsigned char)+0x154>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    1b58:	f8df e160 	ldr.w	lr, [pc, #352]	; 1cbc <MPU9250::writeRegister(unsigned char, unsigned char)+0x17c>
    1b5c:	2200      	movs	r2, #0
    1b5e:	e002      	b.n	1b66 <MPU9250::writeRegister(unsigned char, unsigned char)+0x26>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    1b60:	2817      	cmp	r0, #23
    1b62:	d008      	beq.n	1b76 <MPU9250::writeRegister(unsigned char, unsigned char)+0x36>
    1b64:	4602      	mov	r2, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    1b66:	f837 3f02 	ldrh.w	r3, [r7, #2]!
    1b6a:	fb9e f3f3 	sdiv	r3, lr, r3
    1b6e:	459c      	cmp	ip, r3
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    1b70:	f102 0001 	add.w	r0, r2, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    1b74:	d3f4      	bcc.n	1b60 <MPU9250::writeRegister(unsigned char, unsigned char)+0x20>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    1b76:	4b48      	ldr	r3, [pc, #288]	; (1c98 <MPU9250::writeRegister(unsigned char, unsigned char)+0x158>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1b78:	7ac8      	ldrb	r0, [r1, #11]
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    1b7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    1b7e:	f422 4370 	bic.w	r3, r2, #61440	; 0xf000
    1b82:	0912      	lsrs	r2, r2, #4
    1b84:	f043 5378 	orr.w	r3, r3, #1040187392	; 0x3e000000
    1b88:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    1b8c:	4313      	orrs	r3, r2

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1b8e:	b1e0      	cbz	r0, 1bca <MPU9250::writeRegister(unsigned char, unsigned char)+0x8a>
			__disable_irq();
    1b90:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1b92:	7aca      	ldrb	r2, [r1, #11]
    1b94:	07d7      	lsls	r7, r2, #31
    1b96:	d506      	bpl.n	1ba6 <MPU9250::writeRegister(unsigned char, unsigned char)+0x66>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1b98:	4840      	ldr	r0, [pc, #256]	; (1c9c <MPU9250::writeRegister(unsigned char, unsigned char)+0x15c>)
    1b9a:	68ca      	ldr	r2, [r1, #12]
    1b9c:	6807      	ldr	r7, [r0, #0]
    1b9e:	403a      	ands	r2, r7
    1ba0:	618a      	str	r2, [r1, #24]
				NVIC_ICER0 = interruptSave[0];
    1ba2:	6002      	str	r2, [r0, #0]
    1ba4:	7aca      	ldrb	r2, [r1, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    1ba6:	0790      	lsls	r0, r2, #30
    1ba8:	d506      	bpl.n	1bb8 <MPU9250::writeRegister(unsigned char, unsigned char)+0x78>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1baa:	483d      	ldr	r0, [pc, #244]	; (1ca0 <MPU9250::writeRegister(unsigned char, unsigned char)+0x160>)
    1bac:	690a      	ldr	r2, [r1, #16]
    1bae:	6807      	ldr	r7, [r0, #0]
    1bb0:	403a      	ands	r2, r7
    1bb2:	61ca      	str	r2, [r1, #28]
				NVIC_ICER1 = interruptSave[1];
    1bb4:	6002      	str	r2, [r0, #0]
    1bb6:	7aca      	ldrb	r2, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1bb8:	0757      	lsls	r7, r2, #29
    1bba:	d505      	bpl.n	1bc8 <MPU9250::writeRegister(unsigned char, unsigned char)+0x88>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1bbc:	4839      	ldr	r0, [pc, #228]	; (1ca4 <MPU9250::writeRegister(unsigned char, unsigned char)+0x164>)
    1bbe:	694a      	ldr	r2, [r1, #20]
    1bc0:	6807      	ldr	r7, [r0, #0]
    1bc2:	403a      	ands	r2, r7
    1bc4:	620a      	str	r2, [r1, #32]
				NVIC_ICER2 = interruptSave[2];
    1bc6:	6002      	str	r2, [r0, #0]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    1bc8:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1bca:	680a      	ldr	r2, [r1, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    1bcc:	68d1      	ldr	r1, [r2, #12]
    1bce:	4299      	cmp	r1, r3
    1bd0:	d007      	beq.n	1be2 <MPU9250::writeRegister(unsigned char, unsigned char)+0xa2>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    1bd2:	4835      	ldr	r0, [pc, #212]	; (1ca8 <MPU9250::writeRegister(unsigned char, unsigned char)+0x168>)
    1bd4:	6010      	str	r0, [r2, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1bd6:	4935      	ldr	r1, [pc, #212]	; (1cac <MPU9250::writeRegister(unsigned char, unsigned char)+0x16c>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    1bd8:	60d3      	str	r3, [r2, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    1bda:	f043 4080 	orr.w	r0, r3, #1073741824	; 0x40000000
    1bde:	6110      	str	r0, [r2, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1be0:	6011      	str	r1, [r2, #0]
    digitalWrite(_csPin,LOW); // select the MPU9250 chip
    1be2:	2100      	movs	r1, #0
    1be4:	7d20      	ldrb	r0, [r4, #20]
    1be6:	f001 f8a7 	bl	2d38 <digitalWrite>
    1bea:	6923      	ldr	r3, [r4, #16]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1bec:	681b      	ldr	r3, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1bf2:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    1bf4:	635e      	str	r6, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bf8:	2a00      	cmp	r2, #0
    1bfa:	dafc      	bge.n	1bf6 <MPU9250::writeRegister(unsigned char, unsigned char)+0xb6>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1bfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    1c00:	6b99      	ldr	r1, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1c02:	62da      	str	r2, [r3, #44]	; 0x2c
		port().PUSHR = data;
    1c04:	635d      	str	r5, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c08:	2a00      	cmp	r2, #0
    1c0a:	dafc      	bge.n	1c06 <MPU9250::writeRegister(unsigned char, unsigned char)+0xc6>
    _spi->transfer(subAddress); // write the register address
    _spi->transfer(data); // write the data
    digitalWrite(_csPin,HIGH); // deselect the MPU9250 chip
    1c0c:	2101      	movs	r1, #1
    1c0e:	7d20      	ldrb	r0, [r4, #20]
		return port().POPR;
    1c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1c12:	f001 f891 	bl	2d38 <digitalWrite>
    _spi->endTransaction(); // end the transaction
    1c16:	6922      	ldr	r2, [r4, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1c18:	7ad3      	ldrb	r3, [r2, #11]
    1c1a:	b183      	cbz	r3, 1c3e <MPU9250::writeRegister(unsigned char, unsigned char)+0xfe>
			if (interruptMasksUsed & 0x01) {
    1c1c:	07d8      	lsls	r0, r3, #31
    1c1e:	d503      	bpl.n	1c28 <MPU9250::writeRegister(unsigned char, unsigned char)+0xe8>
				NVIC_ISER0 = interruptSave[0];
    1c20:	4b23      	ldr	r3, [pc, #140]	; (1cb0 <MPU9250::writeRegister(unsigned char, unsigned char)+0x170>)
    1c22:	6991      	ldr	r1, [r2, #24]
    1c24:	6019      	str	r1, [r3, #0]
    1c26:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    1c28:	0799      	lsls	r1, r3, #30
    1c2a:	d503      	bpl.n	1c34 <MPU9250::writeRegister(unsigned char, unsigned char)+0xf4>
				NVIC_ISER1 = interruptSave[1];
    1c2c:	4b21      	ldr	r3, [pc, #132]	; (1cb4 <MPU9250::writeRegister(unsigned char, unsigned char)+0x174>)
    1c2e:	69d1      	ldr	r1, [r2, #28]
    1c30:	6019      	str	r1, [r3, #0]
    1c32:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1c34:	075b      	lsls	r3, r3, #29
    1c36:	d502      	bpl.n	1c3e <MPU9250::writeRegister(unsigned char, unsigned char)+0xfe>
				NVIC_ISER2 = interruptSave[2];
    1c38:	4b1f      	ldr	r3, [pc, #124]	; (1cb8 <MPU9250::writeRegister(unsigned char, unsigned char)+0x178>)
    1c3a:	6a12      	ldr	r2, [r2, #32]
    1c3c:	601a      	str	r2, [r3, #0]
    _i2c->write(subAddress); // write the register address
    _i2c->write(data); // write the data
    _i2c->endTransmission();
  }

  delay(10);
    1c3e:	200a      	movs	r0, #10
    1c40:	f001 f886 	bl	2d50 <delay>
  
  /* read back the register */
  readRegisters(subAddress,1,_buffer);
    1c44:	4631      	mov	r1, r6
    1c46:	f104 0324 	add.w	r3, r4, #36	; 0x24
    1c4a:	2201      	movs	r2, #1
    1c4c:	4620      	mov	r0, r4
    1c4e:	f7ff fcbf 	bl	15d0 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)>
  /* check the read back register against the written register */
  if(_buffer[0] == data) {
    1c52:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    return 1;
  }
  else{
    return -1;
  }
}
    1c56:	42a8      	cmp	r0, r5
    1c58:	bf14      	ite	ne
    1c5a:	f04f 30ff 	movne.w	r0, #4294967295
    1c5e:	2001      	moveq	r0, #1
    1c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1c62:	7802      	ldrb	r2, [r0, #0]
    _spi->transfer(data); // write the data
    digitalWrite(_csPin,HIGH); // deselect the MPU9250 chip
    _spi->endTransaction(); // end the transaction
  }
  else{
    _i2c->beginTransmission(_address); // open the device
    1c64:	6843      	ldr	r3, [r0, #4]
    1c66:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    1c68:	2701      	movs	r7, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1c6a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		transmitting = 1;
    1c6e:	f883 705e 	strb.w	r7, [r3, #94]	; 0x5e
		txBufferLength = 1;
    1c72:	f883 705d 	strb.w	r7, [r3, #93]	; 0x5d
    _i2c->write(subAddress); // write the register address
    1c76:	6840      	ldr	r0, [r0, #4]
    1c78:	6803      	ldr	r3, [r0, #0]
    1c7a:	681b      	ldr	r3, [r3, #0]
    1c7c:	4798      	blx	r3
    _i2c->write(data); // write the data
    1c7e:	6860      	ldr	r0, [r4, #4]
    1c80:	6803      	ldr	r3, [r0, #0]
    1c82:	4629      	mov	r1, r5
    1c84:	681b      	ldr	r3, [r3, #0]
    1c86:	4798      	blx	r3
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1c88:	4639      	mov	r1, r7
    1c8a:	6860      	ldr	r0, [r4, #4]
    1c8c:	f7fe ff50 	bl	b30 <TwoWire::endTransmission(unsigned char)>
    1c90:	e7d5      	b.n	1c3e <MPU9250::writeRegister(unsigned char, unsigned char)+0xfe>
    1c92:	bf00      	nop
    1c94:	0000633e 	.word	0x0000633e
    1c98:	00006370 	.word	0x00006370
    1c9c:	e000e180 	.word	0xe000e180
    1ca0:	e000e184 	.word	0xe000e184
    1ca4:	e000e188 	.word	0xe000e188
    1ca8:	003f4001 	.word	0x003f4001
    1cac:	803f0000 	.word	0x803f0000
    1cb0:	e000e100 	.word	0xe000e100
    1cb4:	e000e104 	.word	0xe000e104
    1cb8:	e000e108 	.word	0xe000e108
    1cbc:	02dc6c00 	.word	0x02dc6c00

00001cc0 <MPU9250::setGyroRange(MPU9250::GyroRange)>:
  _accelRange = range;
  return 1;
}

/* sets the gyro full scale range to values other than default */
int MPU9250::setGyroRange(GyroRange range) {
    1cc0:	b538      	push	{r3, r4, r5, lr}
  // use low speed SPI for register setting
  _useSPIHS = false;
    1cc2:	2300      	movs	r3, #0
  _accelRange = range;
  return 1;
}

/* sets the gyro full scale range to values other than default */
int MPU9250::setGyroRange(GyroRange range) {
    1cc4:	4604      	mov	r4, r0
    1cc6:	460d      	mov	r5, r1
  // use low speed SPI for register setting
  _useSPIHS = false;
    1cc8:	7583      	strb	r3, [r0, #22]
  switch(range) {
    1cca:	2903      	cmp	r1, #3
    1ccc:	d812      	bhi.n	1cf4 <MPU9250::setGyroRange(MPU9250::GyroRange)+0x34>
    1cce:	e8df f001 	tbb	[pc, r1]
    1cd2:	283b      	.short	0x283b
    1cd4:	0215      	.short	0x0215
      _gyroScale = 1000.0f/32767.5f * _d2r; // setting the gyro scale to 1000DPS
      break;
    }
    case GYRO_RANGE_2000DPS: {
      // setting the gyro range to 2000DPS
      if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS) < 0){
    1cd6:	f890 218d 	ldrb.w	r2, [r0, #397]	; 0x18d
    1cda:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    1cde:	f7ff ff2f 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1ce2:	2800      	cmp	r0, #0
    1ce4:	db43      	blt.n	1d6e <MPU9250::setGyroRange(MPU9250::GyroRange)+0xae>
        return -1;
      }
      _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
    1ce6:	4923      	ldr	r1, [pc, #140]	; (1d74 <MPU9250::setGyroRange(MPU9250::GyroRange)+0xb4>)
    1ce8:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    1cec:	f003 fc88 	bl	5600 <__aeabi_fmul>
    1cf0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      break;
    }
  }
  _gyroRange = range;
    1cf4:	f884 5099 	strb.w	r5, [r4, #153]	; 0x99
  return 1;
    1cf8:	2001      	movs	r0, #1
}
    1cfa:	bd38      	pop	{r3, r4, r5, pc}
      _gyroScale = 500.0f/32767.5f * _d2r; // setting the gyro scale to 500DPS
      break;  
    }
    case GYRO_RANGE_1000DPS: {
      // setting the gyro range to 1000DPS
      if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_1000DPS) < 0){
    1cfc:	f890 218c 	ldrb.w	r2, [r0, #396]	; 0x18c
    1d00:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    1d04:	f7ff ff1c 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1d08:	2800      	cmp	r0, #0
    1d0a:	db30      	blt.n	1d6e <MPU9250::setGyroRange(MPU9250::GyroRange)+0xae>
        return -1;
      }
      _gyroScale = 1000.0f/32767.5f * _d2r; // setting the gyro scale to 1000DPS
    1d0c:	491a      	ldr	r1, [pc, #104]	; (1d78 <MPU9250::setGyroRange(MPU9250::GyroRange)+0xb8>)
    1d0e:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    1d12:	f003 fc75 	bl	5600 <__aeabi_fmul>
      }
      _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
      break;
    }
  }
  _gyroRange = range;
    1d16:	f884 5099 	strb.w	r5, [r4, #153]	; 0x99
    case GYRO_RANGE_1000DPS: {
      // setting the gyro range to 1000DPS
      if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_1000DPS) < 0){
        return -1;
      }
      _gyroScale = 1000.0f/32767.5f * _d2r; // setting the gyro scale to 1000DPS
    1d1a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
      break;
    }
  }
  _gyroRange = range;
  return 1;
    1d1e:	2001      	movs	r0, #1
}
    1d20:	bd38      	pop	{r3, r4, r5, pc}
      _gyroScale = 250.0f/32767.5f * _d2r; // setting the gyro scale to 250DPS
      break;
    }
    case GYRO_RANGE_500DPS: {
      // setting the gyro range to 500DPS
      if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_500DPS) < 0){
    1d22:	f890 218b 	ldrb.w	r2, [r0, #395]	; 0x18b
    1d26:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    1d2a:	f7ff ff09 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1d2e:	2800      	cmp	r0, #0
    1d30:	db1d      	blt.n	1d6e <MPU9250::setGyroRange(MPU9250::GyroRange)+0xae>
        return -1;
      }
      _gyroScale = 500.0f/32767.5f * _d2r; // setting the gyro scale to 500DPS
    1d32:	4912      	ldr	r1, [pc, #72]	; (1d7c <MPU9250::setGyroRange(MPU9250::GyroRange)+0xbc>)
    1d34:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    1d38:	f003 fc62 	bl	5600 <__aeabi_fmul>
      }
      _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
      break;
    }
  }
  _gyroRange = range;
    1d3c:	f884 5099 	strb.w	r5, [r4, #153]	; 0x99
    case GYRO_RANGE_500DPS: {
      // setting the gyro range to 500DPS
      if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_500DPS) < 0){
        return -1;
      }
      _gyroScale = 500.0f/32767.5f * _d2r; // setting the gyro scale to 500DPS
    1d40:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
      break;
    }
  }
  _gyroRange = range;
  return 1;
    1d44:	2001      	movs	r0, #1
}
    1d46:	bd38      	pop	{r3, r4, r5, pc}
  // use low speed SPI for register setting
  _useSPIHS = false;
  switch(range) {
    case GYRO_RANGE_250DPS: {
      // setting the gyro range to 250DPS
      if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS) < 0){
    1d48:	f890 218a 	ldrb.w	r2, [r0, #394]	; 0x18a
    1d4c:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    1d50:	f7ff fef6 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1d54:	2800      	cmp	r0, #0
    1d56:	db0a      	blt.n	1d6e <MPU9250::setGyroRange(MPU9250::GyroRange)+0xae>
        return -1;
      }
      _gyroScale = 250.0f/32767.5f * _d2r; // setting the gyro scale to 250DPS
    1d58:	4909      	ldr	r1, [pc, #36]	; (1d80 <MPU9250::setGyroRange(MPU9250::GyroRange)+0xc0>)
    1d5a:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    1d5e:	f003 fc4f 	bl	5600 <__aeabi_fmul>
      }
      _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
      break;
    }
  }
  _gyroRange = range;
    1d62:	f884 5099 	strb.w	r5, [r4, #153]	; 0x99
    case GYRO_RANGE_250DPS: {
      // setting the gyro range to 250DPS
      if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS) < 0){
        return -1;
      }
      _gyroScale = 250.0f/32767.5f * _d2r; // setting the gyro scale to 250DPS
    1d66:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
      break;
    }
  }
  _gyroRange = range;
  return 1;
    1d6a:	2001      	movs	r0, #1
}
    1d6c:	bd38      	pop	{r3, r4, r5, pc}
  _useSPIHS = false;
  switch(range) {
    case GYRO_RANGE_250DPS: {
      // setting the gyro range to 250DPS
      if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS) < 0){
        return -1;
    1d6e:	f04f 30ff 	mov.w	r0, #4294967295
    1d72:	bd38      	pop	{r3, r4, r5, pc}
    1d74:	3d7a00fa 	.word	0x3d7a00fa
    1d78:	3cfa00fa 	.word	0x3cfa00fa
    1d7c:	3c7a00fa 	.word	0x3c7a00fa
    1d80:	3bfa00fa 	.word	0x3bfa00fa

00001d84 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)>:
  _gyroRange = range;
  return 1;
}

/* sets the DLPF bandwidth to values other than default */
int MPU9250::setDlpfBandwidth(DlpfBandwidth bandwidth) {
    1d84:	b538      	push	{r3, r4, r5, lr}
  // use low speed SPI for register setting
  _useSPIHS = false;
    1d86:	2300      	movs	r3, #0
  _gyroRange = range;
  return 1;
}

/* sets the DLPF bandwidth to values other than default */
int MPU9250::setDlpfBandwidth(DlpfBandwidth bandwidth) {
    1d88:	4604      	mov	r4, r0
    1d8a:	460d      	mov	r5, r1
  // use low speed SPI for register setting
  _useSPIHS = false;
    1d8c:	7583      	strb	r3, [r0, #22]
  switch(bandwidth) {
    1d8e:	2905      	cmp	r1, #5
    1d90:	d815      	bhi.n	1dbe <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0x3a>
    1d92:	e8df f001 	tbb	[pc, r1]
    1d96:	2318      	.short	0x2318
    1d98:	0344392e 	.word	0x0344392e
        return -2;
      }
      break;
    }
    case DLPF_BANDWIDTH_5HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_5) < 0){ // setting accel bandwidth to 5Hz
    1d9c:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
    1da0:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    1da4:	f7ff fecc 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1da8:	2800      	cmp	r0, #0
    1daa:	db46      	blt.n	1e3a <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0xb6>
        return -1;
      } 
      if(writeRegister(CONFIG,GYRO_DLPF_5) < 0){ // setting gyro bandwidth to 5Hz
    1dac:	f894 219b 	ldrb.w	r2, [r4, #411]	; 0x19b
  switch(bandwidth) {
    case DLPF_BANDWIDTH_184HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184) < 0){ // setting accel bandwidth to 184Hz
        return -1;
      } 
      if(writeRegister(CONFIG,GYRO_DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
    1db0:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
    1db4:	4620      	mov	r0, r4
    1db6:	f7ff fec3 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1dba:	2800      	cmp	r0, #0
    1dbc:	db3a      	blt.n	1e34 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0xb0>
        return -2;
      }
      break;
    }
  }
  _bandwidth = bandwidth;
    1dbe:	f884 509a 	strb.w	r5, [r4, #154]	; 0x9a
  return 1;
    1dc2:	2001      	movs	r0, #1
}
    1dc4:	bd38      	pop	{r3, r4, r5, pc}
int MPU9250::setDlpfBandwidth(DlpfBandwidth bandwidth) {
  // use low speed SPI for register setting
  _useSPIHS = false;
  switch(bandwidth) {
    case DLPF_BANDWIDTH_184HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184) < 0){ // setting accel bandwidth to 184Hz
    1dc6:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    1dca:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    1dce:	f7ff feb7 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1dd2:	2800      	cmp	r0, #0
    1dd4:	db31      	blt.n	1e3a <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0xb6>
        return -1;
      } 
      if(writeRegister(CONFIG,GYRO_DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
    1dd6:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    1dda:	e7e9      	b.n	1db0 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0x2c>
        return -2;
      }
      break;
    }
    case DLPF_BANDWIDTH_92HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_92) < 0){ // setting accel bandwidth to 92Hz
    1ddc:	f890 2190 	ldrb.w	r2, [r0, #400]	; 0x190
    1de0:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    1de4:	f7ff feac 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1de8:	2800      	cmp	r0, #0
    1dea:	db26      	blt.n	1e3a <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0xb6>
        return -1;
      } 
      if(writeRegister(CONFIG,GYRO_DLPF_92) < 0){ // setting gyro bandwidth to 92Hz
    1dec:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1df0:	e7de      	b.n	1db0 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0x2c>
        return -2;
      }
      break;
    }
    case DLPF_BANDWIDTH_41HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_41) < 0){ // setting accel bandwidth to 41Hz
    1df2:	f890 2191 	ldrb.w	r2, [r0, #401]	; 0x191
    1df6:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    1dfa:	f7ff fea1 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1dfe:	2800      	cmp	r0, #0
    1e00:	db1b      	blt.n	1e3a <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0xb6>
        return -1;
      } 
      if(writeRegister(CONFIG,GYRO_DLPF_41) < 0){ // setting gyro bandwidth to 41Hz
    1e02:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
    1e06:	e7d3      	b.n	1db0 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0x2c>
        return -2;
      }
      break;
    }
    case DLPF_BANDWIDTH_20HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_20) < 0){ // setting accel bandwidth to 20Hz
    1e08:	f890 2192 	ldrb.w	r2, [r0, #402]	; 0x192
    1e0c:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    1e10:	f7ff fe96 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1e14:	2800      	cmp	r0, #0
    1e16:	db10      	blt.n	1e3a <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0xb6>
        return -1;
      } 
      if(writeRegister(CONFIG,GYRO_DLPF_20) < 0){ // setting gyro bandwidth to 20Hz
    1e18:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    1e1c:	e7c8      	b.n	1db0 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0x2c>
        return -2;
      }
      break;
    }
    case DLPF_BANDWIDTH_10HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_10) < 0){ // setting accel bandwidth to 10Hz
    1e1e:	f890 2193 	ldrb.w	r2, [r0, #403]	; 0x193
    1e22:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    1e26:	f7ff fe8b 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1e2a:	2800      	cmp	r0, #0
    1e2c:	db05      	blt.n	1e3a <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0xb6>
        return -1;
      } 
      if(writeRegister(CONFIG,GYRO_DLPF_10) < 0){ // setting gyro bandwidth to 10Hz
    1e2e:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
    1e32:	e7bd      	b.n	1db0 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)+0x2c>
    case DLPF_BANDWIDTH_184HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184) < 0){ // setting accel bandwidth to 184Hz
        return -1;
      } 
      if(writeRegister(CONFIG,GYRO_DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
        return -2;
    1e34:	f06f 0001 	mvn.w	r0, #1
    1e38:	bd38      	pop	{r3, r4, r5, pc}
  // use low speed SPI for register setting
  _useSPIHS = false;
  switch(bandwidth) {
    case DLPF_BANDWIDTH_184HZ: {
      if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184) < 0){ // setting accel bandwidth to 184Hz
        return -1;
    1e3a:	f04f 30ff 	mov.w	r0, #4294967295
    1e3e:	bd38      	pop	{r3, r4, r5, pc}

00001e40 <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)>:
  	return -6;
  }
}

/* reads registers from the AK8963 */
int MPU9250::readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
    1e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // set slave 0 to the AK8963 and set for read
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
    1e44:	f890 61b3 	ldrb.w	r6, [r0, #435]	; 0x1b3
    1e48:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1
  	return -6;
  }
}

/* reads registers from the AK8963 */
int MPU9250::readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
    1e4c:	4688      	mov	r8, r1
    1e4e:	4615      	mov	r5, r2
  // set slave 0 to the AK8963 and set for read
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
    1e50:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    1e54:	ea47 0206 	orr.w	r2, r7, r6
  	return -6;
  }
}

/* reads registers from the AK8963 */
int MPU9250::readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
    1e58:	4604      	mov	r4, r0
    1e5a:	461e      	mov	r6, r3
  // set slave 0 to the AK8963 and set for read
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
    1e5c:	f7ff fe70 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1e60:	2800      	cmp	r0, #0
    1e62:	db1e      	blt.n	1ea2 <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)+0x62>
    return -1;
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
    1e64:	4642      	mov	r2, r8
    1e66:	f894 11af 	ldrb.w	r1, [r4, #431]	; 0x1af
    1e6a:	4620      	mov	r0, r4
    1e6c:	f7ff fe68 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1e70:	2800      	cmp	r0, #0
    1e72:	db1a      	blt.n	1eaa <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)+0x6a>
    return -2;
  }
  // enable I2C and request the bytes
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count) < 0) {
    1e74:	f894 21b2 	ldrb.w	r2, [r4, #434]	; 0x1b2
    1e78:	f894 11b1 	ldrb.w	r1, [r4, #433]	; 0x1b1
    1e7c:	432a      	orrs	r2, r5
    1e7e:	4620      	mov	r0, r4
    1e80:	f7ff fe5e 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1e84:	2800      	cmp	r0, #0
    1e86:	db14      	blt.n	1eb2 <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)+0x72>
    return -3;
  }
	delay(1); // takes some time for these registers to fill
    1e88:	2001      	movs	r0, #1
    1e8a:	f000 ff61 	bl	2d50 <delay>
  // read the bytes off the MPU9250 EXT_SENS_DATA registers
	_status = readRegisters(EXT_SENS_DATA_00,count,dest); 
    1e8e:	4633      	mov	r3, r6
    1e90:	462a      	mov	r2, r5
    1e92:	f894 1183 	ldrb.w	r1, [r4, #387]	; 0x183
    1e96:	4620      	mov	r0, r4
    1e98:	f7ff fb9a 	bl	15d0 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)>
    1e9c:	6220      	str	r0, [r4, #32]
  return _status;
    1e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

/* reads registers from the AK8963 */
int MPU9250::readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
  // set slave 0 to the AK8963 and set for read
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
    return -1;
    1ea2:	f04f 30ff 	mov.w	r0, #4294967295
    1ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
    return -2;
    1eaa:	f06f 0001 	mvn.w	r0, #1
    1eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  // enable I2C and request the bytes
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count) < 0) {
    return -3;
    1eb2:	f06f 0002 	mvn.w	r0, #2
  }
	delay(1); // takes some time for these registers to fill
  // read the bytes off the MPU9250 EXT_SENS_DATA registers
	_status = readRegisters(EXT_SENS_DATA_00,count,dest); 
  return _status;
}
    1eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1eba:	bf00      	nop

00001ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>:
    }
  }
}

/* writes a register to the AK8963 given a register address and data */
int MPU9250::writeAK8963Register(uint8_t subAddress, uint8_t data){
    1ebc:	b570      	push	{r4, r5, r6, lr}
    1ebe:	460d      	mov	r5, r1
    1ec0:	4616      	mov	r6, r2
  // set slave 0 to the AK8963 and set for write
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR) < 0) {
    1ec2:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    1ec6:	f890 21c1 	ldrb.w	r2, [r0, #449]	; 0x1c1
    }
  }
}

/* writes a register to the AK8963 given a register address and data */
int MPU9250::writeAK8963Register(uint8_t subAddress, uint8_t data){
    1eca:	4604      	mov	r4, r0
  // set slave 0 to the AK8963 and set for write
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR) < 0) {
    1ecc:	f7ff fe38 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1ed0:	2800      	cmp	r0, #0
    1ed2:	db2b      	blt.n	1f2c <MPU9250::writeAK8963Register(unsigned char, unsigned char)+0x70>
    return -1;
  }
  // set the register to the desired AK8963 sub address 
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
    1ed4:	462a      	mov	r2, r5
    1ed6:	f894 11af 	ldrb.w	r1, [r4, #431]	; 0x1af
    1eda:	4620      	mov	r0, r4
    1edc:	f7ff fe30 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1ee0:	2800      	cmp	r0, #0
    1ee2:	db26      	blt.n	1f32 <MPU9250::writeAK8963Register(unsigned char, unsigned char)+0x76>
    return -2;
  }
  // store the data for write
	if (writeRegister(I2C_SLV0_DO,data) < 0) {
    1ee4:	4632      	mov	r2, r6
    1ee6:	f894 11b0 	ldrb.w	r1, [r4, #432]	; 0x1b0
    1eea:	4620      	mov	r0, r4
    1eec:	f7ff fe28 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1ef0:	2800      	cmp	r0, #0
    1ef2:	db21      	blt.n	1f38 <MPU9250::writeAK8963Register(unsigned char, unsigned char)+0x7c>
    return -3;
  }
  // enable I2C and send 1 byte
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1) < 0) {
    1ef4:	f894 21b2 	ldrb.w	r2, [r4, #434]	; 0x1b2
    1ef8:	f894 11b1 	ldrb.w	r1, [r4, #433]	; 0x1b1
    1efc:	f042 0201 	orr.w	r2, r2, #1
    1f00:	4620      	mov	r0, r4
    1f02:	f7ff fe1d 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1f06:	2800      	cmp	r0, #0
    1f08:	db19      	blt.n	1f3e <MPU9250::writeAK8963Register(unsigned char, unsigned char)+0x82>
    return -4;
  }
	// read the register and confirm
	if (readAK8963Registers(subAddress,1,_buffer) < 0) {
    1f0a:	4629      	mov	r1, r5
    1f0c:	f104 0324 	add.w	r3, r4, #36	; 0x24
    1f10:	2201      	movs	r2, #1
    1f12:	4620      	mov	r0, r4
    1f14:	f7ff ff94 	bl	1e40 <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)>
    1f18:	2800      	cmp	r0, #0
    1f1a:	db13      	blt.n	1f44 <MPU9250::writeAK8963Register(unsigned char, unsigned char)+0x88>
    return -5;
  }
	if(_buffer[0] == data) {
    1f1c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    1f20:	42b3      	cmp	r3, r6
  	return 1;
  } else{
  	return -6;
    1f22:	bf0c      	ite	eq
    1f24:	2001      	moveq	r0, #1
    1f26:	f06f 0005 	mvnne.w	r0, #5
    1f2a:	bd70      	pop	{r4, r5, r6, pc}

/* writes a register to the AK8963 given a register address and data */
int MPU9250::writeAK8963Register(uint8_t subAddress, uint8_t data){
  // set slave 0 to the AK8963 and set for write
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR) < 0) {
    return -1;
    1f2c:	f04f 30ff 	mov.w	r0, #4294967295
    1f30:	bd70      	pop	{r4, r5, r6, pc}
  }
  // set the register to the desired AK8963 sub address 
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
    return -2;
    1f32:	f06f 0001 	mvn.w	r0, #1
    1f36:	bd70      	pop	{r4, r5, r6, pc}
  }
  // store the data for write
	if (writeRegister(I2C_SLV0_DO,data) < 0) {
    return -3;
    1f38:	f06f 0002 	mvn.w	r0, #2
    1f3c:	bd70      	pop	{r4, r5, r6, pc}
  }
  // enable I2C and send 1 byte
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1) < 0) {
    return -4;
    1f3e:	f06f 0003 	mvn.w	r0, #3
    1f42:	bd70      	pop	{r4, r5, r6, pc}
  }
	// read the register and confirm
	if (readAK8963Registers(subAddress,1,_buffer) < 0) {
    return -5;
    1f44:	f06f 0004 	mvn.w	r0, #4
	if(_buffer[0] == data) {
  	return 1;
  } else{
  	return -6;
  }
}
    1f48:	bd70      	pop	{r4, r5, r6, pc}
    1f4a:	bf00      	nop

00001f4c <MPU9250::setSrd(unsigned char)>:
  _bandwidth = bandwidth;
  return 1;
}

/* sets the sample rate divider to values other than default */
int MPU9250::setSrd(uint8_t srd) {
    1f4c:	b538      	push	{r3, r4, r5, lr}
  // use low speed SPI for register setting
  _useSPIHS = false;
    1f4e:	2300      	movs	r3, #0
  _bandwidth = bandwidth;
  return 1;
}

/* sets the sample rate divider to values other than default */
int MPU9250::setSrd(uint8_t srd) {
    1f50:	460d      	mov	r5, r1
  // use low speed SPI for register setting
  _useSPIHS = false;
    1f52:	7583      	strb	r3, [r0, #22]
  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
    1f54:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    1f58:	2213      	movs	r2, #19
  _bandwidth = bandwidth;
  return 1;
}

/* sets the sample rate divider to values other than default */
int MPU9250::setSrd(uint8_t srd) {
    1f5a:	4604      	mov	r4, r0
  // use low speed SPI for register setting
  _useSPIHS = false;
  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
    1f5c:	f7ff fdf0 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1f60:	2800      	cmp	r0, #0
    1f62:	db3d      	blt.n	1fe0 <MPU9250::setSrd(unsigned char)+0x94>
    return -1;
  }
  if(srd > 9){
    1f64:	2d09      	cmp	r5, #9
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
    1f66:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    1f6a:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    1f6e:	4620      	mov	r0, r4
  _useSPIHS = false;
  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
    return -1;
  }
  if(srd > 9){
    1f70:	d826      	bhi.n	1fc0 <MPU9250::setSrd(unsigned char)+0x74>
    delay(100); // long wait between AK8963 mode changes     
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
  } else {
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
    1f72:	f7ff ffa3 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
    1f76:	2800      	cmp	r0, #0
    1f78:	db2c      	blt.n	1fd4 <MPU9250::setSrd(unsigned char)+0x88>
      return -2;
    }
    delay(100); // long wait between AK8963 mode changes  
    1f7a:	2064      	movs	r0, #100	; 0x64
    1f7c:	f000 fee8 	bl	2d50 <delay>
    // set AK8963 to 16 bit resolution, 100 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
    1f80:	f894 21c6 	ldrb.w	r2, [r4, #454]	; 0x1c6
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
      return -2;
    }
    delay(100); // long wait between AK8963 mode changes  
    // set AK8963 to 16 bit resolution, 8 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1) < 0){
    1f84:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    1f88:	4620      	mov	r0, r4
    1f8a:	f7ff ff97 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
    1f8e:	2800      	cmp	r0, #0
    1f90:	db23      	blt.n	1fda <MPU9250::setSrd(unsigned char)+0x8e>
    delay(100); // long wait between AK8963 mode changes  
    // set AK8963 to 16 bit resolution, 100 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
      return -3;
    }
    delay(100); // long wait between AK8963 mode changes     
    1f92:	2064      	movs	r0, #100	; 0x64
    1f94:	f000 fedc 	bl	2d50 <delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);    
    1f98:	f104 0324 	add.w	r3, r4, #36	; 0x24
    1f9c:	2207      	movs	r2, #7
    1f9e:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
    1fa2:	4620      	mov	r0, r4
    1fa4:	f7ff ff4c 	bl	1e40 <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)>
  } 
  /* setting the sample rate divider */
  if(writeRegister(SMPDIV,srd) < 0){ // setting the sample rate divider
    1fa8:	462a      	mov	r2, r5
    1faa:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
    1fae:	4620      	mov	r0, r4
    1fb0:	f7ff fdc6 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    1fb4:	2800      	cmp	r0, #0
    1fb6:	db16      	blt.n	1fe6 <MPU9250::setSrd(unsigned char)+0x9a>
    return -4;
  } 
  _srd = srd;
    1fb8:	f884 509b 	strb.w	r5, [r4, #155]	; 0x9b
  return 1; 
    1fbc:	2001      	movs	r0, #1
    1fbe:	bd38      	pop	{r3, r4, r5, pc}
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
    return -1;
  }
  if(srd > 9){
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
    1fc0:	f7ff ff7c 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
    1fc4:	2800      	cmp	r0, #0
    1fc6:	db05      	blt.n	1fd4 <MPU9250::setSrd(unsigned char)+0x88>
      return -2;
    }
    delay(100); // long wait between AK8963 mode changes  
    1fc8:	2064      	movs	r0, #100	; 0x64
    1fca:	f000 fec1 	bl	2d50 <delay>
    // set AK8963 to 16 bit resolution, 8 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1) < 0){
    1fce:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    1fd2:	e7d7      	b.n	1f84 <MPU9250::setSrd(unsigned char)+0x38>
    return -1;
  }
  if(srd > 9){
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
      return -2;
    1fd4:	f06f 0001 	mvn.w	r0, #1
    1fd8:	bd38      	pop	{r3, r4, r5, pc}
    }
    delay(100); // long wait between AK8963 mode changes  
    // set AK8963 to 16 bit resolution, 8 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1) < 0){
      return -3;
    1fda:	f06f 0002 	mvn.w	r0, #2
    1fde:	bd38      	pop	{r3, r4, r5, pc}
int MPU9250::setSrd(uint8_t srd) {
  // use low speed SPI for register setting
  _useSPIHS = false;
  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
    return -1;
    1fe0:	f04f 30ff 	mov.w	r0, #4294967295
    1fe4:	bd38      	pop	{r3, r4, r5, pc}
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);    
  } 
  /* setting the sample rate divider */
  if(writeRegister(SMPDIV,srd) < 0){ // setting the sample rate divider
    return -4;
    1fe6:	f06f 0003 	mvn.w	r0, #3
  } 
  _srd = srd;
  return 1; 
}
    1fea:	bd38      	pop	{r3, r4, r5, pc}

00001fec <MPU9250::calibrateGyro()>:
  *size = _tSize;
  memcpy(data,_tFifo,_tSize*sizeof(float));  
}

/* estimates the gyro biases */
int MPU9250::calibrateGyro() {
    1fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // set the range, bandwidth, and srd
  if (setGyroRange(GYRO_RANGE_250DPS) < 0) {
    1fee:	2100      	movs	r1, #0
  *size = _tSize;
  memcpy(data,_tFifo,_tSize*sizeof(float));  
}

/* estimates the gyro biases */
int MPU9250::calibrateGyro() {
    1ff0:	4604      	mov	r4, r0
  // set the range, bandwidth, and srd
  if (setGyroRange(GYRO_RANGE_250DPS) < 0) {
    1ff2:	f7ff fe65 	bl	1cc0 <MPU9250::setGyroRange(MPU9250::GyroRange)>
    1ff6:	2800      	cmp	r0, #0
    1ff8:	f2c0 8096 	blt.w	2128 <MPU9250::calibrateGyro()+0x13c>
    return -1;
  }
  if (setDlpfBandwidth(DLPF_BANDWIDTH_20HZ) < 0) {
    1ffc:	2103      	movs	r1, #3
    1ffe:	4620      	mov	r0, r4
    2000:	f7ff fec0 	bl	1d84 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)>
    2004:	2800      	cmp	r0, #0
    2006:	f2c0 8092 	blt.w	212e <MPU9250::calibrateGyro()+0x142>
    return -2;
  }
  if (setSrd(19) < 0) {
    200a:	2113      	movs	r1, #19
    200c:	4620      	mov	r0, r4
    200e:	f7ff ff9d 	bl	1f4c <MPU9250::setSrd(unsigned char)>
    2012:	2800      	cmp	r0, #0
    2014:	f2c0 8094 	blt.w	2140 <MPU9250::calibrateGyro()+0x154>

  // take samples and find bias
  _gxbD = 0;
  _gybD = 0;
  _gzbD = 0;
  for (size_t i=0; i < _numSamples; i++) {
    2018:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  if (setSrd(19) < 0) {
    return -3;
  }

  // take samples and find bias
  _gxbD = 0;
    201c:	2200      	movs	r2, #0
    201e:	2300      	movs	r3, #0
    2020:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
  _gybD = 0;
    2024:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
  _gzbD = 0;
    2028:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
  for (size_t i=0; i < _numSamples; i++) {
    202c:	2900      	cmp	r1, #0
    202e:	d077      	beq.n	2120 <MPU9250::calibrateGyro()+0x134>
    2030:	2500      	movs	r5, #0
    readSensor();
    2032:	4620      	mov	r0, r4
    2034:	f7ff fc16 	bl	1864 <MPU9250::readSensor()>
    _gxbD += (getGyroX_rads() + _gxb)/((double)_numSamples);
    2038:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    203c:	f002 fe3c 	bl	4cb8 <__aeabi_ui2d>
    2040:	4606      	mov	r6, r0
    2042:	460f      	mov	r7, r1
    2044:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    2046:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
    204a:	f003 f9d1 	bl	53f0 <__addsf3>
    204e:	f002 fe55 	bl	4cfc <__aeabi_f2d>
    2052:	4632      	mov	r2, r6
    2054:	463b      	mov	r3, r7
    2056:	f002 ffcf 	bl	4ff8 <__aeabi_ddiv>
    205a:	4602      	mov	r2, r0
    205c:	460b      	mov	r3, r1
    205e:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    2062:	f002 fced 	bl	4a40 <__adddf3>
    2066:	e9c4 0128 	strd	r0, r1, [r4, #160]	; 0xa0
    _gybD += (getGyroY_rads() + _gyb)/((double)_numSamples);
    206a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
    206e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    2070:	f003 f9be 	bl	53f0 <__addsf3>
    2074:	f002 fe42 	bl	4cfc <__aeabi_f2d>
    2078:	4632      	mov	r2, r6
    207a:	463b      	mov	r3, r7
    207c:	f002 ffbc 	bl	4ff8 <__aeabi_ddiv>
    2080:	4602      	mov	r2, r0
    2082:	460b      	mov	r3, r1
    2084:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
    2088:	f002 fcda 	bl	4a40 <__adddf3>
    208c:	e9c4 012a 	strd	r0, r1, [r4, #168]	; 0xa8
    _gzbD += (getGyroZ_rads() + _gzb)/((double)_numSamples);
    2090:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
    2094:	6e60      	ldr	r0, [r4, #100]	; 0x64
    2096:	f003 f9ab 	bl	53f0 <__addsf3>
    209a:	f002 fe2f 	bl	4cfc <__aeabi_f2d>
    209e:	4632      	mov	r2, r6
    20a0:	463b      	mov	r3, r7
    20a2:	f002 ffa9 	bl	4ff8 <__aeabi_ddiv>
    20a6:	460b      	mov	r3, r1
    20a8:	4602      	mov	r2, r0
    20aa:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
    20ae:	f002 fcc7 	bl	4a40 <__adddf3>
    20b2:	e9c4 012c 	strd	r0, r1, [r4, #176]	; 0xb0
    delay(20);
    20b6:	2014      	movs	r0, #20
    20b8:	f000 fe4a 	bl	2d50 <delay>

  // take samples and find bias
  _gxbD = 0;
  _gybD = 0;
  _gzbD = 0;
  for (size_t i=0; i < _numSamples; i++) {
    20bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    20c0:	3501      	adds	r5, #1
    20c2:	42ab      	cmp	r3, r5
    20c4:	d8b5      	bhi.n	2032 <MPU9250::calibrateGyro()+0x46>
    20c6:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    20ca:	f003 f93b 	bl	5344 <__aeabi_d2f>
    20ce:	4606      	mov	r6, r0
    20d0:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
    20d4:	f003 f936 	bl	5344 <__aeabi_d2f>
    20d8:	4605      	mov	r5, r0
    20da:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
    20de:	f003 f931 	bl	5344 <__aeabi_d2f>
    _gzbD += (getGyroZ_rads() + _gzb)/((double)_numSamples);
    delay(20);
  }
  _gxb = (float)_gxbD;
  _gyb = (float)_gybD;
  _gzb = (float)_gzbD;
    20e2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    _gxbD += (getGyroX_rads() + _gxb)/((double)_numSamples);
    _gybD += (getGyroY_rads() + _gyb)/((double)_numSamples);
    _gzbD += (getGyroZ_rads() + _gzb)/((double)_numSamples);
    delay(20);
  }
  _gxb = (float)_gxbD;
    20e6:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
  _gyb = (float)_gybD;
    20ea:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
  _gzb = (float)_gzbD;

  // set the range, bandwidth, and srd back to what they were
  if (setGyroRange(_gyroRange) < 0) {
    20ee:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
    20f2:	4620      	mov	r0, r4
    20f4:	f7ff fde4 	bl	1cc0 <MPU9250::setGyroRange(MPU9250::GyroRange)>
    20f8:	2800      	cmp	r0, #0
    20fa:	db1b      	blt.n	2134 <MPU9250::calibrateGyro()+0x148>
    return -4;
  }
  if (setDlpfBandwidth(_bandwidth) < 0) {
    20fc:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
    2100:	4620      	mov	r0, r4
    2102:	f7ff fe3f 	bl	1d84 <MPU9250::setDlpfBandwidth(MPU9250::DlpfBandwidth)>
    2106:	2800      	cmp	r0, #0
    2108:	db17      	blt.n	213a <MPU9250::calibrateGyro()+0x14e>
    return -5;
  }
  if (setSrd(_srd) < 0) {
    210a:	f894 109b 	ldrb.w	r1, [r4, #155]	; 0x9b
    210e:	4620      	mov	r0, r4
    2110:	f7ff ff1c 	bl	1f4c <MPU9250::setSrd(unsigned char)>
    return -6;
    2114:	2800      	cmp	r0, #0
    2116:	bfac      	ite	ge
    2118:	2001      	movge	r0, #1
    211a:	f06f 0005 	mvnlt.w	r0, #5
    211e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  // take samples and find bias
  _gxbD = 0;
  _gybD = 0;
  _gzbD = 0;
  for (size_t i=0; i < _numSamples; i++) {
    2120:	2000      	movs	r0, #0
    2122:	4605      	mov	r5, r0
    2124:	4606      	mov	r6, r0
    2126:	e7dc      	b.n	20e2 <MPU9250::calibrateGyro()+0xf6>

/* estimates the gyro biases */
int MPU9250::calibrateGyro() {
  // set the range, bandwidth, and srd
  if (setGyroRange(GYRO_RANGE_250DPS) < 0) {
    return -1;
    2128:	f04f 30ff 	mov.w	r0, #4294967295
    212c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (setDlpfBandwidth(DLPF_BANDWIDTH_20HZ) < 0) {
    return -2;
    212e:	f06f 0001 	mvn.w	r0, #1
    2132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _gyb = (float)_gybD;
  _gzb = (float)_gzbD;

  // set the range, bandwidth, and srd back to what they were
  if (setGyroRange(_gyroRange) < 0) {
    return -4;
    2134:	f06f 0003 	mvn.w	r0, #3
    2138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (setDlpfBandwidth(_bandwidth) < 0) {
    return -5;
    213a:	f06f 0004 	mvn.w	r0, #4
  }
  if (setSrd(_srd) < 0) {
    return -6;
  }
  return 1;
}
    213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (setDlpfBandwidth(DLPF_BANDWIDTH_20HZ) < 0) {
    return -2;
  }
  if (setSrd(19) < 0) {
    return -3;
    2140:	f06f 0002 	mvn.w	r0, #2
    2144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2146:	bf00      	nop

00002148 <MPU9250::begin()>:
  _useSPI = true; // set to use SPI
}

/* starts communication with the MPU-9250 */
int MPU9250::begin(){
  if( _useSPI ) { // using SPI for communication
    2148:	7d43      	ldrb	r3, [r0, #21]
  _csPin = csPin; // chip select pin
  _useSPI = true; // set to use SPI
}

/* starts communication with the MPU-9250 */
int MPU9250::begin(){
    214a:	b570      	push	{r4, r5, r6, lr}
    214c:	4604      	mov	r4, r0
  if( _useSPI ) { // using SPI for communication
    214e:	2b00      	cmp	r3, #0
    2150:	f000 8171 	beq.w	2436 <MPU9250::begin()+0x2ee>
    // use low speed SPI for register setting
    _useSPIHS = false;
    2154:	2300      	movs	r3, #0
    2156:	7583      	strb	r3, [r0, #22]
    // setting CS pin to output
    pinMode(_csPin,OUTPUT);
    2158:	2101      	movs	r1, #1
    215a:	7d00      	ldrb	r0, [r0, #20]
    215c:	f000 fdf2 	bl	2d44 <pinMode>
    // setting CS pin high
    digitalWrite(_csPin,HIGH);
    2160:	7d20      	ldrb	r0, [r4, #20]
    2162:	2101      	movs	r1, #1
    2164:	f000 fde8 	bl	2d38 <digitalWrite>
    // begin SPI communication
    _spi->begin();
    2168:	6920      	ldr	r0, [r4, #16]
    216a:	f7ff f879 	bl	1260 <SPIClass::begin()>
    _i2c->begin();
    // setting the I2C clock
    _i2c->setClock(_i2cRate);
  }
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
    216e:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
    2172:	f894 11a3 	ldrb.w	r1, [r4, #419]	; 0x1a3
    2176:	4620      	mov	r0, r4
    2178:	f7ff fce2 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    217c:	2800      	cmp	r0, #0
    217e:	f2c0 8176 	blt.w	246e <MPU9250::begin()+0x326>
    return -1;
  }
  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
    2182:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2186:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    218a:	4620      	mov	r0, r4
    218c:	f7ff fcd8 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    2190:	2800      	cmp	r0, #0
    2192:	f2c0 816f 	blt.w	2474 <MPU9250::begin()+0x32c>
    return -2;
  }
  // set the I2C bus speed to 400 kHz
  if(writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
    2196:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    219a:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
    219e:	4620      	mov	r0, r4
    21a0:	f7ff fcce 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    21a4:	2800      	cmp	r0, #0
    21a6:	f2c0 8168 	blt.w	247a <MPU9250::begin()+0x332>
    return -3;
  }
  // set AK8963 to Power Down
  writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
    21aa:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    21ae:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    21b2:	4620      	mov	r0, r4
    21b4:	f7ff fe82 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
  // reset the MPU9250
  writeRegister(PWR_MGMNT_1,PWR_RESET);
    21b8:	f894 21a5 	ldrb.w	r2, [r4, #421]	; 0x1a5
    21bc:	f894 11a3 	ldrb.w	r1, [r4, #419]	; 0x1a3
    21c0:	4620      	mov	r0, r4
    21c2:	f7ff fcbd 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
  // wait for MPU-9250 to come back up
  delay(1);
    21c6:	2001      	movs	r0, #1
    21c8:	f000 fdc2 	bl	2d50 <delay>
  // reset the AK8963
  writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
    21cc:	f894 21c9 	ldrb.w	r2, [r4, #457]	; 0x1c9
    21d0:	f894 11c8 	ldrb.w	r1, [r4, #456]	; 0x1c8
    21d4:	4620      	mov	r0, r4
    21d6:	f7ff fe71 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
    21da:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
    21de:	f894 11a3 	ldrb.w	r1, [r4, #419]	; 0x1a3
    21e2:	4620      	mov	r0, r4
    21e4:	f7ff fcac 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    21e8:	2800      	cmp	r0, #0
    21ea:	f2c0 8149 	blt.w	2480 <MPU9250::begin()+0x338>
}

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
int MPU9250::whoAmI(){
  // read the WHO AM I register
  if (readRegisters(WHO_AM_I,1,_buffer) < 0) {
    21ee:	f104 0524 	add.w	r5, r4, #36	; 0x24
    21f2:	462b      	mov	r3, r5
    21f4:	2201      	movs	r2, #1
    21f6:	f894 11b9 	ldrb.w	r1, [r4, #441]	; 0x1b9
    21fa:	4620      	mov	r0, r4
    21fc:	f7ff f9e8 	bl	15d0 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)>
    2200:	2800      	cmp	r0, #0
    2202:	f2c0 8120 	blt.w	2446 <MPU9250::begin()+0x2fe>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
    return -4;
  }
  // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
  if((whoAmI() != 113)&&(whoAmI() != 115)){
    2206:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    220a:	2b71      	cmp	r3, #113	; 0x71
    220c:	f040 811b 	bne.w	2446 <MPU9250::begin()+0x2fe>
    return -5;
  }
  // enable accelerometer and gyro
  if(writeRegister(PWR_MGMNT_2,SEN_ENABLE) < 0){
    2210:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
    2214:	f894 11a7 	ldrb.w	r1, [r4, #423]	; 0x1a7
    2218:	4620      	mov	r0, r4
    221a:	f7ff fc91 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    221e:	2800      	cmp	r0, #0
    2220:	f2c0 8131 	blt.w	2486 <MPU9250::begin()+0x33e>
    return -6;
  }
  // setting accel range to 16G as default
  if(writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G) < 0){
    2224:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
    2228:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    222c:	4620      	mov	r0, r4
    222e:	f7ff fc87 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    2232:	2800      	cmp	r0, #0
    2234:	f2c0 812a 	blt.w	248c <MPU9250::begin()+0x344>
    return -7;
  }
  _accelScale = G * 16.0f/32767.5f; // setting the accel scale to 16G
    2238:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    223c:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    2240:	f003 f9de 	bl	5600 <__aeabi_fmul>
    2244:	49a3      	ldr	r1, [pc, #652]	; (24d4 <MPU9250::begin()+0x38c>)
    2246:	f003 fa8f 	bl	5768 <__aeabi_fdiv>
  _accelRange = ACCEL_RANGE_16G;
    224a:	2603      	movs	r6, #3
  }
  // setting accel range to 16G as default
  if(writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G) < 0){
    return -7;
  }
  _accelScale = G * 16.0f/32767.5f; // setting the accel scale to 16G
    224c:	67e0      	str	r0, [r4, #124]	; 0x7c
  _accelRange = ACCEL_RANGE_16G;
    224e:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
  // setting the gyro range to 2000DPS as default
  if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS) < 0){
    2252:	f894 218d 	ldrb.w	r2, [r4, #397]	; 0x18d
    2256:	f894 1189 	ldrb.w	r1, [r4, #393]	; 0x189
    225a:	4620      	mov	r0, r4
    225c:	f7ff fc70 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    2260:	2800      	cmp	r0, #0
    2262:	f2c0 8116 	blt.w	2492 <MPU9250::begin()+0x34a>
    return -8;
  }
  _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
    2266:	499c      	ldr	r1, [pc, #624]	; (24d8 <MPU9250::begin()+0x390>)
    2268:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    226c:	f003 f9c8 	bl	5600 <__aeabi_fmul>
  _gyroRange = GYRO_RANGE_2000DPS;
    2270:	f884 6099 	strb.w	r6, [r4, #153]	; 0x99
  _accelRange = ACCEL_RANGE_16G;
  // setting the gyro range to 2000DPS as default
  if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS) < 0){
    return -8;
  }
  _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
    2274:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  _gyroRange = GYRO_RANGE_2000DPS;
  // setting bandwidth to 184Hz as default
  if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184) < 0){ 
    2278:	f894 218f 	ldrb.w	r2, [r4, #399]	; 0x18f
    227c:	f894 118e 	ldrb.w	r1, [r4, #398]	; 0x18e
    2280:	4620      	mov	r0, r4
    2282:	f7ff fc5d 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    2286:	2800      	cmp	r0, #0
    2288:	f2c0 8106 	blt.w	2498 <MPU9250::begin()+0x350>
    return -9;
  } 
  if(writeRegister(CONFIG,GYRO_DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
    228c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    2290:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
    2294:	4620      	mov	r0, r4
    2296:	f7ff fc53 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    229a:	2800      	cmp	r0, #0
    229c:	f2c0 80ff 	blt.w	249e <MPU9250::begin()+0x356>
    return -10;
  }
  _bandwidth = DLPF_BANDWIDTH_184HZ;
    22a0:	2600      	movs	r6, #0
    22a2:	f884 609a 	strb.w	r6, [r4, #154]	; 0x9a
  // setting the sample rate divider to 0 as default
  if(writeRegister(SMPDIV,0x00) < 0){ 
    22a6:	4632      	mov	r2, r6
    22a8:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
    22ac:	4620      	mov	r0, r4
    22ae:	f7ff fc47 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    22b2:	42b0      	cmp	r0, r6
    22b4:	f2c0 80f6 	blt.w	24a4 <MPU9250::begin()+0x35c>
    return -11;
  } 
  _srd = 0;
    22b8:	f884 609b 	strb.w	r6, [r4, #155]	; 0x9b
  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
    22bc:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    22c0:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    22c4:	4620      	mov	r0, r4
    22c6:	f7ff fc3b 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    22ca:	42b0      	cmp	r0, r6
    22cc:	f2c0 80ed 	blt.w	24aa <MPU9250::begin()+0x362>
  	return -12;
  }
	// set the I2C bus speed to 400 kHz
	if( writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
    22d0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    22d4:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
    22d8:	4620      	mov	r0, r4
    22da:	f7ff fc31 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    22de:	42b0      	cmp	r0, r6
    22e0:	f2c0 80e6 	blt.w	24b0 <MPU9250::begin()+0x368>
}

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
int MPU9250::whoAmIAK8963(){
  // read the WHO AM I register
  if (readAK8963Registers(AK8963_WHO_AM_I,1,_buffer) < 0) {
    22e4:	462b      	mov	r3, r5
    22e6:	2201      	movs	r2, #1
    22e8:	f894 11cb 	ldrb.w	r1, [r4, #459]	; 0x1cb
    22ec:	4620      	mov	r0, r4
    22ee:	f7ff fda7 	bl	1e40 <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)>
    22f2:	42b0      	cmp	r0, r6
    22f4:	f2c0 80b8 	blt.w	2468 <MPU9250::begin()+0x320>
	// set the I2C bus speed to 400 kHz
	if( writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
		return -13;
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 72 ){
    22f8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    22fc:	2b48      	cmp	r3, #72	; 0x48
    22fe:	f040 80b3 	bne.w	2468 <MPU9250::begin()+0x320>
    return -14;
	}
  /* get the magnetometer calibration */
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
    2302:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    2306:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    230a:	4620      	mov	r0, r4
    230c:	f7ff fdd6 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
    2310:	42b0      	cmp	r0, r6
    2312:	f2c0 80d0 	blt.w	24b6 <MPU9250::begin()+0x36e>
    return -15;
  }
  delay(100); // long wait between AK8963 mode changes
    2316:	2064      	movs	r0, #100	; 0x64
    2318:	f000 fd1a 	bl	2d50 <delay>
  // set AK8963 to FUSE ROM access
  if(writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM) < 0){
    231c:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
    2320:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    2324:	4620      	mov	r0, r4
    2326:	f7ff fdc9 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
    232a:	42b0      	cmp	r0, r6
    232c:	f2c0 80c6 	blt.w	24bc <MPU9250::begin()+0x374>
    return -16;
  }
  delay(100); // long wait between AK8963 mode changes
    2330:	2064      	movs	r0, #100	; 0x64
    2332:	f000 fd0d 	bl	2d50 <delay>
  // read the AK8963 ASA registers and compute magnetometer scale factors
  readAK8963Registers(AK8963_ASA,3,_buffer);
    2336:	462b      	mov	r3, r5
    2338:	2203      	movs	r2, #3
    233a:	f894 11ca 	ldrb.w	r1, [r4, #458]	; 0x1ca
    233e:	4620      	mov	r0, r4
    2340:	f7ff fd7e 	bl	1e40 <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)>
  _magScaleX = ((((float)_buffer[0]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
    2344:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    2348:	f003 f902 	bl	5550 <__aeabi_ui2f>
    234c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2350:	f003 f84c 	bl	53ec <__aeabi_fsub>
    2354:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    2358:	f003 f952 	bl	5600 <__aeabi_fmul>
    235c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    2360:	f003 f846 	bl	53f0 <__addsf3>
    2364:	495d      	ldr	r1, [pc, #372]	; (24dc <MPU9250::begin()+0x394>)
    2366:	f003 f94b 	bl	5600 <__aeabi_fmul>
    236a:	495d      	ldr	r1, [pc, #372]	; (24e0 <MPU9250::begin()+0x398>)
    236c:	f003 f9fc 	bl	5768 <__aeabi_fdiv>
    2370:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  _magScaleY = ((((float)_buffer[1]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
    2374:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    2378:	f003 f8ea 	bl	5550 <__aeabi_ui2f>
    237c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2380:	f003 f834 	bl	53ec <__aeabi_fsub>
    2384:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    2388:	f003 f93a 	bl	5600 <__aeabi_fmul>
    238c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    2390:	f003 f82e 	bl	53f0 <__addsf3>
    2394:	4951      	ldr	r1, [pc, #324]	; (24dc <MPU9250::begin()+0x394>)
    2396:	f003 f933 	bl	5600 <__aeabi_fmul>
    239a:	4951      	ldr	r1, [pc, #324]	; (24e0 <MPU9250::begin()+0x398>)
    239c:	f003 f9e4 	bl	5768 <__aeabi_fdiv>
    23a0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  _magScaleZ = ((((float)_buffer[2]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla 
    23a4:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    23a8:	f003 f8d2 	bl	5550 <__aeabi_ui2f>
    23ac:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    23b0:	f003 f81c 	bl	53ec <__aeabi_fsub>
    23b4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    23b8:	f003 f922 	bl	5600 <__aeabi_fmul>
    23bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    23c0:	f003 f816 	bl	53f0 <__addsf3>
    23c4:	4945      	ldr	r1, [pc, #276]	; (24dc <MPU9250::begin()+0x394>)
    23c6:	f003 f91b 	bl	5600 <__aeabi_fmul>
    23ca:	4945      	ldr	r1, [pc, #276]	; (24e0 <MPU9250::begin()+0x398>)
    23cc:	f003 f9cc 	bl	5768 <__aeabi_fdiv>
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
    23d0:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
  delay(100); // long wait between AK8963 mode changes
  // read the AK8963 ASA registers and compute magnetometer scale factors
  readAK8963Registers(AK8963_ASA,3,_buffer);
  _magScaleX = ((((float)_buffer[0]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
  _magScaleY = ((((float)_buffer[1]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
  _magScaleZ = ((((float)_buffer[2]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla 
    23d4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
    23d8:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    23dc:	4620      	mov	r0, r4
    23de:	f7ff fd6d 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
    23e2:	42b0      	cmp	r0, r6
    23e4:	db6d      	blt.n	24c2 <MPU9250::begin()+0x37a>
    return -17;
  }
  delay(100); // long wait between AK8963 mode changes  
    23e6:	2064      	movs	r0, #100	; 0x64
    23e8:	f000 fcb2 	bl	2d50 <delay>
  // set AK8963 to 16 bit resolution, 100 Hz update rate
  if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
    23ec:	f894 21c6 	ldrb.w	r2, [r4, #454]	; 0x1c6
    23f0:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    23f4:	4620      	mov	r0, r4
    23f6:	f7ff fd61 	bl	1ebc <MPU9250::writeAK8963Register(unsigned char, unsigned char)>
    23fa:	42b0      	cmp	r0, r6
    23fc:	db64      	blt.n	24c8 <MPU9250::begin()+0x380>
    return -18;
  }
  delay(100); // long wait between AK8963 mode changes
    23fe:	2064      	movs	r0, #100	; 0x64
    2400:	f000 fca6 	bl	2d50 <delay>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
    2404:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
    2408:	f894 11a3 	ldrb.w	r1, [r4, #419]	; 0x1a3
    240c:	4620      	mov	r0, r4
    240e:	f7ff fb97 	bl	1b40 <MPU9250::writeRegister(unsigned char, unsigned char)>
    2412:	42b0      	cmp	r0, r6
    2414:	db5b      	blt.n	24ce <MPU9250::begin()+0x386>
    return -19;
  }       
  // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
  readAK8963Registers(AK8963_HXL,7,_buffer);
    2416:	462b      	mov	r3, r5
    2418:	2207      	movs	r2, #7
    241a:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
    241e:	4620      	mov	r0, r4
    2420:	f7ff fd0e 	bl	1e40 <MPU9250::readAK8963Registers(unsigned char, unsigned char, unsigned char*)>
  // estimate gyro bias
  if (calibrateGyro() < 0) {
    2424:	4620      	mov	r0, r4
    2426:	f7ff fde1 	bl	1fec <MPU9250::calibrateGyro()>
    return -20;
  }
  // successful init, return 1
  return 1;
    242a:	42b0      	cmp	r0, r6
    242c:	bfb4      	ite	lt
    242e:	f06f 0013 	mvnlt.w	r0, #19
    2432:	2001      	movge	r0, #1
    2434:	bd70      	pop	{r4, r5, r6, pc}
    digitalWrite(_csPin,HIGH);
    // begin SPI communication
    _spi->begin();
  } else { // using I2C for communication
    // starting the I2C bus
    _i2c->begin();
    2436:	6840      	ldr	r0, [r0, #4]
    2438:	f7fe f9ce 	bl	7d8 <TwoWire::begin()>
    // setting the I2C clock
    _i2c->setClock(_i2cRate);
    243c:	68a1      	ldr	r1, [r4, #8]
    243e:	6860      	ldr	r0, [r4, #4]
    2440:	f7fe fa14 	bl	86c <TwoWire::setClock(unsigned long)>
    2444:	e693      	b.n	216e <MPU9250::begin()+0x26>
}

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
int MPU9250::whoAmI(){
  // read the WHO AM I register
  if (readRegisters(WHO_AM_I,1,_buffer) < 0) {
    2446:	462b      	mov	r3, r5
    2448:	2201      	movs	r2, #1
    244a:	f894 11b9 	ldrb.w	r1, [r4, #441]	; 0x1b9
    244e:	4620      	mov	r0, r4
    2450:	f7ff f8be 	bl	15d0 <MPU9250::readRegisters(unsigned char, unsigned char, unsigned char*)>
    2454:	2800      	cmp	r0, #0
    2456:	db04      	blt.n	2462 <MPU9250::begin()+0x31a>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
    return -4;
  }
  // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
  if((whoAmI() != 113)&&(whoAmI() != 115)){
    2458:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    245c:	2b73      	cmp	r3, #115	; 0x73
    245e:	f43f aed7 	beq.w	2210 <MPU9250::begin()+0xc8>
    return -5;
    2462:	f06f 0004 	mvn.w	r0, #4
    2466:	bd70      	pop	{r4, r5, r6, pc}
	if( writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
		return -13;
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 72 ){
    return -14;
    2468:	f06f 000d 	mvn.w	r0, #13
    246c:	bd70      	pop	{r4, r5, r6, pc}
    // setting the I2C clock
    _i2c->setClock(_i2cRate);
  }
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
    return -1;
    246e:	f04f 30ff 	mov.w	r0, #4294967295
    2472:	bd70      	pop	{r4, r5, r6, pc}
  }
  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
    return -2;
    2474:	f06f 0001 	mvn.w	r0, #1
    2478:	bd70      	pop	{r4, r5, r6, pc}
  }
  // set the I2C bus speed to 400 kHz
  if(writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
    return -3;
    247a:	f06f 0002 	mvn.w	r0, #2
    247e:	bd70      	pop	{r4, r5, r6, pc}
  delay(1);
  // reset the AK8963
  writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
    return -4;
    2480:	f06f 0003 	mvn.w	r0, #3
    2484:	bd70      	pop	{r4, r5, r6, pc}
  if((whoAmI() != 113)&&(whoAmI() != 115)){
    return -5;
  }
  // enable accelerometer and gyro
  if(writeRegister(PWR_MGMNT_2,SEN_ENABLE) < 0){
    return -6;
    2486:	f06f 0005 	mvn.w	r0, #5
    248a:	bd70      	pop	{r4, r5, r6, pc}
  }
  // setting accel range to 16G as default
  if(writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G) < 0){
    return -7;
    248c:	f06f 0006 	mvn.w	r0, #6
    2490:	bd70      	pop	{r4, r5, r6, pc}
  }
  _accelScale = G * 16.0f/32767.5f; // setting the accel scale to 16G
  _accelRange = ACCEL_RANGE_16G;
  // setting the gyro range to 2000DPS as default
  if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS) < 0){
    return -8;
    2492:	f06f 0007 	mvn.w	r0, #7
    2496:	bd70      	pop	{r4, r5, r6, pc}
  }
  _gyroScale = 2000.0f/32767.5f * _d2r; // setting the gyro scale to 2000DPS
  _gyroRange = GYRO_RANGE_2000DPS;
  // setting bandwidth to 184Hz as default
  if(writeRegister(ACCEL_CONFIG2,ACCEL_DLPF_184) < 0){ 
    return -9;
    2498:	f06f 0008 	mvn.w	r0, #8
    249c:	bd70      	pop	{r4, r5, r6, pc}
  } 
  if(writeRegister(CONFIG,GYRO_DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
    return -10;
    249e:	f06f 0009 	mvn.w	r0, #9
    24a2:	bd70      	pop	{r4, r5, r6, pc}
  }
  _bandwidth = DLPF_BANDWIDTH_184HZ;
  // setting the sample rate divider to 0 as default
  if(writeRegister(SMPDIV,0x00) < 0){ 
    return -11;
    24a4:	f06f 000a 	mvn.w	r0, #10
    24a8:	bd70      	pop	{r4, r5, r6, pc}
  } 
  _srd = 0;
  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
  	return -12;
    24aa:	f06f 000b 	mvn.w	r0, #11
    24ae:	bd70      	pop	{r4, r5, r6, pc}
  }
	// set the I2C bus speed to 400 kHz
	if( writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
		return -13;
    24b0:	f06f 000c 	mvn.w	r0, #12
    24b4:	bd70      	pop	{r4, r5, r6, pc}
    return -14;
	}
  /* get the magnetometer calibration */
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
    return -15;
    24b6:	f06f 000e 	mvn.w	r0, #14
    24ba:	bd70      	pop	{r4, r5, r6, pc}
  }
  delay(100); // long wait between AK8963 mode changes
  // set AK8963 to FUSE ROM access
  if(writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM) < 0){
    return -16;
    24bc:	f06f 000f 	mvn.w	r0, #15
    24c0:	bd70      	pop	{r4, r5, r6, pc}
  _magScaleX = ((((float)_buffer[0]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
  _magScaleY = ((((float)_buffer[1]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
  _magScaleZ = ((((float)_buffer[2]) - 128.0f)/(256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla 
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
    return -17;
    24c2:	f06f 0010 	mvn.w	r0, #16
    24c6:	bd70      	pop	{r4, r5, r6, pc}
  }
  delay(100); // long wait between AK8963 mode changes  
  // set AK8963 to 16 bit resolution, 100 Hz update rate
  if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
    return -18;
    24c8:	f06f 0011 	mvn.w	r0, #17
    24cc:	bd70      	pop	{r4, r5, r6, pc}
  }
  delay(100); // long wait between AK8963 mode changes
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
    return -19;
    24ce:	f06f 0012 	mvn.w	r0, #18
    24d2:	bd70      	pop	{r4, r5, r6, pc}
    24d4:	46ffff00 	.word	0x46ffff00
    24d8:	3d7a00fa 	.word	0x3d7a00fa
    24dc:	45998000 	.word	0x45998000
    24e0:	46fff000 	.word	0x46fff000

000024e4 <TinyGPS::TinyGPS()>:
#define _GNGNS_TERM   "GNGNS"
#define _GNGSA_TERM   "GNGSA"
#define _GPGSV_TERM   "GPGSV"
#define _GLGSV_TERM   "GLGSV"

TinyGPS::TinyGPS()
    24e4:	b470      	push	{r4, r5, r6}
  ,  _term_offset(0)
  ,  _gps_data_good(false)
#ifndef _GPS_NO_STATS
  ,  _encoded_characters(0)
  ,  _good_sentences(0)
  ,  _failed_checksum(0)
    24e6:	2200      	movs	r2, #0
    24e8:	f04f 34ff 	mov.w	r4, #4294967295
    24ec:	4912      	ldr	r1, [pc, #72]	; (2538 <TinyGPS::TinyGPS()+0x54>)
    24ee:	6004      	str	r4, [r0, #0]
    24f0:	26ff      	movs	r6, #255	; 0xff
    24f2:	2506      	movs	r5, #6
    24f4:	f8a0 6040 	strh.w	r6, [r0, #64]	; 0x40
    24f8:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    24fc:	6384      	str	r4, [r0, #56]	; 0x38
    24fe:	6444      	str	r4, [r0, #68]	; 0x44
    2500:	64c4      	str	r4, [r0, #76]	; 0x4c
    2502:	6082      	str	r2, [r0, #8]
    2504:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
    2508:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
    250c:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
    2510:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
    2514:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    2518:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
    251c:	f8a0 20dc 	strh.w	r2, [r0, #220]	; 0xdc
    2520:	f8a0 20de 	strh.w	r2, [r0, #222]	; 0xde
#endif
{
  _term[0] = '\0';
    2524:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
  ,  _term_offset(0)
  ,  _gps_data_good(false)
#ifndef _GPS_NO_STATS
  ,  _encoded_characters(0)
  ,  _good_sentences(0)
  ,  _failed_checksum(0)
    2528:	6101      	str	r1, [r0, #16]
    252a:	6181      	str	r1, [r0, #24]
    252c:	6201      	str	r1, [r0, #32]
    252e:	6281      	str	r1, [r0, #40]	; 0x28
    2530:	6301      	str	r1, [r0, #48]	; 0x30
#endif
{
  _term[0] = '\0';
}
    2532:	bc70      	pop	{r4, r5, r6}
    2534:	4770      	bx	lr
    2536:	bf00      	nop
    2538:	3b9ac9ff 	.word	0x3b9ac9ff

0000253c <Adafruit_INA219::wireWriteRegister(unsigned char, unsigned short)>:
 *  @param  reg
 *          register address
 *  @param  value
 *          value to write
 */
void Adafruit_INA219::wireWriteRegister(uint8_t reg, uint16_t value) {
    253c:	b570      	push	{r4, r5, r6, lr}
    253e:	4604      	mov	r4, r0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    2540:	7900      	ldrb	r0, [r0, #4]
  _i2c->beginTransmission(ina219_i2caddr);
    2542:	6823      	ldr	r3, [r4, #0]
		transmitting = 1;
    2544:	2501      	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    2546:	40a8      	lsls	r0, r5
		transmitting = 1;
    2548:	f883 505e 	strb.w	r5, [r3, #94]	; 0x5e
		txBufferLength = 1;
    254c:	f883 505d 	strb.w	r5, [r3, #93]	; 0x5d
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    2550:	f883 003b 	strb.w	r0, [r3, #59]	; 0x3b
  _i2c->write(reg);                 // Register
    2554:	6820      	ldr	r0, [r4, #0]
    2556:	6803      	ldr	r3, [r0, #0]
    2558:	681b      	ldr	r3, [r3, #0]
 *  @param  reg
 *          register address
 *  @param  value
 *          value to write
 */
void Adafruit_INA219::wireWriteRegister(uint8_t reg, uint16_t value) {
    255a:	4616      	mov	r6, r2
  _i2c->beginTransmission(ina219_i2caddr);
  _i2c->write(reg);                 // Register
    255c:	4798      	blx	r3
  _i2c->write((value >> 8) & 0xFF); // Upper 8-bits
    255e:	6820      	ldr	r0, [r4, #0]
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    2560:	6803      	ldr	r3, [r0, #0]
    2562:	0a31      	lsrs	r1, r6, #8
    2564:	681b      	ldr	r3, [r3, #0]
    2566:	4798      	blx	r3
  _i2c->write(value & 0xFF);        // Lower 8-bits
    2568:	6820      	ldr	r0, [r4, #0]
    256a:	6803      	ldr	r3, [r0, #0]
    256c:	b2f1      	uxtb	r1, r6
    256e:	681b      	ldr	r3, [r3, #0]
    2570:	4798      	blx	r3
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    2572:	4629      	mov	r1, r5
    2574:	6820      	ldr	r0, [r4, #0]
  _i2c->endTransmission();
}
    2576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    257a:	f7fe bad9 	b.w	b30 <TwoWire::endTransmission(unsigned char)>
    257e:	bf00      	nop

00002580 <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)>:
 *  @param  reg
 *          register address
 *  @param  *value
 *          read value
 */
void Adafruit_INA219::wireReadRegister(uint8_t reg, uint16_t *value) {
    2580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2582:	4604      	mov	r4, r0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    2584:	7900      	ldrb	r0, [r0, #4]

  _i2c->beginTransmission(ina219_i2caddr);
    2586:	6823      	ldr	r3, [r4, #0]
    2588:	4f25      	ldr	r7, [pc, #148]	; (2620 <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)+0xa0>)
		transmitting = 1;
    258a:	2501      	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    258c:	40a8      	lsls	r0, r5
		transmitting = 1;
    258e:	f883 505e 	strb.w	r5, [r3, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    2592:	f883 003b 	strb.w	r0, [r3, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    2596:	f883 505d 	strb.w	r5, [r3, #93]	; 0x5d
  _i2c->write(reg); // Register
    259a:	6820      	ldr	r0, [r4, #0]
    259c:	6803      	ldr	r3, [r0, #0]
    259e:	681b      	ldr	r3, [r3, #0]
 *  @param  reg
 *          register address
 *  @param  *value
 *          read value
 */
void Adafruit_INA219::wireReadRegister(uint8_t reg, uint16_t *value) {
    25a0:	4616      	mov	r6, r2

  _i2c->beginTransmission(ina219_i2caddr);
  _i2c->write(reg); // Register
    25a2:	4798      	blx	r3
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    25a4:	4629      	mov	r1, r5
    25a6:	6820      	ldr	r0, [r4, #0]
    25a8:	f7fe fac2 	bl	b30 <TwoWire::endTransmission(unsigned char)>
  _i2c->endTransmission();

  delay(1); // Max 12-bit conversion time is 586us per sample
    25ac:	4628      	mov	r0, r5
    25ae:	f000 fbcf 	bl	2d50 <delay>
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    25b2:	462b      	mov	r3, r5
    25b4:	2202      	movs	r2, #2
    25b6:	7921      	ldrb	r1, [r4, #4]
    25b8:	6820      	ldr	r0, [r4, #0]
    25ba:	f7fe fb43 	bl	c44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

  _i2c->requestFrom(ina219_i2caddr, (uint8_t)2);
  // Shift values to create properly formed integer
  *value = ((_i2c->read() << 8) | _i2c->read());
    25be:	6820      	ldr	r0, [r4, #0]
    25c0:	6803      	ldr	r3, [r0, #0]
    25c2:	695a      	ldr	r2, [r3, #20]
    25c4:	42ba      	cmp	r2, r7
    25c6:	d120      	bne.n	260a <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)+0x8a>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    25c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    25cc:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    25d0:	429a      	cmp	r2, r3
    25d2:	d922      	bls.n	261a <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)+0x9a>
		return rxBuffer[rxBufferIndex++];
    25d4:	195a      	adds	r2, r3, r5
    25d6:	4403      	add	r3, r0
    25d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    25dc:	7e1b      	ldrb	r3, [r3, #24]
    25de:	6820      	ldr	r0, [r4, #0]
    25e0:	6802      	ldr	r2, [r0, #0]
    25e2:	6952      	ldr	r2, [r2, #20]
    25e4:	021c      	lsls	r4, r3, #8
    25e6:	42ba      	cmp	r2, r7
    25e8:	b224      	sxth	r4, r4
    25ea:	d111      	bne.n	2610 <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)+0x90>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    25ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    25f0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    25f4:	429a      	cmp	r2, r3
    25f6:	d910      	bls.n	261a <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)+0x9a>
		return rxBuffer[rxBufferIndex++];
    25f8:	1c5a      	adds	r2, r3, #1
    25fa:	4403      	add	r3, r0
    25fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    2600:	7e18      	ldrb	r0, [r3, #24]
    2602:	4304      	orrs	r4, r0
    2604:	b2a4      	uxth	r4, r4
    2606:	8034      	strh	r4, [r6, #0]
}
    2608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  delay(1); // Max 12-bit conversion time is 586us per sample

  _i2c->requestFrom(ina219_i2caddr, (uint8_t)2);
  // Shift values to create properly formed integer
  *value = ((_i2c->read() << 8) | _i2c->read());
    260a:	4790      	blx	r2
    260c:	4603      	mov	r3, r0
    260e:	e7e6      	b.n	25de <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)+0x5e>
    2610:	4790      	blx	r2
    2612:	4320      	orrs	r0, r4
    2614:	b284      	uxth	r4, r0
    2616:	8034      	strh	r4, [r6, #0]
}
    2618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    261a:	f64f 74ff 	movw	r4, #65535	; 0xffff
    261e:	e7f2      	b.n	2606 <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)+0x86>
    2620:	00000739 	.word	0x00000739

00002624 <Adafruit_INA219::setCalibration_32V_2A()>:
 *          of current.  Each unit of current corresponds to 100uA, and
 *          each unit of power corresponds to 2mW. Counter overflow
 *          occurs at 3.2A.
 *  @note   These calculations assume a 0.1 ohm resistor is present
 */
void Adafruit_INA219::setCalibration_32V_2A() {
    2624:	b510      	push	{r4, lr}
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
    2626:	220a      	movs	r2, #10
    2628:	60c2      	str	r2, [r0, #12]
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
    262a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 4096 (0x1000)

  ina219_calValue = 4096;
    262e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 *          of current.  Each unit of current corresponds to 100uA, and
 *          each unit of power corresponds to 2mW. Counter overflow
 *          occurs at 3.2A.
 *  @note   These calculations assume a 0.1 ohm resistor is present
 */
void Adafruit_INA219::setCalibration_32V_2A() {
    2632:	4604      	mov	r4, r0

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 4096 (0x1000)

  ina219_calValue = 4096;
    2634:	6082      	str	r2, [r0, #8]
  // MaximumPower = 3.2 * 32V
  // MaximumPower = 102.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
  ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
    2636:	6103      	str	r3, [r0, #16]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
    2638:	2105      	movs	r1, #5
    263a:	f7ff ff7f 	bl	253c <Adafruit_INA219::wireWriteRegister(unsigned char, unsigned short)>
  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
    263e:	4620      	mov	r0, r4
    2640:	f643 129f 	movw	r2, #14751	; 0x399f
    2644:	2100      	movs	r1, #0
}
    2646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
    264a:	f7ff bf77 	b.w	253c <Adafruit_INA219::wireWriteRegister(unsigned char, unsigned short)>
    264e:	bf00      	nop

00002650 <Adafruit_INA219::Adafruit_INA219(unsigned char)>:

/*!
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
    2650:	b410      	push	{r4}
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
    2652:	2400      	movs	r4, #0
  ina219_powerMultiplier_mW = 0.0f;
    2654:	2200      	movs	r2, #0
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
  ina219_i2caddr = addr;
  ina219_currentDivider_mA = 0;
    2656:	60c4      	str	r4, [r0, #12]
/*!
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Adafruit_INA219::Adafruit_INA219(uint8_t addr) {
  ina219_i2caddr = addr;
    2658:	7101      	strb	r1, [r0, #4]
  ina219_currentDivider_mA = 0;
  ina219_powerMultiplier_mW = 0.0f;
    265a:	6102      	str	r2, [r0, #16]
}
    265c:	bc10      	pop	{r4}
    265e:	4770      	bx	lr

00002660 <Adafruit_INA219::begin(TwoWire*)>:

/*!
 *  @brief  Setups the HW (defaults to 32V and 2A for calibration values)
 *  @param theWire the TwoWire object to use
 */
void Adafruit_INA219::begin(TwoWire *theWire) {
    2660:	b510      	push	{r4, lr}
    2662:	4604      	mov	r4, r0
  _i2c = theWire;
    2664:	6001      	str	r1, [r0, #0]

/*!
 *  @brief  begin I2C and set up the hardware
 */
void Adafruit_INA219::init() {
  _i2c->begin();
    2666:	4608      	mov	r0, r1
    2668:	f7fe f8b6 	bl	7d8 <TwoWire::begin()>
  // Set chip to large range config values to start
  setCalibration_32V_2A();
    266c:	4620      	mov	r0, r4
 *  @param theWire the TwoWire object to use
 */
void Adafruit_INA219::begin(TwoWire *theWire) {
  _i2c = theWire;
  init();
}
    266e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 *  @brief  begin I2C and set up the hardware
 */
void Adafruit_INA219::init() {
  _i2c->begin();
  // Set chip to large range config values to start
  setCalibration_32V_2A();
    2672:	f7ff bfd7 	b.w	2624 <Adafruit_INA219::setCalibration_32V_2A()>
    2676:	bf00      	nop

00002678 <Adafruit_INA219::getCurrent_raw()>:

/*!
 *  @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 *  @return the raw current reading
 */
int16_t Adafruit_INA219::getCurrent_raw() {
    2678:	b510      	push	{r4, lr}

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
    267a:	8902      	ldrh	r2, [r0, #8]

/*!
 *  @brief  Gets the raw current value (16-bit signed integer, so +-32767)
 *  @return the raw current reading
 */
int16_t Adafruit_INA219::getCurrent_raw() {
    267c:	b082      	sub	sp, #8
    267e:	4604      	mov	r4, r0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
    2680:	2105      	movs	r1, #5
    2682:	f7ff ff5b 	bl	253c <Adafruit_INA219::wireWriteRegister(unsigned char, unsigned short)>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
    2686:	4620      	mov	r0, r4
    2688:	f10d 0206 	add.w	r2, sp, #6
    268c:	2104      	movs	r1, #4
    268e:	f7ff ff77 	bl	2580 <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)>

  return (int16_t)value;
}
    2692:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
    2696:	b002      	add	sp, #8
    2698:	bd10      	pop	{r4, pc}
    269a:	bf00      	nop

0000269c <Adafruit_INA219::getBusVoltage_V()>:

/*!
 *  @brief  Gets the shunt voltage in volts
 *  @return the bus voltage converted to volts
 */
float Adafruit_INA219::getBusVoltage_V() {
    269c:	b500      	push	{lr}
    269e:	b083      	sub	sp, #12
 *  @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
 *  @return the raw bus voltage reading
 */
int16_t Adafruit_INA219::getBusVoltage_raw() {
  uint16_t value;
  wireReadRegister(INA219_REG_BUSVOLTAGE, &value);
    26a0:	f10d 0206 	add.w	r2, sp, #6
    26a4:	2102      	movs	r1, #2
    26a6:	f7ff ff6b 	bl	2580 <Adafruit_INA219::wireReadRegister(unsigned char, unsigned short*)>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
    26aa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    26ae:	10c0      	asrs	r0, r0, #3
 *  @brief  Gets the shunt voltage in volts
 *  @return the bus voltage converted to volts
 */
float Adafruit_INA219::getBusVoltage_V() {
  int16_t value = getBusVoltage_raw();
  return value * 0.001;
    26b0:	0080      	lsls	r0, r0, #2
    26b2:	f002 ff51 	bl	5558 <__aeabi_i2f>
    26b6:	4903      	ldr	r1, [pc, #12]	; (26c4 <Adafruit_INA219::getBusVoltage_V()+0x28>)
    26b8:	f002 ffa2 	bl	5600 <__aeabi_fmul>
}
    26bc:	b003      	add	sp, #12
    26be:	f85d fb04 	ldr.w	pc, [sp], #4
    26c2:	bf00      	nop
    26c4:	3a83126f 	.word	0x3a83126f

000026c8 <Adafruit_INA219::getCurrent_mA()>:
/*!
 *  @brief  Gets the current value in mA, taking into account the
 *          config settings and current LSB
 *  @return the current reading convereted to milliamps
 */
float Adafruit_INA219::getCurrent_mA() {
    26c8:	b538      	push	{r3, r4, r5, lr}
    26ca:	4605      	mov	r5, r0
  float valueDec = getCurrent_raw();
    26cc:	f7ff ffd4 	bl	2678 <Adafruit_INA219::getCurrent_raw()>
    26d0:	f002 ff42 	bl	5558 <__aeabi_i2f>
    26d4:	4604      	mov	r4, r0
  valueDec /= ina219_currentDivider_mA;
  return valueDec;
    26d6:	68e8      	ldr	r0, [r5, #12]
    26d8:	f002 ff3a 	bl	5550 <__aeabi_ui2f>
    26dc:	4601      	mov	r1, r0
    26de:	4620      	mov	r0, r4
    26e0:	f003 f842 	bl	5768 <__aeabi_fdiv>
}
    26e4:	bd38      	pop	{r3, r4, r5, pc}
    26e6:	bf00      	nop

000026e8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26e8:	4807      	ldr	r0, [pc, #28]	; (2708 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    26ea:	b082      	sub	sp, #8
    26ec:	6803      	ldr	r3, [r0, #0]
    26ee:	9301      	str	r3, [sp, #4]
	return ret;
    26f0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    26f2:	4411      	add	r1, r2
    26f4:	e001      	b.n	26fa <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    26f6:	4299      	cmp	r1, r3
    26f8:	d304      	bcc.n	2704 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26fa:	6803      	ldr	r3, [r0, #0]
    26fc:	9300      	str	r3, [sp, #0]
	return ret;
    26fe:	9b00      	ldr	r3, [sp, #0]
    2700:	429a      	cmp	r2, r3
    2702:	d9f8      	bls.n	26f6 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    2704:	b002      	add	sp, #8
    2706:	4770      	bx	lr
    2708:	1fff9640 	.word	0x1fff9640

0000270c <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    270c:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    270e:	4a10      	ldr	r2, [pc, #64]	; (2750 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    2710:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    2712:	b9a1      	cbnz	r1, 273e <VisualMicroDebug::outPacketStart(bool)+0x32>
    2714:	6813      	ldr	r3, [r2, #0]
    2716:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    2718:	6841      	ldr	r1, [r0, #4]
	return ret;
    271a:	9b00      	ldr	r3, [sp, #0]
    271c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    271e:	2931      	cmp	r1, #49	; 0x31
    2720:	d80d      	bhi.n	273e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2722:	6813      	ldr	r3, [r2, #0]
    2724:	9302      	str	r3, [sp, #8]
	return ret;
    2726:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    2728:	f104 0332 	add.w	r3, r4, #50	; 0x32
    272c:	1a59      	subs	r1, r3, r1
    272e:	e001      	b.n	2734 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2730:	4299      	cmp	r1, r3
    2732:	d304      	bcc.n	273e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2734:	6813      	ldr	r3, [r2, #0]
    2736:	9301      	str	r3, [sp, #4]
	return ret;
    2738:	9b01      	ldr	r3, [sp, #4]
    273a:	429c      	cmp	r4, r3
    273c:	d9f8      	bls.n	2730 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    273e:	6813      	ldr	r3, [r2, #0]
    2740:	9303      	str	r3, [sp, #12]
	return ret;
    2742:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    2744:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    2746:	2001      	movs	r0, #1
    2748:	b005      	add	sp, #20
    274a:	bc10      	pop	{r4}
    274c:	4770      	bx	lr
    274e:	bf00      	nop
    2750:	1fff9640 	.word	0x1fff9640

00002754 <VisualMicroDebug::outPacketEnd()>:
    2754:	4770      	bx	lr
    2756:	bf00      	nop

00002758 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    2758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    275c:	f000 baf8 	b.w	2d50 <delay>

00002760 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    2760:	2300      	movs	r3, #0
    2762:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    2764:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    2766:	b171      	cbz	r1, 2786 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2768:	4807      	ldr	r0, [pc, #28]	; (2788 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    276a:	b082      	sub	sp, #8
    276c:	6803      	ldr	r3, [r0, #0]
    276e:	9301      	str	r3, [sp, #4]
	return ret;
    2770:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    2772:	4411      	add	r1, r2
    2774:	e001      	b.n	277a <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2776:	4299      	cmp	r1, r3
    2778:	d304      	bcc.n	2784 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    277a:	6803      	ldr	r3, [r0, #0]
    277c:	9300      	str	r3, [sp, #0]
	return ret;
    277e:	9b00      	ldr	r3, [sp, #0]
    2780:	429a      	cmp	r2, r3
    2782:	d9f8      	bls.n	2776 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    2784:	b002      	add	sp, #8
    2786:	4770      	bx	lr
    2788:	1fff9640 	.word	0x1fff9640

0000278c <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    278c:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    278e:	4c13      	ldr	r4, [pc, #76]	; (27dc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    2790:	b085      	sub	sp, #20
    2792:	6823      	ldr	r3, [r4, #0]
    2794:	9303      	str	r3, [sp, #12]
	return ret;
    2796:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    2798:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    279a:	460d      	mov	r5, r1
    279c:	4810      	ldr	r0, [pc, #64]	; (27e0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    279e:	2106      	movs	r1, #6
    27a0:	f001 fbba 	bl	3f18 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27a4:	2300      	movs	r3, #0
    27a6:	220a      	movs	r2, #10
    27a8:	4629      	mov	r1, r5
    27aa:	480e      	ldr	r0, [pc, #56]	; (27e4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    27ac:	f001 fdbc 	bl	4328 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    27b0:	2106      	movs	r1, #6
    27b2:	480d      	ldr	r0, [pc, #52]	; (27e8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    27b4:	f001 fbb0 	bl	3f18 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    27b8:	480a      	ldr	r0, [pc, #40]	; (27e4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    27ba:	f001 fda5 	bl	4308 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27be:	6823      	ldr	r3, [r4, #0]
    27c0:	9302      	str	r3, [sp, #8]
	return ret;
    27c2:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    27c4:	f102 0132 	add.w	r1, r2, #50	; 0x32
    27c8:	e001      	b.n	27ce <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    27ca:	4299      	cmp	r1, r3
    27cc:	d304      	bcc.n	27d8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27ce:	6823      	ldr	r3, [r4, #0]
    27d0:	9301      	str	r3, [sp, #4]
	return ret;
    27d2:	9b01      	ldr	r3, [sp, #4]
    27d4:	429a      	cmp	r2, r3
    27d6:	d9f8      	bls.n	27ca <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    27d8:	b005      	add	sp, #20
    27da:	bd30      	pop	{r4, r5, pc}
    27dc:	1fff9640 	.word	0x1fff9640
    27e0:	0000645c 	.word	0x0000645c
    27e4:	1fff89f4 	.word	0x1fff89f4
    27e8:	00006464 	.word	0x00006464

000027ec <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    27ec:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    27ee:	7e03      	ldrb	r3, [r0, #24]
    27f0:	b90b      	cbnz	r3, 27f6 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    27f2:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    27f4:	bd38      	pop	{r3, r4, r5, pc}
    27f6:	460d      	mov	r5, r1
    27f8:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    27fa:	f001 fb63 	bl	3ec4 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    27fe:	f010 0fff 	tst.w	r0, #255	; 0xff
    2802:	d101      	bne.n	2808 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    2804:	2065      	movs	r0, #101	; 0x65
    2806:	bd38      	pop	{r3, r4, r5, pc}
    2808:	f001 fb5c 	bl	3ec4 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    280c:	f010 0fff 	tst.w	r0, #255	; 0xff
    2810:	d0f8      	beq.n	2804 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    2812:	f001 fb1b 	bl	3e4c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    2816:	b2c0      	uxtb	r0, r0
    2818:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    281c:	2b1e      	cmp	r3, #30
    281e:	d8f3      	bhi.n	2808 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    2820:	a201      	add	r2, pc, #4	; (adr r2, 2828 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    2822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2826:	bf00      	nop
    2828:	000028b1 	.word	0x000028b1
    282c:	00002809 	.word	0x00002809
    2830:	00002809 	.word	0x00002809
    2834:	00002809 	.word	0x00002809
    2838:	00002809 	.word	0x00002809
    283c:	00002809 	.word	0x00002809
    2840:	00002809 	.word	0x00002809
    2844:	00002809 	.word	0x00002809
    2848:	00002809 	.word	0x00002809
    284c:	00002809 	.word	0x00002809
    2850:	00002809 	.word	0x00002809
    2854:	000028a5 	.word	0x000028a5
    2858:	00002809 	.word	0x00002809
    285c:	00002809 	.word	0x00002809
    2860:	00002809 	.word	0x00002809
    2864:	00002809 	.word	0x00002809
    2868:	000027f3 	.word	0x000027f3
    286c:	00002809 	.word	0x00002809
    2870:	00002809 	.word	0x00002809
    2874:	00002809 	.word	0x00002809
    2878:	00002809 	.word	0x00002809
    287c:	00002809 	.word	0x00002809
    2880:	00002809 	.word	0x00002809
    2884:	00002809 	.word	0x00002809
    2888:	00002809 	.word	0x00002809
    288c:	000027f3 	.word	0x000027f3
    2890:	00002809 	.word	0x00002809
    2894:	00002809 	.word	0x00002809
    2898:	00002809 	.word	0x00002809
    289c:	00002809 	.word	0x00002809
    28a0:	000027f5 	.word	0x000027f5
		{

		case 'c':
			sendContinuedACK(breakPointId);
    28a4:	4620      	mov	r0, r4
    28a6:	4629      	mov	r1, r5
    28a8:	f7ff ff70 	bl	278c <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    28ac:	2063      	movs	r0, #99	; 0x63
    28ae:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    28b0:	2300      	movs	r3, #0
    28b2:	7623      	strb	r3, [r4, #24]
			return 'c';
    28b4:	2063      	movs	r0, #99	; 0x63
    28b6:	bd38      	pop	{r3, r4, r5, pc}

000028b8 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    28b8:	b570      	push	{r4, r5, r6, lr}
    28ba:	4605      	mov	r5, r0
    28bc:	b082      	sub	sp, #8
    28be:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    28c0:	b1c9      	cbz	r1, 28f6 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    28c2:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28c4:	4c0d      	ldr	r4, [pc, #52]	; (28fc <VisualMicroDebug::start(bool, bool)+0x44>)
    28c6:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    28c8:	2100      	movs	r1, #0
    28ca:	4628      	mov	r0, r5
    28cc:	f7ff ff8e 	bl	27ec <VisualMicroDebug::breakWait(unsigned char)>
    28d0:	2863      	cmp	r0, #99	; 0x63
    28d2:	d010      	beq.n	28f6 <VisualMicroDebug::start(bool, bool)+0x3e>
    28d4:	6823      	ldr	r3, [r4, #0]
    28d6:	9301      	str	r3, [sp, #4]
	return ret;
    28d8:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    28da:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28dc:	6823      	ldr	r3, [r4, #0]
    28de:	9300      	str	r3, [sp, #0]
	return ret;
    28e0:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    28e2:	429a      	cmp	r2, r3
    28e4:	d8f0      	bhi.n	28c8 <VisualMicroDebug::start(bool, bool)+0x10>
    28e6:	4299      	cmp	r1, r3
    28e8:	d2f8      	bcs.n	28dc <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    28ea:	2100      	movs	r1, #0
    28ec:	4628      	mov	r0, r5
    28ee:	f7ff ff7d 	bl	27ec <VisualMicroDebug::breakWait(unsigned char)>
    28f2:	2863      	cmp	r0, #99	; 0x63
    28f4:	d1ee      	bne.n	28d4 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    28f6:	762e      	strb	r6, [r5, #24]
#endif

}
    28f8:	b002      	add	sp, #8
    28fa:	bd70      	pop	{r4, r5, r6, pc}
    28fc:	1fff9640 	.word	0x1fff9640

00002900 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    2900:	4b03      	ldr	r3, [pc, #12]	; (2910 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    2902:	2200      	movs	r2, #0
    2904:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    2906:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    2908:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    290a:	615a      	str	r2, [r3, #20]
    290c:	4770      	bx	lr
    290e:	bf00      	nop
    2910:	1fff95f8 	.word	0x1fff95f8

00002914 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2914:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2916:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    291a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    291e:	d16d      	bne.n	29fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2920:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2922:	d341      	bcc.n	29a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2924:	f851 3b04 	ldr.w	r3, [r1], #4
    2928:	f840 3b04 	str.w	r3, [r0], #4
    292c:	f851 3b04 	ldr.w	r3, [r1], #4
    2930:	f840 3b04 	str.w	r3, [r0], #4
    2934:	f851 3b04 	ldr.w	r3, [r1], #4
    2938:	f840 3b04 	str.w	r3, [r0], #4
    293c:	f851 3b04 	ldr.w	r3, [r1], #4
    2940:	f840 3b04 	str.w	r3, [r0], #4
    2944:	f851 3b04 	ldr.w	r3, [r1], #4
    2948:	f840 3b04 	str.w	r3, [r0], #4
    294c:	f851 3b04 	ldr.w	r3, [r1], #4
    2950:	f840 3b04 	str.w	r3, [r0], #4
    2954:	f851 3b04 	ldr.w	r3, [r1], #4
    2958:	f840 3b04 	str.w	r3, [r0], #4
    295c:	f851 3b04 	ldr.w	r3, [r1], #4
    2960:	f840 3b04 	str.w	r3, [r0], #4
    2964:	f851 3b04 	ldr.w	r3, [r1], #4
    2968:	f840 3b04 	str.w	r3, [r0], #4
    296c:	f851 3b04 	ldr.w	r3, [r1], #4
    2970:	f840 3b04 	str.w	r3, [r0], #4
    2974:	f851 3b04 	ldr.w	r3, [r1], #4
    2978:	f840 3b04 	str.w	r3, [r0], #4
    297c:	f851 3b04 	ldr.w	r3, [r1], #4
    2980:	f840 3b04 	str.w	r3, [r0], #4
    2984:	f851 3b04 	ldr.w	r3, [r1], #4
    2988:	f840 3b04 	str.w	r3, [r0], #4
    298c:	f851 3b04 	ldr.w	r3, [r1], #4
    2990:	f840 3b04 	str.w	r3, [r0], #4
    2994:	f851 3b04 	ldr.w	r3, [r1], #4
    2998:	f840 3b04 	str.w	r3, [r0], #4
    299c:	f851 3b04 	ldr.w	r3, [r1], #4
    29a0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    29a4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    29a6:	d2bd      	bcs.n	2924 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    29a8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    29aa:	d311      	bcc.n	29d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    29ac:	f851 3b04 	ldr.w	r3, [r1], #4
    29b0:	f840 3b04 	str.w	r3, [r0], #4
    29b4:	f851 3b04 	ldr.w	r3, [r1], #4
    29b8:	f840 3b04 	str.w	r3, [r0], #4
    29bc:	f851 3b04 	ldr.w	r3, [r1], #4
    29c0:	f840 3b04 	str.w	r3, [r0], #4
    29c4:	f851 3b04 	ldr.w	r3, [r1], #4
    29c8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    29cc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    29ce:	d2ed      	bcs.n	29ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    29d0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    29d2:	d305      	bcc.n	29e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    29d4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    29d8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    29dc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    29de:	d2f9      	bcs.n	29d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    29e0:	3204      	adds	r2, #4
	beq	.Ldone
    29e2:	d008      	beq.n	29f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    29e4:	07d2      	lsls	r2, r2, #31
	itt ne
    29e6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    29e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    29ec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    29f0:	d301      	bcc.n	29f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    29f2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    29f4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    29f6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    29f8:	4770      	bx	lr
    29fa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    29fc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    29fe:	d313      	bcc.n	2a28 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2a00:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2a02:	d08d      	beq.n	2920 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2a04:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2a08:	d08a      	beq.n	2920 <memcpy+0xc>

	rsb	r3, #4
    2a0a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2a0e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2a10:	07db      	lsls	r3, r3, #31
	itt ne
    2a12:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2a14:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2a18:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2a1c:	d380      	bcc.n	2920 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2a1e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2a22:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2a26:	e77b      	b.n	2920 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2a28:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2a2a:	d3d9      	bcc.n	29e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2a2c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2a32:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2a36:	d2f9      	bcs.n	2a2c <memcpy+0x118>

	ldrb	r3, [r1]
    2a38:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2a3a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2a3c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2a3e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2a40:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2a42:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2a44:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2a46:	4770      	bx	lr

00002a48 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2a48:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2a4a:	4c10      	ldr	r4, [pc, #64]	; (2a8c <fault_isr+0x44>)
    2a4c:	e008      	b.n	2a60 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2a4e:	6823      	ldr	r3, [r4, #0]
    2a50:	0559      	lsls	r1, r3, #21
    2a52:	d40d      	bmi.n	2a70 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2a54:	6823      	ldr	r3, [r4, #0]
    2a56:	051a      	lsls	r2, r3, #20
    2a58:	d40f      	bmi.n	2a7a <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2a5a:	6823      	ldr	r3, [r4, #0]
    2a5c:	04db      	lsls	r3, r3, #19
    2a5e:	d411      	bmi.n	2a84 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2a60:	6823      	ldr	r3, [r4, #0]
    2a62:	0358      	lsls	r0, r3, #13
    2a64:	d5f3      	bpl.n	2a4e <fault_isr+0x6>
    2a66:	f000 fbd7 	bl	3218 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2a6a:	6823      	ldr	r3, [r4, #0]
    2a6c:	0559      	lsls	r1, r3, #21
    2a6e:	d5f1      	bpl.n	2a54 <fault_isr+0xc>
    2a70:	f001 fe7c 	bl	476c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2a74:	6823      	ldr	r3, [r4, #0]
    2a76:	051a      	lsls	r2, r3, #20
    2a78:	d5ef      	bpl.n	2a5a <fault_isr+0x12>
    2a7a:	f001 ff0d 	bl	4898 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2a7e:	6823      	ldr	r3, [r4, #0]
    2a80:	04db      	lsls	r3, r3, #19
    2a82:	d5ed      	bpl.n	2a60 <fault_isr+0x18>
    2a84:	f000 fa82 	bl	2f8c <uart2_status_isr>
    2a88:	e7ea      	b.n	2a60 <fault_isr+0x18>
    2a8a:	bf00      	nop
    2a8c:	40048034 	.word	0x40048034

00002a90 <unused_isr>:
	}
}

void unused_isr(void)
{
    2a90:	b508      	push	{r3, lr}
	fault_isr();
    2a92:	f7ff ffd9 	bl	2a48 <fault_isr>
    2a96:	bf00      	nop

00002a98 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2a98:	4b01      	ldr	r3, [pc, #4]	; (2aa0 <startup_early_hook+0x8>)
    2a9a:	2210      	movs	r2, #16
    2a9c:	801a      	strh	r2, [r3, #0]
    2a9e:	4770      	bx	lr
    2aa0:	40052000 	.word	0x40052000

00002aa4 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2aa4:	4770      	bx	lr
    2aa6:	bf00      	nop

00002aa8 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    2aa8:	4909      	ldr	r1, [pc, #36]	; (2ad0 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2aaa:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    2aac:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    2aae:	b130      	cbz	r0, 2abe <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2ab0:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    2ab2:	4418      	add	r0, r3
    2ab4:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
    2ab8:	4290      	cmp	r0, r2
    2aba:	d202      	bcs.n	2ac2 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    2abc:	6008      	str	r0, [r1, #0]
	}
	return prev;
    2abe:	4618      	mov	r0, r3
}
    2ac0:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    2ac2:	f002 feed 	bl	58a0 <__errno>
    2ac6:	230c      	movs	r3, #12
    2ac8:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    2aca:	f04f 30ff 	mov.w	r0, #4294967295
    2ace:	bd08      	pop	{r3, pc}
    2ad0:	1fff890c 	.word	0x1fff890c

00002ad4 <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    2ad4:	4770      	bx	lr
    2ad6:	bf00      	nop

00002ad8 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2ad8:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2ada:	4b0f      	ldr	r3, [pc, #60]	; (2b18 <digitalWrite.part.1+0x40>)
    2adc:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    2ae0:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    2ae4:	b12c      	cbz	r4, 2af2 <digitalWrite.part.1+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    2ae6:	2301      	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2ae8:	b169      	cbz	r1, 2b06 <digitalWrite.part.1+0x2e>
			*portSetRegister(pin) = 1;
    2aea:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2aee:	bc10      	pop	{r4}
    2af0:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2af2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2af6:	685b      	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2af8:	681a      	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2afa:	b941      	cbnz	r1, 2b0e <digitalWrite.part.1+0x36>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2afc:	f022 0202 	bic.w	r2, r2, #2
    2b00:	601a      	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2b02:	bc10      	pop	{r4}
    2b04:	4770      	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2b06:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2b0a:	bc10      	pop	{r4}
    2b0c:	4770      	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2b0e:	f042 0203 	orr.w	r2, r2, #3
    2b12:	601a      	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2b14:	bc10      	pop	{r4}
    2b16:	4770      	bx	lr
    2b18:	000064b4 	.word	0x000064b4

00002b1c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2b1c:	4a1c      	ldr	r2, [pc, #112]	; (2b90 <pinMode.part.2+0x74>)
    2b1e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2b22:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2b24:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2b26:	d011      	beq.n	2b4c <pinMode.part.2+0x30>
    2b28:	2904      	cmp	r1, #4
    2b2a:	d01b      	beq.n	2b64 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2b2c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    2b30:	2200      	movs	r2, #0
    2b32:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2b36:	b129      	cbz	r1, 2b44 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2b38:	2902      	cmp	r1, #2
    2b3a:	d020      	beq.n	2b7e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2b3c:	2903      	cmp	r1, #3
    2b3e:	d022      	beq.n	2b86 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2b40:	601a      	str	r2, [r3, #0]
    2b42:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2b44:	f44f 7280 	mov.w	r2, #256	; 0x100
    2b48:	601a      	str	r2, [r3, #0]
    2b4a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2b4c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b50:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2b54:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b58:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2b5a:	681a      	ldr	r2, [r3, #0]
    2b5c:	f022 0220 	bic.w	r2, r2, #32
    2b60:	601a      	str	r2, [r3, #0]
    2b62:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2b64:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b68:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2b6c:	2001      	movs	r0, #1
    2b6e:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b72:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2b74:	681a      	ldr	r2, [r3, #0]
    2b76:	f042 0220 	orr.w	r2, r2, #32
    2b7a:	601a      	str	r2, [r3, #0]
    2b7c:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2b7e:	f240 1203 	movw	r2, #259	; 0x103
    2b82:	601a      	str	r2, [r3, #0]
    2b84:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2b86:	f44f 7281 	mov.w	r2, #258	; 0x102
    2b8a:	601a      	str	r2, [r3, #0]
    2b8c:	4770      	bx	lr
    2b8e:	bf00      	nop
    2b90:	000064b4 	.word	0x000064b4

00002b94 <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    2b94:	2821      	cmp	r0, #33	; 0x21
    2b96:	d848      	bhi.n	2c2a <attachInterrupt+0x96>
{
	_VectorsRam[irq + 16] = function;
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    2b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    2b9a:	2a04      	cmp	r2, #4
    2b9c:	d844      	bhi.n	2c28 <attachInterrupt+0x94>
    2b9e:	e8df f002 	tbb	[pc, r2]
    2ba2:	4b48      	.short	0x4b48
    2ba4:	034e      	.short	0x034e
    2ba6:	45          	.byte	0x45
    2ba7:	00          	.byte	0x00
    2ba8:	f44f 2610 	mov.w	r6, #589824	; 0x90000
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    2bac:	4b2b      	ldr	r3, [pc, #172]	; (2c5c <attachInterrupt+0xc8>)
    2bae:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2bb2:	460d      	mov	r5, r1
    2bb4:	685c      	ldr	r4, [r3, #4]
	if ((*config & 0x00000700) == 0) {
    2bb6:	6821      	ldr	r1, [r4, #0]
    2bb8:	f411 61e0 	ands.w	r1, r1, #1792	; 0x700
    2bbc:	d048      	beq.n	2c50 <attachInterrupt+0xbc>
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    2bbe:	4b28      	ldr	r3, [pc, #160]	; (2c60 <attachInterrupt+0xcc>)
    2bc0:	4a28      	ldr	r2, [pc, #160]	; (2c64 <attachInterrupt+0xd0>)
    2bc2:	4929      	ldr	r1, [pc, #164]	; (2c68 <attachInterrupt+0xd4>)
    2bc4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2bc8:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    2bcc:	4827      	ldr	r0, [pc, #156]	; (2c6c <attachInterrupt+0xd8>)
    2bce:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2bd2:	f5a2 2192 	sub.w	r1, r2, #299008	; 0x49000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    2bd6:	4f26      	ldr	r7, [pc, #152]	; (2c70 <attachInterrupt+0xdc>)
    2bd8:	f8c3 01a0 	str.w	r0, [r3, #416]	; 0x1a0

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2bdc:	297c      	cmp	r1, #124	; 0x7c
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    2bde:	4825      	ldr	r0, [pc, #148]	; (2c74 <attachInterrupt+0xe0>)
    2be0:	f8c3 71a8 	str.w	r7, [r3, #424]	; 0x1a8
    2be4:	f8c3 01ac 	str.w	r0, [r3, #428]	; 0x1ac

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2be8:	d92c      	bls.n	2c44 <attachInterrupt+0xb0>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    2bea:	f5a2 2394 	sub.w	r3, r2, #303104	; 0x4a000
    2bee:	2b7c      	cmp	r3, #124	; 0x7c
    2bf0:	d92a      	bls.n	2c48 <attachInterrupt+0xb4>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    2bf2:	f5a2 2396 	sub.w	r3, r2, #307200	; 0x4b000
    2bf6:	2b7c      	cmp	r3, #124	; 0x7c
    2bf8:	d928      	bls.n	2c4c <attachInterrupt+0xb8>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    2bfa:	f5a2 2398 	sub.w	r3, r2, #311296	; 0x4c000
    2bfe:	2b7c      	cmp	r3, #124	; 0x7c
    2c00:	d929      	bls.n	2c56 <attachInterrupt+0xc2>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    2c02:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    2c06:	2a7c      	cmp	r2, #124	; 0x7c
    2c08:	d827      	bhi.n	2c5a <attachInterrupt+0xc6>
    2c0a:	481b      	ldr	r0, [pc, #108]	; (2c78 <attachInterrupt+0xe4>)
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    2c0c:	b672      	cpsid	i
	cfg = *config;
    2c0e:	6823      	ldr	r3, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    2c10:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2c14:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
	*config = cfg;
	isr_table[pin_index] = function;	// set the function pointer
    2c18:	f3c4 0184 	ubfx	r1, r4, #2, #5
	cfg |= mask;
    2c1c:	4316      	orrs	r6, r2
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
    2c1e:	6023      	str	r3, [r4, #0]
	isr_table[pin_index] = function;	// set the function pointer
    2c20:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    2c24:	6026      	str	r6, [r4, #0]
	__enable_irq();
    2c26:	b662      	cpsie	i
    2c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c2a:	4770      	bx	lr
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    2c2c:	f44f 2630 	mov.w	r6, #720896	; 0xb0000
    2c30:	e7bc      	b.n	2bac <attachInterrupt+0x18>
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
    2c32:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    2c36:	e7b9      	b.n	2bac <attachInterrupt+0x18>
	  case HIGH:	mask = 0x0C; break;
    2c38:	f44f 2640 	mov.w	r6, #786432	; 0xc0000
    2c3c:	e7b6      	b.n	2bac <attachInterrupt+0x18>
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    2c3e:	f44f 2620 	mov.w	r6, #655360	; 0xa0000
    2c42:	e7b3      	b.n	2bac <attachInterrupt+0x18>

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2c44:	480d      	ldr	r0, [pc, #52]	; (2c7c <attachInterrupt+0xe8>)
    2c46:	e7e1      	b.n	2c0c <attachInterrupt+0x78>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    2c48:	480d      	ldr	r0, [pc, #52]	; (2c80 <attachInterrupt+0xec>)
    2c4a:	e7df      	b.n	2c0c <attachInterrupt+0x78>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    2c4c:	480d      	ldr	r0, [pc, #52]	; (2c84 <attachInterrupt+0xf0>)
    2c4e:	e7dd      	b.n	2c0c <attachInterrupt+0x78>
    2c50:	f7ff ff64 	bl	2b1c <pinMode.part.2>
    2c54:	e7b3      	b.n	2bbe <attachInterrupt+0x2a>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    2c56:	480c      	ldr	r0, [pc, #48]	; (2c88 <attachInterrupt+0xf4>)
    2c58:	e7d8      	b.n	2c0c <attachInterrupt+0x78>
    2c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c5c:	000064b4 	.word	0x000064b4
    2c60:	1fff8200 	.word	0x1fff8200
    2c64:	1fff87d1 	.word	0x1fff87d1
    2c68:	1fff8779 	.word	0x1fff8779
    2c6c:	1fff87a5 	.word	0x1fff87a5
    2c70:	1fff874d 	.word	0x1fff874d
    2c74:	1fff8721 	.word	0x1fff8721
    2c78:	1fff89e8 	.word	0x1fff89e8
    2c7c:	1fff8910 	.word	0x1fff8910
    2c80:	1fff8948 	.word	0x1fff8948
    2c84:	1fff8998 	.word	0x1fff8998
    2c88:	1fff89c8 	.word	0x1fff89c8

00002c8c <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    2c8c:	4b1a      	ldr	r3, [pc, #104]	; (2cf8 <detachInterrupt+0x6c>)
    2c8e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	__enable_irq();
#endif
}

void detachInterrupt(uint8_t pin)
{
    2c92:	b410      	push	{r4}
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    2c94:	6842      	ldr	r2, [r0, #4]

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2c96:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
    2c9a:	f5a3 2192 	sub.w	r1, r3, #299008	; 0x49000
    2c9e:	297c      	cmp	r1, #124	; 0x7c
    2ca0:	d923      	bls.n	2cea <detachInterrupt+0x5e>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    2ca2:	f5a3 2194 	sub.w	r1, r3, #303104	; 0x4a000
    2ca6:	297c      	cmp	r1, #124	; 0x7c
    2ca8:	d90d      	bls.n	2cc6 <detachInterrupt+0x3a>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    2caa:	f5a3 2196 	sub.w	r1, r3, #307200	; 0x4b000
    2cae:	297c      	cmp	r1, #124	; 0x7c
    2cb0:	d91f      	bls.n	2cf2 <detachInterrupt+0x66>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    2cb2:	f5a3 2198 	sub.w	r1, r3, #311296	; 0x4c000
    2cb6:	297c      	cmp	r1, #124	; 0x7c
    2cb8:	d919      	bls.n	2cee <detachInterrupt+0x62>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    2cba:	f5a3 239a 	sub.w	r3, r3, #315392	; 0x4d000
    2cbe:	2b7c      	cmp	r3, #124	; 0x7c
    2cc0:	d811      	bhi.n	2ce6 <detachInterrupt+0x5a>
    2cc2:	4c0e      	ldr	r4, [pc, #56]	; (2cfc <detachInterrupt+0x70>)
    2cc4:	e000      	b.n	2cc8 <detachInterrupt+0x3c>
// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    2cc6:	4c0e      	ldr	r4, [pc, #56]	; (2d00 <detachInterrupt+0x74>)
	config = portConfigRegister(pin);
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    2cc8:	b672      	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    2cca:	6813      	ldr	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    2ccc:	480d      	ldr	r0, [pc, #52]	; (2d04 <detachInterrupt+0x78>)
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    2cce:	f023 7387 	bic.w	r3, r3, #17694720	; 0x10e0000
	isr_table[pin_index] = dummy_isr;
    2cd2:	f3c2 0184 	ubfx	r1, r2, #2, #5
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    2cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2cde:	6013      	str	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    2ce0:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
	__enable_irq();
    2ce4:	b662      	cpsie	i
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
	intFunc[pin] = dummy_isr;
	__enable_irq();
#endif
}
    2ce6:	bc10      	pop	{r4}
    2ce8:	4770      	bx	lr

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2cea:	4c07      	ldr	r4, [pc, #28]	; (2d08 <detachInterrupt+0x7c>)
    2cec:	e7ec      	b.n	2cc8 <detachInterrupt+0x3c>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    2cee:	4c07      	ldr	r4, [pc, #28]	; (2d0c <detachInterrupt+0x80>)
    2cf0:	e7ea      	b.n	2cc8 <detachInterrupt+0x3c>
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    2cf2:	4c07      	ldr	r4, [pc, #28]	; (2d10 <detachInterrupt+0x84>)
    2cf4:	e7e8      	b.n	2cc8 <detachInterrupt+0x3c>
    2cf6:	bf00      	nop
    2cf8:	000064b4 	.word	0x000064b4
    2cfc:	1fff89e8 	.word	0x1fff89e8
    2d00:	1fff8948 	.word	0x1fff8948
    2d04:	00002ad5 	.word	0x00002ad5
    2d08:	1fff8910 	.word	0x1fff8910
    2d0c:	1fff89c8 	.word	0x1fff89c8
    2d10:	1fff8998 	.word	0x1fff8998

00002d14 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2d14:	b430      	push	{r4, r5}
	RTC_SR = 0;
    2d16:	4b05      	ldr	r3, [pc, #20]	; (2d2c <rtc_set+0x18>)
	RTC_TPR = 0;
    2d18:	4d05      	ldr	r5, [pc, #20]	; (2d30 <rtc_set+0x1c>)
	RTC_TSR = t;
    2d1a:	4c06      	ldr	r4, [pc, #24]	; (2d34 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2d1c:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2d1e:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2d20:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    2d22:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    2d24:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2d26:	6019      	str	r1, [r3, #0]
}
    2d28:	bc30      	pop	{r4, r5}
    2d2a:	4770      	bx	lr
    2d2c:	4003d014 	.word	0x4003d014
    2d30:	4003d004 	.word	0x4003d004
    2d34:	4003d000 	.word	0x4003d000

00002d38 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2d38:	2821      	cmp	r0, #33	; 0x21
    2d3a:	d801      	bhi.n	2d40 <digitalWrite+0x8>
    2d3c:	f7ff becc 	b.w	2ad8 <digitalWrite.part.1>
    2d40:	4770      	bx	lr
    2d42:	bf00      	nop

00002d44 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2d44:	2821      	cmp	r0, #33	; 0x21
    2d46:	d801      	bhi.n	2d4c <pinMode+0x8>
    2d48:	f7ff bee8 	b.w	2b1c <pinMode.part.2>
    2d4c:	4770      	bx	lr
    2d4e:	bf00      	nop

00002d50 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d54:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2d56:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2d58:	4f20      	ldr	r7, [pc, #128]	; (2ddc <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d5a:	4b21      	ldr	r3, [pc, #132]	; (2de0 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d5c:	4a21      	ldr	r2, [pc, #132]	; (2de4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d5e:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2d60:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d62:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    2d64:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d66:	0152      	lsls	r2, r2, #5
    2d68:	d502      	bpl.n	2d70 <delay+0x20>
    2d6a:	2b32      	cmp	r3, #50	; 0x32
    2d6c:	bf88      	it	hi
    2d6e:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2d70:	b395      	cbz	r5, 2dd8 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2d72:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    2d76:	4e1c      	ldr	r6, [pc, #112]	; (2de8 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d78:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2de0 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d7c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2de4 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2d80:	33ff      	adds	r3, #255	; 0xff
    2d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2d86:	fba6 1303 	umull	r1, r3, r6, r3
    2d8a:	fb02 f404 	mul.w	r4, r2, r4
    2d8e:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2d92:	b672      	cpsid	i
	current = SYST_CVR;
    2d94:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    2d98:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d9a:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    2d9e:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2da0:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    2da4:	33ff      	adds	r3, #255	; 0xff
    2da6:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2daa:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2dae:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    2db2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2db6:	d002      	beq.n	2dbe <delay+0x6e>
    2db8:	2932      	cmp	r1, #50	; 0x32
    2dba:	bf88      	it	hi
    2dbc:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2dbe:	fb00 3302 	mla	r3, r0, r2, r3
    2dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    2dc6:	d304      	bcc.n	2dd2 <delay+0x82>
				ms--;
				if (ms == 0) return;
    2dc8:	3d01      	subs	r5, #1
    2dca:	d005      	beq.n	2dd8 <delay+0x88>
				start += 1000;
    2dcc:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    2dd0:	e7df      	b.n	2d92 <delay+0x42>
			}
			yield();
    2dd2:	f001 fbd7 	bl	4584 <yield>
		}
    2dd6:	e7dc      	b.n	2d92 <delay+0x42>
    2dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ddc:	1fff9640 	.word	0x1fff9640
    2de0:	e000e018 	.word	0xe000e018
    2de4:	e000ed04 	.word	0xe000ed04
    2de8:	aaaaaaab 	.word	0xaaaaaaab

00002dec <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2dee:	4b2d      	ldr	r3, [pc, #180]	; (2ea4 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2df0:	492d      	ldr	r1, [pc, #180]	; (2ea8 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2df2:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 2ec4 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2df6:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 2ec8 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2dfa:	4e2c      	ldr	r6, [pc, #176]	; (2eac <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2dfc:	4d2c      	ldr	r5, [pc, #176]	; (2eb0 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    2dfe:	4c2d      	ldr	r4, [pc, #180]	; (2eb4 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2e00:	4a2d      	ldr	r2, [pc, #180]	; (2eb8 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2e02:	4f2e      	ldr	r7, [pc, #184]	; (2ebc <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2e04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2e08:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2e0a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2e0e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2e10:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    2e14:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2e16:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    2e1a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2e1c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    2e20:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2e22:	2000      	movs	r0, #0
    2e24:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2e26:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2e28:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    2e2c:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2e30:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2e34:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    2e36:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    2e38:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    2e3a:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    2e3c:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2e3e:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    2e40:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e42:	2209      	movs	r2, #9
    2e44:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    2e48:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    2e4c:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e50:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e54:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    2e58:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    2e5c:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    2e60:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e62:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e66:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2e6a:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    2e6e:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e72:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e74:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e78:	4811      	ldr	r0, [pc, #68]	; (2ec0 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e7a:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    2e7c:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    2e80:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2e84:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    2e86:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e88:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    2e8a:	f001 fbc9 	bl	4620 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    2e8e:	2019      	movs	r0, #25
    2e90:	f7ff ff5e 	bl	2d50 <delay>
	usb_init();
    2e94:	f000 ff28 	bl	3ce8 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    2e98:	f240 1013 	movw	r0, #275	; 0x113
}
    2e9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    2ea0:	f7ff bf56 	b.w	2d50 <delay>
    2ea4:	e000e108 	.word	0xe000e108
    2ea8:	40038004 	.word	0x40038004
    2eac:	40038014 	.word	0x40038014
    2eb0:	40038024 	.word	0x40038024
    2eb4:	4003802c 	.word	0x4003802c
    2eb8:	4003801c 	.word	0x4003801c
    2ebc:	40038034 	.word	0x40038034
    2ec0:	400b8000 	.word	0x400b8000
    2ec4:	4003800c 	.word	0x4003800c
    2ec8:	40038008 	.word	0x40038008

00002ecc <serial3_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    2ecc:	4b1c      	ldr	r3, [pc, #112]	; (2f40 <serial3_begin+0x74>)
	rx_buffer_head = 0;
    2ece:	f8df c094 	ldr.w	ip, [pc, #148]	; 2f64 <serial3_begin+0x98>
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    2ed2:	681a      	ldr	r2, [r3, #0]
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    2ed4:	491b      	ldr	r1, [pc, #108]	; (2f44 <serial3_begin+0x78>)
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
    2ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    2ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    2edc:	4d1a      	ldr	r5, [pc, #104]	; (2f48 <serial3_begin+0x7c>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    2ede:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
    2ee0:	f8df e084 	ldr.w	lr, [pc, #132]	; 2f68 <serial3_begin+0x9c>
	tx_buffer_tail = 0;
    2ee4:	4f19      	ldr	r7, [pc, #100]	; (2f4c <serial3_begin+0x80>)
	transmitting = 0;
    2ee6:	4e1a      	ldr	r6, [pc, #104]	; (2f50 <serial3_begin+0x84>)
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    2ee8:	4c1a      	ldr	r4, [pc, #104]	; (2f54 <serial3_begin+0x88>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    2eea:	2300      	movs	r3, #0
    2eec:	f88c 3000 	strb.w	r3, [ip]
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    2ef0:	f44f 7251 	mov.w	r2, #836	; 0x344

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    2ef4:	702b      	strb	r3, [r5, #0]
		case 8:  CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
    2ef6:	281f      	cmp	r0, #31
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    2ef8:	f240 3513 	movw	r5, #787	; 0x313
void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
    2efc:	f88e 3000 	strb.w	r3, [lr]
	tx_buffer_tail = 0;
    2f00:	703b      	strb	r3, [r7, #0]
	transmitting = 0;
    2f02:	7033      	strb	r3, [r6, #0]
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    2f04:	6025      	str	r5, [r4, #0]
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    2f06:	600a      	str	r2, [r1, #0]
		case 8:  CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
    2f08:	d812      	bhi.n	2f30 <serial3_begin+0x64>
    2f0a:	4619      	mov	r1, r3
    2f0c:	2401      	movs	r4, #1
	UART2_BDH = (divisor >> 13) & 0x1F;
    2f0e:	4a12      	ldr	r2, [pc, #72]	; (2f58 <serial3_begin+0x8c>)
	UART2_BDH = (divisor >> 8) & 0x1F;
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    2f10:	4d12      	ldr	r5, [pc, #72]	; (2f5c <serial3_begin+0x90>)
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
	UART2_BDH = (divisor >> 13) & 0x1F;
    2f12:	7011      	strb	r1, [r2, #0]
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    2f14:	4812      	ldr	r0, [pc, #72]	; (2f60 <serial3_begin+0x94>)
	}
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
    2f16:	7054      	strb	r4, [r2, #1]
	UART2_C4 = divisor & 0x1F;
	UART2_C1 = 0;
    2f18:	2100      	movs	r1, #0
	if (divisor < 1) divisor = 1;
	UART2_BDH = (divisor >> 8) & 0x1F;
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
    2f1a:	272c      	movs	r7, #44	; 0x2c
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    2f1c:	2640      	movs	r6, #64	; 0x40
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
	UART2_C4 = divisor & 0x1F;
    2f1e:	7293      	strb	r3, [r2, #10]
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    2f20:	f44f 3400 	mov.w	r4, #131072	; 0x20000
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
	UART2_C4 = divisor & 0x1F;
	UART2_C1 = 0;
    2f24:	7091      	strb	r1, [r2, #2]
	UART2_PFIFO = 0;
    2f26:	7411      	strb	r1, [r2, #16]
	if (divisor < 1) divisor = 1;
	UART2_BDH = (divisor >> 8) & 0x1F;
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
    2f28:	70d7      	strb	r7, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    2f2a:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    2f2c:	6004      	str	r4, [r0, #0]
    2f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f30:	f3c0 3144 	ubfx	r1, r0, #13, #5
    2f34:	f3c0 1447 	ubfx	r4, r0, #5, #8
    2f38:	f000 031f 	and.w	r3, r0, #31
    2f3c:	e7e7      	b.n	2f0e <serial3_begin+0x42>
    2f3e:	bf00      	nop
    2f40:	40048034 	.word	0x40048034
    2f44:	4004c00c 	.word	0x4004c00c
    2f48:	1fff9649 	.word	0x1fff9649
    2f4c:	1fff96b5 	.word	0x1fff96b5
    2f50:	1fff96b4 	.word	0x1fff96b4
    2f54:	4004c008 	.word	0x4004c008
    2f58:	4006c000 	.word	0x4006c000
    2f5c:	e000e431 	.word	0xe000e431
    2f60:	e000e104 	.word	0xe000e104
    2f64:	1fff9648 	.word	0x1fff9648
    2f68:	1fff96bc 	.word	0x1fff96bc

00002f6c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f6c:	4a05      	ldr	r2, [pc, #20]	; (2f84 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    2f6e:	4b06      	ldr	r3, [pc, #24]	; (2f88 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f70:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2f72:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f74:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    2f76:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2f78:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    2f7a:	bf38      	it	cc
    2f7c:	3040      	addcc	r0, #64	; 0x40
    2f7e:	1ac0      	subs	r0, r0, r3
}
    2f80:	4770      	bx	lr
    2f82:	bf00      	nop
    2f84:	1fff9648 	.word	0x1fff9648
    2f88:	1fff9649 	.word	0x1fff9649

00002f8c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    2f8c:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    2f8e:	4b2b      	ldr	r3, [pc, #172]	; (303c <uart2_status_isr+0xb0>)
    2f90:	791a      	ldrb	r2, [r3, #4]
    2f92:	0694      	lsls	r4, r2, #26
    2f94:	d51f      	bpl.n	2fd6 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    2f96:	482a      	ldr	r0, [pc, #168]	; (3040 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    2f98:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2f9a:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f9c:	4929      	ldr	r1, [pc, #164]	; (3044 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    2f9e:	3301      	adds	r3, #1
    2fa0:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2fa2:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    2fa4:	bfc8      	it	gt
    2fa6:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2fa8:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    2faa:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2fac:	d003      	beq.n	2fb6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    2fae:	4c26      	ldr	r4, [pc, #152]	; (3048 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    2fb0:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2fb2:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2fb4:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2fb6:	4a25      	ldr	r2, [pc, #148]	; (304c <uart2_status_isr+0xc0>)
    2fb8:	6811      	ldr	r1, [r2, #0]
    2fba:	b161      	cbz	r1, 2fd6 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2fbc:	4a24      	ldr	r2, [pc, #144]	; (3050 <uart2_status_isr+0xc4>)
    2fbe:	7812      	ldrb	r2, [r2, #0]
    2fc0:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2fc2:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    2fc4:	bf36      	itet	cc
    2fc6:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2fca:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    2fcc:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2fce:	2b27      	cmp	r3, #39	; 0x27
    2fd0:	bfc4      	itt	gt
    2fd2:	2301      	movgt	r3, #1
    2fd4:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    2fd6:	4a19      	ldr	r2, [pc, #100]	; (303c <uart2_status_isr+0xb0>)
    2fd8:	78d3      	ldrb	r3, [r2, #3]
    2fda:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    2fdc:	0618      	lsls	r0, r3, #24
    2fde:	d411      	bmi.n	3004 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    2fe0:	065a      	lsls	r2, r3, #25
    2fe2:	d50d      	bpl.n	3000 <uart2_status_isr+0x74>
    2fe4:	4b15      	ldr	r3, [pc, #84]	; (303c <uart2_status_isr+0xb0>)
    2fe6:	791b      	ldrb	r3, [r3, #4]
    2fe8:	065b      	lsls	r3, r3, #25
    2fea:	d509      	bpl.n	3000 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2fec:	4b19      	ldr	r3, [pc, #100]	; (3054 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    2fee:	491a      	ldr	r1, [pc, #104]	; (3058 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2ff0:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    2ff2:	2200      	movs	r2, #0
    2ff4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2ff6:	b103      	cbz	r3, 2ffa <uart2_status_isr+0x6e>
    2ff8:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    2ffa:	4b10      	ldr	r3, [pc, #64]	; (303c <uart2_status_isr+0xb0>)
    2ffc:	222c      	movs	r2, #44	; 0x2c
    2ffe:	70da      	strb	r2, [r3, #3]
	}
}
    3000:	bc30      	pop	{r4, r5}
    3002:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3004:	7911      	ldrb	r1, [r2, #4]
    3006:	0609      	lsls	r1, r1, #24
    3008:	d5ea      	bpl.n	2fe0 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    300a:	4914      	ldr	r1, [pc, #80]	; (305c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    300c:	4810      	ldr	r0, [pc, #64]	; (3050 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    300e:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3010:	7801      	ldrb	r1, [r0, #0]
    3012:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    3014:	428c      	cmp	r4, r1
    3016:	d00d      	beq.n	3034 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3018:	1c4a      	adds	r2, r1, #1
    301a:	2a27      	cmp	r2, #39	; 0x27
    301c:	bf84      	itt	hi
    301e:	2100      	movhi	r1, #0
    3020:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    3022:	4d0f      	ldr	r5, [pc, #60]	; (3060 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3024:	4c05      	ldr	r4, [pc, #20]	; (303c <uart2_status_isr+0xb0>)
    3026:	bf98      	it	ls
    3028:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    302a:	5caa      	ldrb	r2, [r5, r2]
    302c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    302e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3030:	7001      	strb	r1, [r0, #0]
    3032:	e7d5      	b.n	2fe0 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3034:	216c      	movs	r1, #108	; 0x6c
    3036:	70d1      	strb	r1, [r2, #3]
    3038:	e7d2      	b.n	2fe0 <uart2_status_isr+0x54>
    303a:	bf00      	nop
    303c:	4006c000 	.word	0x4006c000
    3040:	1fff9648 	.word	0x1fff9648
    3044:	1fff9649 	.word	0x1fff9649
    3048:	1fff9674 	.word	0x1fff9674
    304c:	1fff9644 	.word	0x1fff9644
    3050:	1fff96b5 	.word	0x1fff96b5
    3054:	1fff96b8 	.word	0x1fff96b8
    3058:	1fff96b4 	.word	0x1fff96b4
    305c:	1fff96bc 	.word	0x1fff96bc
    3060:	1fff964c 	.word	0x1fff964c

00003064 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    3064:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3066:	2b03      	cmp	r3, #3
    3068:	d814      	bhi.n	3094 <usb_rx+0x30>
	__disable_irq();
    306a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    306c:	490a      	ldr	r1, [pc, #40]	; (3098 <usb_rx+0x34>)
    306e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    3072:	b168      	cbz	r0, 3090 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    3074:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3076:	4c09      	ldr	r4, [pc, #36]	; (309c <usb_rx+0x38>)
    3078:	8805      	ldrh	r5, [r0, #0]
    307a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    307e:	6846      	ldr	r6, [r0, #4]
    3080:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3084:	1b52      	subs	r2, r2, r5
    3086:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    308a:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    308c:	bc70      	pop	{r4, r5, r6}
    308e:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    3090:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3092:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3094:	2000      	movs	r0, #0
    3096:	4770      	bx	lr
    3098:	1fff9718 	.word	0x1fff9718
    309c:	1fff9920 	.word	0x1fff9920

000030a0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    30a0:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    30a2:	2803      	cmp	r0, #3
    30a4:	d80b      	bhi.n	30be <usb_tx_packet_count+0x1e>
	__disable_irq();
    30a6:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    30a8:	4b07      	ldr	r3, [pc, #28]	; (30c8 <usb_tx_packet_count+0x28>)
    30aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    30ae:	b143      	cbz	r3, 30c2 <usb_tx_packet_count+0x22>
    30b0:	2000      	movs	r0, #0
    30b2:	685b      	ldr	r3, [r3, #4]
    30b4:	3001      	adds	r0, #1
    30b6:	2b00      	cmp	r3, #0
    30b8:	d1fb      	bne.n	30b2 <usb_tx_packet_count+0x12>
	__enable_irq();
    30ba:	b662      	cpsie	i
	return count;
    30bc:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    30be:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    30c0:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    30c2:	4618      	mov	r0, r3
    30c4:	e7f9      	b.n	30ba <usb_tx_packet_count+0x1a>
    30c6:	bf00      	nop
    30c8:	1fff976c 	.word	0x1fff976c

000030cc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    30cc:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    30ce:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    30d0:	4a2b      	ldr	r2, [pc, #172]	; (3180 <usb_rx_memory+0xb4>)
    30d2:	7813      	ldrb	r3, [r2, #0]
    30d4:	071d      	lsls	r5, r3, #28
    30d6:	d506      	bpl.n	30e6 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    30d8:	4b2a      	ldr	r3, [pc, #168]	; (3184 <usb_rx_memory+0xb8>)
    30da:	6a19      	ldr	r1, [r3, #32]
    30dc:	2900      	cmp	r1, #0
    30de:	d036      	beq.n	314e <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    30e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    30e2:	2900      	cmp	r1, #0
    30e4:	d041      	beq.n	316a <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    30e6:	7853      	ldrb	r3, [r2, #1]
    30e8:	071c      	lsls	r4, r3, #28
    30ea:	d506      	bpl.n	30fa <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    30ec:	4b25      	ldr	r3, [pc, #148]	; (3184 <usb_rx_memory+0xb8>)
    30ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
    30f0:	2900      	cmp	r1, #0
    30f2:	d03e      	beq.n	3172 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    30f4:	6c99      	ldr	r1, [r3, #72]	; 0x48
    30f6:	2900      	cmp	r1, #0
    30f8:	d039      	beq.n	316e <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    30fa:	7893      	ldrb	r3, [r2, #2]
    30fc:	0719      	lsls	r1, r3, #28
    30fe:	d505      	bpl.n	310c <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3100:	4b20      	ldr	r3, [pc, #128]	; (3184 <usb_rx_memory+0xb8>)
    3102:	6e19      	ldr	r1, [r3, #96]	; 0x60
    3104:	2900      	cmp	r1, #0
    3106:	d036      	beq.n	3176 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3108:	6e99      	ldr	r1, [r3, #104]	; 0x68
    310a:	b189      	cbz	r1, 3130 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    310c:	78d3      	ldrb	r3, [r2, #3]
    310e:	071b      	lsls	r3, r3, #28
    3110:	d507      	bpl.n	3122 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3112:	4b1c      	ldr	r3, [pc, #112]	; (3184 <usb_rx_memory+0xb8>)
    3114:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    3118:	b37a      	cbz	r2, 317a <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    311a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    311e:	2111      	movs	r1, #17
    3120:	b13a      	cbz	r2, 3132 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    3122:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    3124:	4b18      	ldr	r3, [pc, #96]	; (3188 <usb_rx_memory+0xbc>)
    3126:	2200      	movs	r2, #0
    3128:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    312a:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    312c:	f000 be68 	b.w	3e00 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3130:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3132:	4c15      	ldr	r4, [pc, #84]	; (3188 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3134:	4d15      	ldr	r5, [pc, #84]	; (318c <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    3136:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3138:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    313c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3140:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3142:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3144:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3146:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    3148:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    314a:	bc30      	pop	{r4, r5}
    314c:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    314e:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3150:	4c0d      	ldr	r4, [pc, #52]	; (3188 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3152:	4d0f      	ldr	r5, [pc, #60]	; (3190 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    3154:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3156:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    315a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    315e:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3160:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3162:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3164:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    3166:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    3168:	e7ef      	b.n	314a <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    316a:	2105      	movs	r1, #5
    316c:	e7e1      	b.n	3132 <usb_rx_memory+0x66>
    316e:	2109      	movs	r1, #9
    3170:	e7df      	b.n	3132 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3172:	2208      	movs	r2, #8
    3174:	e7ec      	b.n	3150 <usb_rx_memory+0x84>
    3176:	220c      	movs	r2, #12
    3178:	e7ea      	b.n	3150 <usb_rx_memory+0x84>
    317a:	2210      	movs	r2, #16
    317c:	e7e8      	b.n	3150 <usb_rx_memory+0x84>
    317e:	bf00      	nop
    3180:	000065fc 	.word	0x000065fc
    3184:	1fff8000 	.word	0x1fff8000
    3188:	1fff9795 	.word	0x1fff9795
    318c:	004000c8 	.word	0x004000c8
    3190:	00400088 	.word	0x00400088

00003194 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3194:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3196:	2b03      	cmp	r3, #3
    3198:	d81d      	bhi.n	31d6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    319a:	4a1b      	ldr	r2, [pc, #108]	; (3208 <usb_tx+0x74>)
    319c:	0140      	lsls	r0, r0, #5
    319e:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    31a2:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    31a4:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    31a6:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    31a8:	4c18      	ldr	r4, [pc, #96]	; (320c <usb_tx+0x78>)
    31aa:	5ce2      	ldrb	r2, [r4, r3]
    31ac:	2a03      	cmp	r2, #3
    31ae:	d81b      	bhi.n	31e8 <usb_tx+0x54>
    31b0:	e8df f002 	tbb	[pc, r2]
    31b4:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    31b8:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    31ba:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    31bc:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    31be:	f010 0f08 	tst.w	r0, #8
    31c2:	bf14      	ite	ne
    31c4:	23c8      	movne	r3, #200	; 0xc8
    31c6:	2388      	moveq	r3, #136	; 0x88
    31c8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    31cc:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    31ce:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    31d0:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    31d2:	b662      	cpsie	i
}
    31d4:	bc30      	pop	{r4, r5}
    31d6:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    31d8:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    31da:	2202      	movs	r2, #2
		break;
    31dc:	e7ed      	b.n	31ba <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    31de:	2205      	movs	r2, #5
    31e0:	e7eb      	b.n	31ba <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    31e2:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    31e4:	2204      	movs	r2, #4
		break;
    31e6:	e7e8      	b.n	31ba <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    31e8:	4a09      	ldr	r2, [pc, #36]	; (3210 <usb_tx+0x7c>)
    31ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    31ee:	b138      	cbz	r0, 3200 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    31f0:	4a08      	ldr	r2, [pc, #32]	; (3214 <usb_tx+0x80>)
    31f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    31f6:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    31f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    31fc:	b662      	cpsie	i
		return;
    31fe:	e7e9      	b.n	31d4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    3204:	4a03      	ldr	r2, [pc, #12]	; (3214 <usb_tx+0x80>)
    3206:	e7f7      	b.n	31f8 <usb_tx+0x64>
    3208:	1fff8000 	.word	0x1fff8000
    320c:	1fff97a4 	.word	0x1fff97a4
    3210:	1fff976c 	.word	0x1fff976c
    3214:	1fff977c 	.word	0x1fff977c

00003218 <usb_isr>:
}



void usb_isr(void)
{
    3218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    321c:	f8df b30c 	ldr.w	fp, [pc, #780]	; 352c <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    3220:	f8df a30c 	ldr.w	sl, [pc, #780]	; 3530 <usb_isr+0x318>
}



void usb_isr(void)
{
    3224:	b087      	sub	sp, #28
    3226:	e044      	b.n	32b2 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3228:	4fab      	ldr	r7, [pc, #684]	; (34d8 <usb_isr+0x2c0>)
    322a:	ea4f 0893 	mov.w	r8, r3, lsr #2
    322e:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3232:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3234:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3238:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    323c:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    323e:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3242:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    3246:	2b00      	cmp	r3, #0
    3248:	f040 8102 	bne.w	3450 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    324c:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    3250:	0c1b      	lsrs	r3, r3, #16
    3252:	b299      	uxth	r1, r3
    3254:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    3258:	2b00      	cmp	r3, #0
    325a:	f000 80f0 	beq.w	343e <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    325e:	4b9f      	ldr	r3, [pc, #636]	; (34dc <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3260:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    3264:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    3268:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    326c:	2a00      	cmp	r2, #0
    326e:	f000 82c5 	beq.w	37fc <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3272:	4d9b      	ldr	r5, [pc, #620]	; (34e0 <usb_isr+0x2c8>)
    3274:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    3278:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    327a:	4c9a      	ldr	r4, [pc, #616]	; (34e4 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    327c:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3280:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    3284:	4419      	add	r1, r3
    3286:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    328a:	f000 fd99 	bl	3dc0 <usb_malloc>
					if (packet) {
    328e:	2800      	cmp	r0, #0
    3290:	f000 82ad 	beq.w	37ee <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3294:	4a94      	ldr	r2, [pc, #592]	; (34e8 <usb_isr+0x2d0>)
    3296:	4b95      	ldr	r3, [pc, #596]	; (34ec <usb_isr+0x2d4>)
    3298:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    329c:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    32a0:	bf18      	it	ne
    32a2:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    32a4:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    32a8:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    32ac:	2308      	movs	r3, #8
    32ae:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    32b2:	f89b 4000 	ldrb.w	r4, [fp]
    32b6:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    32b8:	0761      	lsls	r1, r4, #29
    32ba:	d51a      	bpl.n	32f2 <usb_isr+0xda>
		if (usb_configuration) {
    32bc:	4b8c      	ldr	r3, [pc, #560]	; (34f0 <usb_isr+0x2d8>)
    32be:	781b      	ldrb	r3, [r3, #0]
    32c0:	b1a3      	cbz	r3, 32ec <usb_isr+0xd4>
			t = usb_reboot_timer;
    32c2:	498c      	ldr	r1, [pc, #560]	; (34f4 <usb_isr+0x2dc>)
    32c4:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    32c6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    32ca:	b122      	cbz	r2, 32d6 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    32cc:	3b01      	subs	r3, #1
    32ce:	b2db      	uxtb	r3, r3
    32d0:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    32d2:	b903      	cbnz	r3, 32d6 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    32d4:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    32d6:	4988      	ldr	r1, [pc, #544]	; (34f8 <usb_isr+0x2e0>)
    32d8:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    32da:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    32de:	b12a      	cbz	r2, 32ec <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    32e0:	3b01      	subs	r3, #1
    32e2:	b2db      	uxtb	r3, r3
    32e4:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    32e6:	2b00      	cmp	r3, #0
    32e8:	f000 8257 	beq.w	379a <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    32ec:	2304      	movs	r3, #4
    32ee:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    32f2:	f004 0308 	and.w	r3, r4, #8
    32f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    32fa:	2b00      	cmp	r3, #0
    32fc:	f000 80cc 	beq.w	3498 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    3300:	f89a 3000 	ldrb.w	r3, [sl]
    3304:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    3306:	091e      	lsrs	r6, r3, #4
    3308:	d18e      	bne.n	3228 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    330a:	089c      	lsrs	r4, r3, #2
    330c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 34d8 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3310:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3314:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3318:	f3c2 0283 	ubfx	r2, r2, #2, #4
    331c:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    331e:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3320:	2a0c      	cmp	r2, #12
    3322:	f200 8088 	bhi.w	3436 <usb_isr+0x21e>
    3326:	e8df f002 	tbb	[pc, r2]
    332a:	7c7c      	.short	0x7c7c
    332c:	86868686 	.word	0x86868686
    3330:	86478686 	.word	0x86478686
    3334:	8686      	.short	0x8686
    3336:	07          	.byte	0x07
    3337:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3338:	6808      	ldr	r0, [r1, #0]
    333a:	4d70      	ldr	r5, [pc, #448]	; (34fc <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    333c:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    333e:	4f70      	ldr	r7, [pc, #448]	; (3500 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3340:	4e70      	ldr	r6, [pc, #448]	; (3504 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3342:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3344:	b281      	uxth	r1, r0
    3346:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    334a:	4b67      	ldr	r3, [pc, #412]	; (34e8 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    334c:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    334e:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3352:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3354:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3356:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    335a:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    335c:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    3360:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3364:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3368:	4c5b      	ldr	r4, [pc, #364]	; (34d8 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    336a:	f200 80e3 	bhi.w	3534 <usb_isr+0x31c>
    336e:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    3372:	f080 8346 	bcs.w	3a02 <usb_isr+0x7ea>
    3376:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    337a:	f000 82fc 	beq.w	3976 <usb_isr+0x75e>
    337e:	f200 828d 	bhi.w	389c <usb_isr+0x684>
    3382:	2980      	cmp	r1, #128	; 0x80
    3384:	f000 8377 	beq.w	3a76 <usb_isr+0x85e>
    3388:	2982      	cmp	r1, #130	; 0x82
    338a:	f040 82fa 	bne.w	3982 <usb_isr+0x76a>
    338e:	88a9      	ldrh	r1, [r5, #4]
    3390:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3394:	2904      	cmp	r1, #4
    3396:	f200 82f4 	bhi.w	3982 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    339a:	485b      	ldr	r0, [pc, #364]	; (3508 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    339c:	4c5b      	ldr	r4, [pc, #364]	; (350c <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    339e:	0089      	lsls	r1, r1, #2
    33a0:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    33a2:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    33a4:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    33a6:	7802      	ldrb	r2, [r0, #0]
    33a8:	0793      	lsls	r3, r2, #30
    33aa:	f140 8458 	bpl.w	3c5e <usb_isr+0xa46>
    33ae:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    33b2:	f04f 0e02 	mov.w	lr, #2
    33b6:	e342      	b.n	3a3e <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    33b8:	4f51      	ldr	r7, [pc, #324]	; (3500 <usb_isr+0x2e8>)
    33ba:	683a      	ldr	r2, [r7, #0]
		if (data) {
    33bc:	b332      	cbz	r2, 340c <usb_isr+0x1f4>
			size = ep0_tx_len;
    33be:	4b54      	ldr	r3, [pc, #336]	; (3510 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33c0:	4e50      	ldr	r6, [pc, #320]	; (3504 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    33c2:	4954      	ldr	r1, [pc, #336]	; (3514 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    33c4:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33c6:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    33c8:	780d      	ldrb	r5, [r1, #0]
    33ca:	2840      	cmp	r0, #64	; 0x40
    33cc:	4686      	mov	lr, r0
    33ce:	f045 0802 	orr.w	r8, r5, #2
    33d2:	bf28      	it	cs
    33d4:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33d8:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    33da:	f084 0401 	eor.w	r4, r4, #1
    33de:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    33e0:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33e4:	bf0c      	ite	eq
    33e6:	2488      	moveq	r4, #136	; 0x88
    33e8:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    33ea:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    33ee:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    33f0:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    33f8:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    33fa:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33fc:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3400:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3402:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3404:	2800      	cmp	r0, #0
    3406:	f000 8145 	beq.w	3694 <usb_isr+0x47c>
    340a:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    340c:	4b3b      	ldr	r3, [pc, #236]	; (34fc <usb_isr+0x2e4>)
    340e:	881a      	ldrh	r2, [r3, #0]
    3410:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    3414:	d10f      	bne.n	3436 <usb_isr+0x21e>
			setup.bRequest = 0;
    3416:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3418:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    341a:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    341c:	4b3e      	ldr	r3, [pc, #248]	; (3518 <usb_isr+0x300>)
    341e:	701a      	strb	r2, [r3, #0]
    3420:	e009      	b.n	3436 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3422:	4a36      	ldr	r2, [pc, #216]	; (34fc <usb_isr+0x2e4>)
    3424:	8810      	ldrh	r0, [r2, #0]
    3426:	f242 0221 	movw	r2, #8225	; 0x2021
    342a:	4290      	cmp	r0, r2
    342c:	f000 8137 	beq.w	369e <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3430:	4a2d      	ldr	r2, [pc, #180]	; (34e8 <usb_isr+0x2d0>)
    3432:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3436:	4a39      	ldr	r2, [pc, #228]	; (351c <usb_isr+0x304>)
    3438:	2301      	movs	r3, #1
    343a:	7013      	strb	r3, [r2, #0]
    343c:	e736      	b.n	32ac <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    343e:	4a2a      	ldr	r2, [pc, #168]	; (34e8 <usb_isr+0x2d0>)
    3440:	4b2a      	ldr	r3, [pc, #168]	; (34ec <usb_isr+0x2d4>)
    3442:	f019 0f08 	tst.w	r9, #8
    3446:	bf18      	it	ne
    3448:	4613      	movne	r3, r2
    344a:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    344e:	e72d      	b.n	32ac <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    3450:	f000 fcd6 	bl	3e00 <usb_free>
				packet = tx_first[endpoint];
    3454:	4a32      	ldr	r2, [pc, #200]	; (3520 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3456:	4933      	ldr	r1, [pc, #204]	; (3524 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    3458:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    345c:	2b00      	cmp	r3, #0
    345e:	f000 81d1 	beq.w	3804 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3462:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3464:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3466:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    346a:	f103 0208 	add.w	r2, r3, #8
    346e:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    3472:	2c03      	cmp	r4, #3
    3474:	d805      	bhi.n	3482 <usb_isr+0x26a>
    3476:	e8df f004 	tbb	[pc, r4]
    347a:	022c      	.short	0x022c
    347c:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    347e:	2202      	movs	r2, #2
    3480:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3482:	881a      	ldrh	r2, [r3, #0]
    3484:	f019 0f08 	tst.w	r9, #8
    3488:	bf0c      	ite	eq
    348a:	2388      	moveq	r3, #136	; 0x88
    348c:	23c8      	movne	r3, #200	; 0xc8
    348e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3492:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    3496:	e709      	b.n	32ac <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3498:	07e0      	lsls	r0, r4, #31
    349a:	f100 8181 	bmi.w	37a0 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    349e:	0621      	lsls	r1, r4, #24
    34a0:	f100 81f2 	bmi.w	3888 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    34a4:	07a2      	lsls	r2, r4, #30
    34a6:	d506      	bpl.n	34b6 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    34a8:	4a1f      	ldr	r2, [pc, #124]	; (3528 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    34aa:	4920      	ldr	r1, [pc, #128]	; (352c <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    34ac:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    34ae:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    34b0:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    34b2:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    34b4:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    34b6:	06e3      	lsls	r3, r4, #27
    34b8:	d502      	bpl.n	34c0 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    34ba:	4b1c      	ldr	r3, [pc, #112]	; (352c <usb_isr+0x314>)
    34bc:	2210      	movs	r2, #16
    34be:	701a      	strb	r2, [r3, #0]
	}

}
    34c0:	b007      	add	sp, #28
    34c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    34c6:	2204      	movs	r2, #4
    34c8:	558a      	strb	r2, [r1, r6]
						break;
    34ca:	e7da      	b.n	3482 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    34cc:	2205      	movs	r2, #5
    34ce:	558a      	strb	r2, [r1, r6]
						break;
    34d0:	e7d7      	b.n	3482 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    34d2:	2203      	movs	r2, #3
    34d4:	558a      	strb	r2, [r1, r6]
						break;
    34d6:	e7d4      	b.n	3482 <usb_isr+0x26a>
    34d8:	1fff8000 	.word	0x1fff8000
    34dc:	1fff9718 	.word	0x1fff9718
    34e0:	1fff96c4 	.word	0x1fff96c4
    34e4:	1fff9920 	.word	0x1fff9920
    34e8:	004000c8 	.word	0x004000c8
    34ec:	00400088 	.word	0x00400088
    34f0:	1fff97a0 	.word	0x1fff97a0
    34f4:	1fff9729 	.word	0x1fff9729
    34f8:	1fff97a8 	.word	0x1fff97a8
    34fc:	1fff978c 	.word	0x1fff978c
    3500:	1fff96c0 	.word	0x1fff96c0
    3504:	1fff9728 	.word	0x1fff9728
    3508:	400720c0 	.word	0x400720c0
    350c:	1fff9798 	.word	0x1fff9798
    3510:	1fff96d4 	.word	0x1fff96d4
    3514:	1fff9794 	.word	0x1fff9794
    3518:	40072098 	.word	0x40072098
    351c:	40072094 	.word	0x40072094
    3520:	1fff976c 	.word	0x1fff976c
    3524:	1fff97a4 	.word	0x1fff97a4
    3528:	40072088 	.word	0x40072088
    352c:	40072080 	.word	0x40072080
    3530:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3534:	f242 0021 	movw	r0, #8225	; 0x2021
    3538:	4281      	cmp	r1, r0
    353a:	f000 812a 	beq.w	3792 <usb_isr+0x57a>
    353e:	f200 80d8 	bhi.w	36f2 <usb_isr+0x4da>
    3542:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    3546:	f000 8276 	beq.w	3a36 <usb_isr+0x81e>
    354a:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    354e:	f040 8218 	bne.w	3982 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    3552:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3554:	49b3      	ldr	r1, [pc, #716]	; (3824 <usb_isr+0x60c>)
    3556:	78a8      	ldrb	r0, [r5, #2]
    3558:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    355a:	0612      	lsls	r2, r2, #24
    355c:	f100 833a 	bmi.w	3bd4 <usb_isr+0x9bc>
    3560:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    3564:	49b0      	ldr	r1, [pc, #704]	; (3828 <usb_isr+0x610>)
    3566:	0613      	lsls	r3, r2, #24
    3568:	f100 830c 	bmi.w	3b84 <usb_isr+0x96c>
    356c:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    3570:	49ad      	ldr	r1, [pc, #692]	; (3828 <usb_isr+0x610>)
    3572:	0615      	lsls	r5, r2, #24
    3574:	f100 8301 	bmi.w	3b7a <usb_isr+0x962>
    3578:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    357c:	49aa      	ldr	r1, [pc, #680]	; (3828 <usb_isr+0x610>)
    357e:	0614      	lsls	r4, r2, #24
    3580:	f100 82f6 	bmi.w	3b70 <usb_isr+0x958>
    3584:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    3588:	49a7      	ldr	r1, [pc, #668]	; (3828 <usb_isr+0x610>)
    358a:	0610      	lsls	r0, r2, #24
    358c:	f100 834a 	bmi.w	3c24 <usb_isr+0xa0c>
    3590:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    3594:	49a4      	ldr	r1, [pc, #656]	; (3828 <usb_isr+0x610>)
    3596:	0612      	lsls	r2, r2, #24
    3598:	f100 833f 	bmi.w	3c1a <usb_isr+0xa02>
    359c:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    35a0:	49a1      	ldr	r1, [pc, #644]	; (3828 <usb_isr+0x610>)
    35a2:	0613      	lsls	r3, r2, #24
    35a4:	f100 8334 	bmi.w	3c10 <usb_isr+0x9f8>
    35a8:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    35ac:	499e      	ldr	r1, [pc, #632]	; (3828 <usb_isr+0x610>)
    35ae:	0615      	lsls	r5, r2, #24
    35b0:	f100 8329 	bmi.w	3c06 <usb_isr+0x9ee>
    35b4:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    35b8:	499b      	ldr	r1, [pc, #620]	; (3828 <usb_isr+0x610>)
    35ba:	0614      	lsls	r4, r2, #24
    35bc:	f100 831e 	bmi.w	3bfc <usb_isr+0x9e4>
    35c0:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    35c4:	4998      	ldr	r1, [pc, #608]	; (3828 <usb_isr+0x610>)
    35c6:	0610      	lsls	r0, r2, #24
    35c8:	f100 8313 	bmi.w	3bf2 <usb_isr+0x9da>
    35cc:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    35d0:	4995      	ldr	r1, [pc, #596]	; (3828 <usb_isr+0x610>)
    35d2:	0612      	lsls	r2, r2, #24
    35d4:	f100 8308 	bmi.w	3be8 <usb_isr+0x9d0>
    35d8:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    35dc:	4992      	ldr	r1, [pc, #584]	; (3828 <usb_isr+0x610>)
    35de:	0613      	lsls	r3, r2, #24
    35e0:	f100 82fd 	bmi.w	3bde <usb_isr+0x9c6>
    35e4:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    35e8:	498f      	ldr	r1, [pc, #572]	; (3828 <usb_isr+0x610>)
    35ea:	0615      	lsls	r5, r2, #24
    35ec:	f100 8331 	bmi.w	3c52 <usb_isr+0xa3a>
    35f0:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    35f4:	498c      	ldr	r1, [pc, #560]	; (3828 <usb_isr+0x610>)
    35f6:	0614      	lsls	r4, r2, #24
    35f8:	f100 8325 	bmi.w	3c46 <usb_isr+0xa2e>
    35fc:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    3600:	4989      	ldr	r1, [pc, #548]	; (3828 <usb_isr+0x610>)
    3602:	0610      	lsls	r0, r2, #24
    3604:	f100 8319 	bmi.w	3c3a <usb_isr+0xa22>
    3608:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    360c:	4986      	ldr	r1, [pc, #536]	; (3828 <usb_isr+0x610>)
    360e:	0612      	lsls	r2, r2, #24
    3610:	f100 830d 	bmi.w	3c2e <usb_isr+0xa16>
    3614:	4885      	ldr	r0, [pc, #532]	; (382c <usb_isr+0x614>)
    3616:	4a86      	ldr	r2, [pc, #536]	; (3830 <usb_isr+0x618>)
    3618:	4986      	ldr	r1, [pc, #536]	; (3834 <usb_isr+0x61c>)
    361a:	9001      	str	r0, [sp, #4]
    361c:	4886      	ldr	r0, [pc, #536]	; (3838 <usb_isr+0x620>)
    361e:	4d87      	ldr	r5, [pc, #540]	; (383c <usb_isr+0x624>)
    3620:	4c87      	ldr	r4, [pc, #540]	; (3840 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3622:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    3624:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3626:	9605      	str	r6, [sp, #20]
    3628:	9502      	str	r5, [sp, #8]
    362a:	4680      	mov	r8, r0
    362c:	460f      	mov	r7, r1
    362e:	4616      	mov	r6, r2
    3630:	461d      	mov	r5, r3
    3632:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3634:	6830      	ldr	r0, [r6, #0]
			while (p) {
    3636:	b128      	cbz	r0, 3644 <usb_isr+0x42c>
				n = p->next;
    3638:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    363a:	f000 fbe1 	bl	3e00 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    363e:	4620      	mov	r0, r4
    3640:	2c00      	cmp	r4, #0
    3642:	d1f9      	bne.n	3638 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3644:	2300      	movs	r3, #0
    3646:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3648:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    364a:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    364c:	461a      	mov	r2, r3
    364e:	2300      	movs	r3, #0
    3650:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    3654:	b128      	cbz	r0, 3662 <usb_isr+0x44a>
				n = p->next;
    3656:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    3658:	f000 fbd2 	bl	3e00 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    365c:	4620      	mov	r0, r4
    365e:	2c00      	cmp	r4, #0
    3660:	d1f9      	bne.n	3656 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3662:	2200      	movs	r2, #0
    3664:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    3666:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3668:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    366c:	4611      	mov	r1, r2
    366e:	2200      	movs	r2, #0
    3670:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    3674:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3676:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3678:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    367a:	f04f 0100 	mov.w	r1, #0
    367e:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    3682:	2b03      	cmp	r3, #3
    3684:	f200 812b 	bhi.w	38de <usb_isr+0x6c6>
    3688:	e8df f013 	tbh	[pc, r3, lsl #1]
    368c:	01250170 	.word	0x01250170
    3690:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3694:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    3698:	bf18      	it	ne
    369a:	2200      	movne	r2, #0
    369c:	e6b5      	b.n	340a <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    369e:	4a69      	ldr	r2, [pc, #420]	; (3844 <usb_isr+0x62c>)
    36a0:	780d      	ldrb	r5, [r1, #0]
    36a2:	7848      	ldrb	r0, [r1, #1]
    36a4:	7015      	strb	r5, [r2, #0]
    36a6:	7050      	strb	r0, [r2, #1]
    36a8:	788d      	ldrb	r5, [r1, #2]
    36aa:	78c8      	ldrb	r0, [r1, #3]
    36ac:	7095      	strb	r5, [r2, #2]
    36ae:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    36b0:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    36b2:	790d      	ldrb	r5, [r1, #4]
    36b4:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    36b6:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    36b8:	794d      	ldrb	r5, [r1, #5]
    36ba:	7989      	ldrb	r1, [r1, #6]
    36bc:	7155      	strb	r5, [r2, #5]
    36be:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    36c0:	f000 819b 	beq.w	39fa <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36c4:	4960      	ldr	r1, [pc, #384]	; (3848 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36c6:	4e61      	ldr	r6, [pc, #388]	; (384c <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36c8:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36ca:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    36cc:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36d0:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36d2:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    36d6:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36d8:	bf0c      	ite	eq
    36da:	2188      	moveq	r1, #136	; 0x88
    36dc:	21c8      	movne	r1, #200	; 0xc8
    36de:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36e2:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    36e6:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36ea:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    36ec:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36ee:	6051      	str	r1, [r2, #4]
    36f0:	e69e      	b.n	3430 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    36f2:	f242 2021 	movw	r0, #8737	; 0x2221
    36f6:	4281      	cmp	r1, r0
    36f8:	f040 81cb 	bne.w	3a92 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    36fc:	4b54      	ldr	r3, [pc, #336]	; (3850 <usb_isr+0x638>)
    36fe:	4c55      	ldr	r4, [pc, #340]	; (3854 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3700:	4955      	ldr	r1, [pc, #340]	; (3858 <usb_isr+0x640>)
    3702:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3704:	681d      	ldr	r5, [r3, #0]
    3706:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3708:	f8cd e004 	str.w	lr, [sp, #4]
    370c:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    370e:	2000      	movs	r0, #0
    3710:	9002      	str	r0, [sp, #8]
    3712:	4680      	mov	r8, r0
    3714:	4684      	mov	ip, r0
    3716:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3718:	494b      	ldr	r1, [pc, #300]	; (3848 <usb_isr+0x630>)
    371a:	780d      	ldrb	r5, [r1, #0]
    371c:	f045 0e02 	orr.w	lr, r5, #2
    3720:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    3724:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3726:	9b01      	ldr	r3, [sp, #4]
    3728:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    372a:	9b03      	ldr	r3, [sp, #12]
    372c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    372e:	bf0c      	ite	eq
    3730:	2488      	moveq	r4, #136	; 0x88
    3732:	24c8      	movne	r4, #200	; 0xc8
    3734:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3738:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    373c:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3740:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3742:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3744:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 3828 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    3748:	4b40      	ldr	r3, [pc, #256]	; (384c <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    374a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 3848 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    374e:	2800      	cmp	r0, #0
    3750:	f040 811e 	bne.w	3990 <usb_isr+0x778>
    3754:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    3758:	d11b      	bne.n	3792 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    375a:	f044 0c02 	orr.w	ip, r4, #2
    375e:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    3762:	9c02      	ldr	r4, [sp, #8]
    3764:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 3828 <usb_isr+0x610>
    3768:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    376a:	2a00      	cmp	r2, #0
    376c:	f040 8126 	bne.w	39bc <usb_isr+0x7a4>
    3770:	0402      	lsls	r2, r0, #16
    3772:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3776:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    377a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    377e:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3780:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3782:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3784:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3786:	2840      	cmp	r0, #64	; 0x40
    3788:	d103      	bne.n	3792 <usb_isr+0x57a>
    378a:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    378c:	4a33      	ldr	r2, [pc, #204]	; (385c <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    378e:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3790:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3792:	4a33      	ldr	r2, [pc, #204]	; (3860 <usb_isr+0x648>)
    3794:	2301      	movs	r3, #1
    3796:	7013      	strb	r3, [r2, #0]
    3798:	e64d      	b.n	3436 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    379a:	f000 fc9d 	bl	40d8 <usb_serial_flush_callback>
    379e:	e5a5      	b.n	32ec <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    37a0:	4b21      	ldr	r3, [pc, #132]	; (3828 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    37a2:	482f      	ldr	r0, [pc, #188]	; (3860 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    37a4:	4928      	ldr	r1, [pc, #160]	; (3848 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    37a6:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    37a8:	f04f 0e02 	mov.w	lr, #2
    37ac:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37b0:	4f2c      	ldr	r7, [pc, #176]	; (3864 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    37b2:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    37b4:	492c      	ldr	r1, [pc, #176]	; (3868 <usb_isr+0x650>)
    37b6:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    37b8:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    37ba:	4e2c      	ldr	r6, [pc, #176]	; (386c <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    37bc:	4d2c      	ldr	r5, [pc, #176]	; (3870 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    37be:	4c2d      	ldr	r4, [pc, #180]	; (3874 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    37c0:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37c2:	210d      	movs	r1, #13
    37c4:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    37c6:	21ff      	movs	r1, #255	; 0xff
    37c8:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    37ca:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 3884 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    37ce:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    37d0:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    37d2:	4d29      	ldr	r5, [pc, #164]	; (3878 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    37d4:	4a29      	ldr	r2, [pc, #164]	; (387c <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    37d6:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    37da:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    37dc:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    37de:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    37e2:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    37e4:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    37e6:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    37e8:	b007      	add	sp, #28
    37ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    37ee:	4a24      	ldr	r2, [pc, #144]	; (3880 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    37f0:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    37f4:	7813      	ldrb	r3, [r2, #0]
    37f6:	3301      	adds	r3, #1
    37f8:	7013      	strb	r3, [r2, #0]
    37fa:	e557      	b.n	32ac <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    37fc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    3800:	4d0e      	ldr	r5, [pc, #56]	; (383c <usb_isr+0x624>)
    3802:	e53a      	b.n	327a <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3804:	5d8b      	ldrb	r3, [r1, r6]
    3806:	2b03      	cmp	r3, #3
    3808:	f200 80f0 	bhi.w	39ec <usb_isr+0x7d4>
    380c:	a201      	add	r2, pc, #4	; (adr r2, 3814 <usb_isr+0x5fc>)
    380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3812:	bf00      	nop
    3814:	000032ad 	.word	0x000032ad
    3818:	000032ad 	.word	0x000032ad
    381c:	000038d1 	.word	0x000038d1
    3820:	000038cb 	.word	0x000038cb
    3824:	1fff97a0 	.word	0x1fff97a0
    3828:	1fff8000 	.word	0x1fff8000
    382c:	1fff977c 	.word	0x1fff977c
    3830:	1fff9718 	.word	0x1fff9718
    3834:	1fff976c 	.word	0x1fff976c
    3838:	1fff97a4 	.word	0x1fff97a4
    383c:	1fff96c4 	.word	0x1fff96c4
    3840:	1fff9920 	.word	0x1fff9920
    3844:	1fff9928 	.word	0x1fff9928
    3848:	1fff9794 	.word	0x1fff9794
    384c:	1fff9728 	.word	0x1fff9728
    3850:	1fff9640 	.word	0x1fff9640
    3854:	1fff9930 	.word	0x1fff9930
    3858:	1fff97b8 	.word	0x1fff97b8
    385c:	1fff96d4 	.word	0x1fff96d4
    3860:	40072094 	.word	0x40072094
    3864:	400720c0 	.word	0x400720c0
    3868:	00400088 	.word	0x00400088
    386c:	40072088 	.word	0x40072088
    3870:	40072080 	.word	0x40072080
    3874:	40072098 	.word	0x40072098
    3878:	1fff96d8 	.word	0x1fff96d8
    387c:	1fff972c 	.word	0x1fff972c
    3880:	1fff9795 	.word	0x1fff9795
    3884:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3888:	49c1      	ldr	r1, [pc, #772]	; (3b90 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    388a:	4bc2      	ldr	r3, [pc, #776]	; (3b94 <usb_isr+0x97c>)
    388c:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    388e:	200d      	movs	r0, #13
    3890:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3892:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3894:	07a2      	lsls	r2, r4, #30
    3896:	f57f ae0e 	bpl.w	34b6 <usb_isr+0x29e>
    389a:	e605      	b.n	34a8 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    389c:	f240 3202 	movw	r2, #770	; 0x302
    38a0:	4291      	cmp	r1, r2
    38a2:	f040 80ee 	bne.w	3a82 <usb_isr+0x86a>
    38a6:	88a9      	ldrh	r1, [r5, #4]
    38a8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    38ac:	2904      	cmp	r1, #4
    38ae:	d868      	bhi.n	3982 <usb_isr+0x76a>
    38b0:	886a      	ldrh	r2, [r5, #2]
    38b2:	2a00      	cmp	r2, #0
    38b4:	d165      	bne.n	3982 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    38b6:	48b6      	ldr	r0, [pc, #728]	; (3b90 <usb_isr+0x978>)
    38b8:	f8cd e004 	str.w	lr, [sp, #4]
    38bc:	0089      	lsls	r1, r1, #2
    38be:	4408      	add	r0, r1
    38c0:	7801      	ldrb	r1, [r0, #0]
    38c2:	f041 0102 	orr.w	r1, r1, #2
    38c6:	7001      	strb	r1, [r0, #0]
    38c8:	e721      	b.n	370e <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    38ca:	2301      	movs	r3, #1
    38cc:	558b      	strb	r3, [r1, r6]
						break;
    38ce:	e4ed      	b.n	32ac <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    38d0:	2300      	movs	r3, #0
    38d2:	558b      	strb	r3, [r1, r6]
						break;
    38d4:	e4ea      	b.n	32ac <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    38d6:	f04f 0301 	mov.w	r3, #1
    38da:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    38de:	3501      	adds	r5, #1
    38e0:	2d04      	cmp	r5, #4
    38e2:	f106 0604 	add.w	r6, r6, #4
    38e6:	f107 0704 	add.w	r7, r7, #4
    38ea:	f108 0801 	add.w	r8, r8, #1
    38ee:	f47f aea1 	bne.w	3634 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    38f2:	4ca9      	ldr	r4, [pc, #676]	; (3b98 <usb_isr+0x980>)
			*reg = epconf;
    38f4:	4ba9      	ldr	r3, [pc, #676]	; (3b9c <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    38f6:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    38f8:	4da9      	ldr	r5, [pc, #676]	; (3ba0 <usb_isr+0x988>)
    38fa:	9f04      	ldr	r7, [sp, #16]
    38fc:	9e05      	ldr	r6, [sp, #20]
    38fe:	2100      	movs	r1, #0
    3900:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3902:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3904:	0713      	lsls	r3, r2, #28
    3906:	f100 8105 	bmi.w	3b14 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    390a:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    390c:	49a5      	ldr	r1, [pc, #660]	; (3ba4 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    390e:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 3bb0 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3912:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3914:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3916:	f04f 0100 	mov.w	r1, #0
    391a:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    391e:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3922:	f100 80e0 	bmi.w	3ae6 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3926:	49a0      	ldr	r1, [pc, #640]	; (3ba8 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3928:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    392a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    392c:	2100      	movs	r1, #0
    392e:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3932:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3936:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3938:	f8df 8274 	ldr.w	r8, [pc, #628]	; 3bb0 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    393c:	f100 8101 	bmi.w	3b42 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3940:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    3942:	499a      	ldr	r1, [pc, #616]	; (3bac <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3944:	4c9a      	ldr	r4, [pc, #616]	; (3bb0 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3946:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3948:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    394a:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    394c:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3950:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3954:	f100 80b0 	bmi.w	3ab8 <usb_isr+0x8a0>
    3958:	7833      	ldrb	r3, [r6, #0]
    395a:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    395c:	2100      	movs	r1, #0
    395e:	f083 0201 	eor.w	r2, r3, #1
    3962:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3966:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    396a:	e6d0      	b.n	370e <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    396c:	f04f 0300 	mov.w	r3, #0
    3970:	f888 3000 	strb.w	r3, [r8]
    3974:	e7b3      	b.n	38de <usb_isr+0x6c6>
    3976:	88a9      	ldrh	r1, [r5, #4]
    3978:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    397c:	2904      	cmp	r1, #4
    397e:	f240 808d 	bls.w	3a9c <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3982:	4a83      	ldr	r2, [pc, #524]	; (3b90 <usb_isr+0x978>)
    3984:	230f      	movs	r3, #15
    3986:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3988:	4a8a      	ldr	r2, [pc, #552]	; (3bb4 <usb_isr+0x99c>)
    398a:	2301      	movs	r3, #1
    398c:	7013      	strb	r3, [r2, #0]
    398e:	e552      	b.n	3436 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3990:	2840      	cmp	r0, #64	; 0x40
    3992:	f67f aee2 	bls.w	375a <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3996:	f044 0402 	orr.w	r4, r4, #2
    399a:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    399e:	9e02      	ldr	r6, [sp, #8]
    39a0:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39a2:	b1ba      	cbz	r2, 39d4 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    39a4:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39a8:	4a83      	ldr	r2, [pc, #524]	; (3bb8 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    39aa:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    39ac:	4633      	mov	r3, r6
    39ae:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    39b0:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    39b4:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39b6:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    39ba:	e6e7      	b.n	378c <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    39bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    39c0:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39c2:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    39c4:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    39c6:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39c8:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    39cc:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39ce:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    39d2:	e6d8      	b.n	3786 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    39d4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    39d8:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    39da:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39dc:	4a77      	ldr	r2, [pc, #476]	; (3bbc <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    39de:	f888 5000 	strb.w	r5, [r8]
    39e2:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    39e4:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39e6:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    39ea:	e6cf      	b.n	378c <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    39ec:	f019 0f08 	tst.w	r9, #8
    39f0:	bf0c      	ite	eq
    39f2:	2302      	moveq	r3, #2
    39f4:	2303      	movne	r3, #3
    39f6:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    39f8:	e458      	b.n	32ac <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    39fa:	4a71      	ldr	r2, [pc, #452]	; (3bc0 <usb_isr+0x9a8>)
    39fc:	210f      	movs	r1, #15
    39fe:	7011      	strb	r1, [r2, #0]
    3a00:	e660      	b.n	36c4 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3a02:	4a70      	ldr	r2, [pc, #448]	; (3bc4 <usb_isr+0x9ac>)
    3a04:	6854      	ldr	r4, [r2, #4]
    3a06:	2c00      	cmp	r4, #0
    3a08:	d0bb      	beq.n	3982 <usb_isr+0x76a>
    3a0a:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3a0c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    3a10:	e003      	b.n	3a1a <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3a12:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    3a14:	6854      	ldr	r4, [r2, #4]
    3a16:	2c00      	cmp	r4, #0
    3a18:	d0b3      	beq.n	3982 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3a1a:	8813      	ldrh	r3, [r2, #0]
    3a1c:	4283      	cmp	r3, r0
    3a1e:	d1f8      	bne.n	3a12 <usb_isr+0x7fa>
    3a20:	8853      	ldrh	r3, [r2, #2]
    3a22:	4573      	cmp	r3, lr
    3a24:	d1f5      	bne.n	3a12 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3a26:	0a00      	lsrs	r0, r0, #8
    3a28:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3a2a:	bf0c      	ite	eq
    3a2c:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    3a30:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    3a34:	e003      	b.n	3a3e <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3a36:	4a64      	ldr	r2, [pc, #400]	; (3bc8 <usb_isr+0x9b0>)
    3a38:	4c64      	ldr	r4, [pc, #400]	; (3bcc <usb_isr+0x9b4>)
    3a3a:	7812      	ldrb	r2, [r2, #0]
    3a3c:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3a3e:	88e8      	ldrh	r0, [r5, #6]
    3a40:	4570      	cmp	r0, lr
    3a42:	f080 813f 	bcs.w	3cc4 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a46:	4962      	ldr	r1, [pc, #392]	; (3bd0 <usb_isr+0x9b8>)
    3a48:	780d      	ldrb	r5, [r1, #0]
    3a4a:	2840      	cmp	r0, #64	; 0x40
    3a4c:	4684      	mov	ip, r0
    3a4e:	f045 0e02 	orr.w	lr, r5, #2
    3a52:	bf28      	it	cs
    3a54:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3a58:	eb04 030c 	add.w	r3, r4, ip
    3a5c:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    3a60:	9302      	str	r3, [sp, #8]
    3a62:	2301      	movs	r3, #1
    3a64:	6054      	str	r4, [r2, #4]
    3a66:	ebcc 0000 	rsb	r0, ip, r0
    3a6a:	ea4f 480c 	mov.w	r8, ip, lsl #16
    3a6e:	2200      	movs	r2, #0
    3a70:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a72:	24c8      	movs	r4, #200	; 0xc8
    3a74:	e65e      	b.n	3734 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3a76:	4c55      	ldr	r4, [pc, #340]	; (3bcc <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    3a78:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3a7c:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3a7e:	7062      	strb	r2, [r4, #1]
    3a80:	e7dd      	b.n	3a3e <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a82:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    3a86:	f47f af7c 	bne.w	3982 <usb_isr+0x76a>
    3a8a:	2301      	movs	r3, #1
    3a8c:	2200      	movs	r2, #0
    3a8e:	9301      	str	r3, [sp, #4]
    3a90:	e63d      	b.n	370e <usb_isr+0x4f6>
    3a92:	f242 3221 	movw	r2, #8993	; 0x2321
    3a96:	4291      	cmp	r1, r2
    3a98:	d0f7      	beq.n	3a8a <usb_isr+0x872>
    3a9a:	e772      	b.n	3982 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3a9c:	886a      	ldrh	r2, [r5, #2]
    3a9e:	2a00      	cmp	r2, #0
    3aa0:	f47f af6f 	bne.w	3982 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3aa4:	483a      	ldr	r0, [pc, #232]	; (3b90 <usb_isr+0x978>)
    3aa6:	f8cd e004 	str.w	lr, [sp, #4]
    3aaa:	0089      	lsls	r1, r1, #2
    3aac:	4408      	add	r0, r1
    3aae:	7801      	ldrb	r1, [r0, #0]
    3ab0:	f021 0102 	bic.w	r1, r1, #2
    3ab4:	7001      	strb	r1, [r0, #0]
    3ab6:	e62a      	b.n	370e <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ab8:	f000 f982 	bl	3dc0 <usb_malloc>
				if (p) {
    3abc:	2800      	cmp	r0, #0
    3abe:	f000 80ef 	beq.w	3ca0 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ac2:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ac4:	4a3d      	ldr	r2, [pc, #244]	; (3bbc <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3ac6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3aca:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3ace:	f000 f977 	bl	3dc0 <usb_malloc>
				if (p) {
    3ad2:	2800      	cmp	r0, #0
    3ad4:	f000 80de 	beq.w	3c94 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    3ad8:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ada:	4a37      	ldr	r2, [pc, #220]	; (3bb8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3adc:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ae0:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    3ae4:	e738      	b.n	3958 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ae6:	f000 f96b 	bl	3dc0 <usb_malloc>
				if (p) {
    3aea:	2800      	cmp	r0, #0
    3aec:	f000 80c0 	beq.w	3c70 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    3af0:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3af2:	4a32      	ldr	r2, [pc, #200]	; (3bbc <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3af4:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3af8:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3afc:	f000 f960 	bl	3dc0 <usb_malloc>
				if (p) {
    3b00:	2800      	cmp	r0, #0
    3b02:	f000 80af 	beq.w	3c64 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    3b06:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b08:	4a2b      	ldr	r2, [pc, #172]	; (3bb8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3b0a:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b0e:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    3b12:	e708      	b.n	3926 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3b14:	f000 f954 	bl	3dc0 <usb_malloc>
				if (p) {
    3b18:	2800      	cmp	r0, #0
    3b1a:	f000 80cd 	beq.w	3cb8 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3b1e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b20:	4a26      	ldr	r2, [pc, #152]	; (3bbc <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3b22:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b26:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3b2a:	f000 f949 	bl	3dc0 <usb_malloc>
				if (p) {
    3b2e:	2800      	cmp	r0, #0
    3b30:	f000 80bc 	beq.w	3cac <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    3b34:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b36:	4a20      	ldr	r2, [pc, #128]	; (3bb8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3b38:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b3c:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    3b40:	e6e3      	b.n	390a <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3b42:	f000 f93d 	bl	3dc0 <usb_malloc>
				if (p) {
    3b46:	2800      	cmp	r0, #0
    3b48:	f000 809e 	beq.w	3c88 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    3b4c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b4e:	4a1b      	ldr	r2, [pc, #108]	; (3bbc <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3b50:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3b54:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3b58:	f000 f932 	bl	3dc0 <usb_malloc>
				if (p) {
    3b5c:	2800      	cmp	r0, #0
    3b5e:	f000 808d 	beq.w	3c7c <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    3b62:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b64:	4a14      	ldr	r2, [pc, #80]	; (3bb8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3b66:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3b6a:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    3b6e:	e6e7      	b.n	3940 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3b70:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    3b72:	3808      	subs	r0, #8
    3b74:	f000 f944 	bl	3e00 <usb_free>
    3b78:	e504      	b.n	3584 <usb_isr+0x36c>
    3b7a:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3b7c:	3808      	subs	r0, #8
    3b7e:	f000 f93f 	bl	3e00 <usb_free>
    3b82:	e4f9      	b.n	3578 <usb_isr+0x360>
    3b84:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    3b86:	3808      	subs	r0, #8
    3b88:	f000 f93a 	bl	3e00 <usb_free>
    3b8c:	e4ee      	b.n	356c <usb_isr+0x354>
    3b8e:	bf00      	nop
    3b90:	400720c0 	.word	0x400720c0
    3b94:	40072080 	.word	0x40072080
    3b98:	000065fc 	.word	0x000065fc
    3b9c:	400720c4 	.word	0x400720c4
    3ba0:	1fff9795 	.word	0x1fff9795
    3ba4:	400720c8 	.word	0x400720c8
    3ba8:	400720cc 	.word	0x400720cc
    3bac:	400720d0 	.word	0x400720d0
    3bb0:	1fff8000 	.word	0x1fff8000
    3bb4:	40072094 	.word	0x40072094
    3bb8:	004000c8 	.word	0x004000c8
    3bbc:	00400088 	.word	0x00400088
    3bc0:	1fff9729 	.word	0x1fff9729
    3bc4:	00006600 	.word	0x00006600
    3bc8:	1fff97a0 	.word	0x1fff97a0
    3bcc:	1fff9798 	.word	0x1fff9798
    3bd0:	1fff9794 	.word	0x1fff9794
    3bd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3bd6:	3808      	subs	r0, #8
    3bd8:	f000 f912 	bl	3e00 <usb_free>
    3bdc:	e4c0      	b.n	3560 <usb_isr+0x348>
    3bde:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    3be0:	3808      	subs	r0, #8
    3be2:	f000 f90d 	bl	3e00 <usb_free>
    3be6:	e4fd      	b.n	35e4 <usb_isr+0x3cc>
    3be8:	6f48      	ldr	r0, [r1, #116]	; 0x74
    3bea:	3808      	subs	r0, #8
    3bec:	f000 f908 	bl	3e00 <usb_free>
    3bf0:	e4f2      	b.n	35d8 <usb_isr+0x3c0>
    3bf2:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    3bf4:	3808      	subs	r0, #8
    3bf6:	f000 f903 	bl	3e00 <usb_free>
    3bfa:	e4e7      	b.n	35cc <usb_isr+0x3b4>
    3bfc:	6e48      	ldr	r0, [r1, #100]	; 0x64
    3bfe:	3808      	subs	r0, #8
    3c00:	f000 f8fe 	bl	3e00 <usb_free>
    3c04:	e4dc      	b.n	35c0 <usb_isr+0x3a8>
    3c06:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    3c08:	3808      	subs	r0, #8
    3c0a:	f000 f8f9 	bl	3e00 <usb_free>
    3c0e:	e4d1      	b.n	35b4 <usb_isr+0x39c>
    3c10:	6d48      	ldr	r0, [r1, #84]	; 0x54
    3c12:	3808      	subs	r0, #8
    3c14:	f000 f8f4 	bl	3e00 <usb_free>
    3c18:	e4c6      	b.n	35a8 <usb_isr+0x390>
    3c1a:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    3c1c:	3808      	subs	r0, #8
    3c1e:	f000 f8ef 	bl	3e00 <usb_free>
    3c22:	e4bb      	b.n	359c <usb_isr+0x384>
    3c24:	6c48      	ldr	r0, [r1, #68]	; 0x44
    3c26:	3808      	subs	r0, #8
    3c28:	f000 f8ea 	bl	3e00 <usb_free>
    3c2c:	e4b0      	b.n	3590 <usb_isr+0x378>
    3c2e:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    3c32:	3808      	subs	r0, #8
    3c34:	f000 f8e4 	bl	3e00 <usb_free>
    3c38:	e4ec      	b.n	3614 <usb_isr+0x3fc>
    3c3a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    3c3e:	3808      	subs	r0, #8
    3c40:	f000 f8de 	bl	3e00 <usb_free>
    3c44:	e4e0      	b.n	3608 <usb_isr+0x3f0>
    3c46:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    3c4a:	3808      	subs	r0, #8
    3c4c:	f000 f8d8 	bl	3e00 <usb_free>
    3c50:	e4d4      	b.n	35fc <usb_isr+0x3e4>
    3c52:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    3c56:	3808      	subs	r0, #8
    3c58:	f000 f8d2 	bl	3e00 <usb_free>
    3c5c:	e4c8      	b.n	35f0 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3c5e:	f04f 0e02 	mov.w	lr, #2
    3c62:	e6ec      	b.n	3a3e <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3c64:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3c66:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3c6a:	3201      	adds	r2, #1
    3c6c:	702a      	strb	r2, [r5, #0]
    3c6e:	e65a      	b.n	3926 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3c70:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3c72:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3c76:	3201      	adds	r2, #1
    3c78:	702a      	strb	r2, [r5, #0]
    3c7a:	e73f      	b.n	3afc <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3c7c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3c7e:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3c82:	3201      	adds	r2, #1
    3c84:	702a      	strb	r2, [r5, #0]
    3c86:	e65b      	b.n	3940 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3c88:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3c8a:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3c8e:	3201      	adds	r2, #1
    3c90:	702a      	strb	r2, [r5, #0]
    3c92:	e761      	b.n	3b58 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3c94:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3c96:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3c9a:	3201      	adds	r2, #1
    3c9c:	702a      	strb	r2, [r5, #0]
    3c9e:	e65b      	b.n	3958 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3ca0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3ca2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    3ca6:	3201      	adds	r2, #1
    3ca8:	702a      	strb	r2, [r5, #0]
    3caa:	e710      	b.n	3ace <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3cac:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3cae:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3cb2:	3201      	adds	r2, #1
    3cb4:	702a      	strb	r2, [r5, #0]
    3cb6:	e628      	b.n	390a <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3cb8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3cba:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3cbe:	3201      	adds	r2, #1
    3cc0:	702a      	strb	r2, [r5, #0]
    3cc2:	e732      	b.n	3b2a <usb_isr+0x912>
    3cc4:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    3cc8:	46f4      	mov	ip, lr
    3cca:	bf28      	it	cs
    3ccc:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3cd0:	eb04 030c 	add.w	r3, r4, ip
    3cd4:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3cd6:	2301      	movs	r3, #1
    3cd8:	ebcc 000e 	rsb	r0, ip, lr
    3cdc:	ea4f 480c 	mov.w	r8, ip, lsl #16
    3ce0:	2200      	movs	r2, #0
    3ce2:	9301      	str	r3, [sp, #4]
    3ce4:	e518      	b.n	3718 <usb_isr+0x500>
    3ce6:	bf00      	nop

00003ce8 <usb_init>:
}



void usb_init(void)
{
    3ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3cea:	f000 fe5b 	bl	49a4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3cee:	4b29      	ldr	r3, [pc, #164]	; (3d94 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3cf0:	4829      	ldr	r0, [pc, #164]	; (3d98 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3cf2:	4c2a      	ldr	r4, [pc, #168]	; (3d9c <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3cf4:	4f2a      	ldr	r7, [pc, #168]	; (3da0 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3cf6:	4d2b      	ldr	r5, [pc, #172]	; (3da4 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3cf8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 3db8 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    3cfc:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 3dbc <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3d00:	4e29      	ldr	r6, [pc, #164]	; (3da8 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d02:	2200      	movs	r2, #0
    3d04:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    3d06:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d08:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    3d0a:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d0c:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    3d0e:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d10:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    3d12:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d14:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    3d16:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d18:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    3d1a:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d1c:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    3d1e:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d20:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    3d22:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d24:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    3d26:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d28:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    3d2a:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d2c:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    3d2e:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d30:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    3d32:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d34:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    3d36:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d38:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    3d3a:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d3c:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    3d3e:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d40:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    3d42:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3d48:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    3d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3d4e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    3d52:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3d54:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3d58:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3d5a:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3d5e:	4913      	ldr	r1, [pc, #76]	; (3dac <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3d60:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3d62:	0e1b      	lsrs	r3, r3, #24
    3d64:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3d66:	23ff      	movs	r3, #255	; 0xff
    3d68:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3d6c:	4d10      	ldr	r5, [pc, #64]	; (3db0 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3d6e:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3d72:	4810      	ldr	r0, [pc, #64]	; (3db4 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3d74:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3d76:	2301      	movs	r3, #1
    3d78:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    3d7a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3d7e:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3d80:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3d84:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3d86:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3d8a:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3d8c:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3d8e:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    3d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d94:	1fff8000 	.word	0x1fff8000
    3d98:	40048034 	.word	0x40048034
    3d9c:	4007209c 	.word	0x4007209c
    3da0:	400720b0 	.word	0x400720b0
    3da4:	400720b4 	.word	0x400720b4
    3da8:	40072094 	.word	0x40072094
    3dac:	40072010 	.word	0x40072010
    3db0:	e000e449 	.word	0xe000e449
    3db4:	e000e108 	.word	0xe000e108
    3db8:	40072080 	.word	0x40072080
    3dbc:	40072088 	.word	0x40072088

00003dc0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3dc0:	b672      	cpsid	i
	avail = usb_buffer_available;
    3dc2:	480d      	ldr	r0, [pc, #52]	; (3df8 <usb_malloc+0x38>)
    3dc4:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3dc6:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3dca:	2b0b      	cmp	r3, #11
    3dcc:	dc10      	bgt.n	3df0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3dce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3dd2:	40d9      	lsrs	r1, r3
    3dd4:	ea22 0201 	bic.w	r2, r2, r1
    3dd8:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3dda:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3ddc:	4807      	ldr	r0, [pc, #28]	; (3dfc <usb_malloc+0x3c>)
    3dde:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3de2:	00db      	lsls	r3, r3, #3
    3de4:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3de6:	2100      	movs	r1, #0
    3de8:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3dea:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3dec:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3dee:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3df0:	b662      	cpsie	i
		return NULL;
    3df2:	2000      	movs	r0, #0
    3df4:	4770      	bx	lr
    3df6:	bf00      	nop
    3df8:	1fff89f0 	.word	0x1fff89f0
    3dfc:	1fff83bc 	.word	0x1fff83bc

00003e00 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3e00:	4b0d      	ldr	r3, [pc, #52]	; (3e38 <usb_free+0x38>)
    3e02:	4a0e      	ldr	r2, [pc, #56]	; (3e3c <usb_free+0x3c>)
    3e04:	1ac3      	subs	r3, r0, r3
    3e06:	fba2 2303 	umull	r2, r3, r2, r3
    3e0a:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3e0c:	2b0b      	cmp	r3, #11
    3e0e:	d80c      	bhi.n	3e2a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3e10:	4a0b      	ldr	r2, [pc, #44]	; (3e40 <usb_free+0x40>)
    3e12:	7812      	ldrb	r2, [r2, #0]
    3e14:	b952      	cbnz	r2, 3e2c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    3e16:	b672      	cpsid	i
	usb_buffer_available |= mask;
    3e18:	480a      	ldr	r0, [pc, #40]	; (3e44 <usb_free+0x44>)
    3e1a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3e1e:	6802      	ldr	r2, [r0, #0]
    3e20:	fa21 f303 	lsr.w	r3, r1, r3
    3e24:	431a      	orrs	r2, r3
    3e26:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3e28:	b662      	cpsie	i
    3e2a:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3e2c:	4a06      	ldr	r2, [pc, #24]	; (3e48 <usb_free+0x48>)
    3e2e:	7812      	ldrb	r2, [r2, #0]
    3e30:	2a00      	cmp	r2, #0
    3e32:	d0f0      	beq.n	3e16 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3e34:	f7ff b94a 	b.w	30cc <usb_rx_memory>
    3e38:	1fff83bc 	.word	0x1fff83bc
    3e3c:	38e38e39 	.word	0x38e38e39
    3e40:	1fff9795 	.word	0x1fff9795
    3e44:	1fff89f0 	.word	0x1fff89f0
    3e48:	1fff97a0 	.word	0x1fff97a0

00003e4c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    3e4c:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    3e4e:	4d0f      	ldr	r5, [pc, #60]	; (3e8c <usb_serial_getchar+0x40>)
    3e50:	6828      	ldr	r0, [r5, #0]
    3e52:	b178      	cbz	r0, 3e74 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    3e54:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    3e56:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    3e58:	18c1      	adds	r1, r0, r3
    3e5a:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    3e5c:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    3e5e:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    3e60:	d202      	bcs.n	3e68 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    3e62:	8043      	strh	r3, [r0, #2]
	}
	return c;
    3e64:	4620      	mov	r0, r4
}
    3e66:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    3e68:	f7ff ffca 	bl	3e00 <usb_free>
		rx_packet = NULL;
    3e6c:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    3e6e:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    3e70:	602b      	str	r3, [r5, #0]
    3e72:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3e74:	4b06      	ldr	r3, [pc, #24]	; (3e90 <usb_serial_getchar+0x44>)
    3e76:	781b      	ldrb	r3, [r3, #0]
    3e78:	b12b      	cbz	r3, 3e86 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3e7a:	2003      	movs	r0, #3
    3e7c:	f7ff f8f2 	bl	3064 <usb_rx>
    3e80:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    3e82:	2800      	cmp	r0, #0
    3e84:	d1e6      	bne.n	3e54 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3e86:	f04f 30ff 	mov.w	r0, #4294967295
    3e8a:	bd38      	pop	{r3, r4, r5, pc}
    3e8c:	1fff97b4 	.word	0x1fff97b4
    3e90:	1fff97a0 	.word	0x1fff97a0

00003e94 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    3e94:	b510      	push	{r4, lr}
	if (!rx_packet) {
    3e96:	4c09      	ldr	r4, [pc, #36]	; (3ebc <usb_serial_peekchar+0x28>)
    3e98:	6820      	ldr	r0, [r4, #0]
    3e9a:	b118      	cbz	r0, 3ea4 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    3e9c:	8843      	ldrh	r3, [r0, #2]
    3e9e:	4418      	add	r0, r3
    3ea0:	7a00      	ldrb	r0, [r0, #8]
}
    3ea2:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3ea4:	4b06      	ldr	r3, [pc, #24]	; (3ec0 <usb_serial_peekchar+0x2c>)
    3ea6:	781b      	ldrb	r3, [r3, #0]
    3ea8:	b12b      	cbz	r3, 3eb6 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3eaa:	2003      	movs	r0, #3
    3eac:	f7ff f8da 	bl	3064 <usb_rx>
    3eb0:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    3eb2:	2800      	cmp	r0, #0
    3eb4:	d1f2      	bne.n	3e9c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3eb6:	f04f 30ff 	mov.w	r0, #4294967295
    3eba:	bd10      	pop	{r4, pc}
    3ebc:	1fff97b4 	.word	0x1fff97b4
    3ec0:	1fff97a0 	.word	0x1fff97a0

00003ec4 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3ec4:	4b04      	ldr	r3, [pc, #16]	; (3ed8 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    3ec6:	4a05      	ldr	r2, [pc, #20]	; (3edc <usb_serial_available+0x18>)
    3ec8:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    3eca:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3ecc:	b11b      	cbz	r3, 3ed6 <usb_serial_available+0x12>
    3ece:	881a      	ldrh	r2, [r3, #0]
    3ed0:	885b      	ldrh	r3, [r3, #2]
    3ed2:	1ad3      	subs	r3, r2, r3
    3ed4:	4418      	add	r0, r3
	return count;
}
    3ed6:	4770      	bx	lr
    3ed8:	1fff97b4 	.word	0x1fff97b4
    3edc:	1fff9920 	.word	0x1fff9920

00003ee0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    3ee0:	4b0b      	ldr	r3, [pc, #44]	; (3f10 <usb_serial_flush_input+0x30>)
    3ee2:	781b      	ldrb	r3, [r3, #0]
    3ee4:	b19b      	cbz	r3, 3f0e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    3ee6:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    3ee8:	4c0a      	ldr	r4, [pc, #40]	; (3f14 <usb_serial_flush_input+0x34>)
    3eea:	6820      	ldr	r0, [r4, #0]
    3eec:	b148      	cbz	r0, 3f02 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    3eee:	f7ff ff87 	bl	3e00 <usb_free>
		rx_packet = NULL;
    3ef2:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3ef4:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    3ef6:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3ef8:	f7ff f8b4 	bl	3064 <usb_rx>
		if (!rx) break;
    3efc:	b130      	cbz	r0, 3f0c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    3efe:	f7ff ff7f 	bl	3e00 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3f02:	2003      	movs	r0, #3
    3f04:	f7ff f8ae 	bl	3064 <usb_rx>
		if (!rx) break;
    3f08:	2800      	cmp	r0, #0
    3f0a:	d1f8      	bne.n	3efe <usb_serial_flush_input+0x1e>
    3f0c:	bd10      	pop	{r4, pc}
    3f0e:	4770      	bx	lr
    3f10:	1fff97a0 	.word	0x1fff97a0
    3f14:	1fff97b4 	.word	0x1fff97b4

00003f18 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3f1c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 4018 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3f20:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3f22:	2201      	movs	r2, #1
    3f24:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    3f28:	9101      	str	r1, [sp, #4]
    3f2a:	b369      	cbz	r1, 3f88 <usb_serial_write+0x70>
    3f2c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 401c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3f30:	4f36      	ldr	r7, [pc, #216]	; (400c <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3f32:	9e01      	ldr	r6, [sp, #4]
    3f34:	4683      	mov	fp, r0
		if (!tx_packet) {
    3f36:	f8d8 0000 	ldr.w	r0, [r8]
    3f3a:	b3b0      	cbz	r0, 3faa <usb_serial_write+0x92>
    3f3c:	4d34      	ldr	r5, [pc, #208]	; (4010 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    3f3e:	8844      	ldrh	r4, [r0, #2]
    3f40:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    3f44:	42b1      	cmp	r1, r6
    3f46:	bf28      	it	cs
    3f48:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3f4a:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3f4e:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3f50:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3f54:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    3f56:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3f58:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    3f5c:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    3f60:	b151      	cbz	r1, 3f78 <usb_serial_write+0x60>
    3f62:	3c01      	subs	r4, #1
    3f64:	4422      	add	r2, r4
    3f66:	4459      	add	r1, fp
    3f68:	f81b 4b01 	ldrb.w	r4, [fp], #1
    3f6c:	f802 4f01 	strb.w	r4, [r2, #1]!
    3f70:	458b      	cmp	fp, r1
    3f72:	d1f9      	bne.n	3f68 <usb_serial_write+0x50>
    3f74:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    3f78:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    3f7c:	d80b      	bhi.n	3f96 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    3f7e:	4a25      	ldr	r2, [pc, #148]	; (4014 <usb_serial_write+0xfc>)
    3f80:	2105      	movs	r1, #5
    3f82:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3f84:	2e00      	cmp	r6, #0
    3f86:	d1d6      	bne.n	3f36 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    3f88:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    3f8a:	2300      	movs	r3, #0
    3f8c:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    3f90:	b003      	add	sp, #12
    3f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    3f96:	2240      	movs	r2, #64	; 0x40
    3f98:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3f9a:	4601      	mov	r1, r0
    3f9c:	2004      	movs	r0, #4
    3f9e:	f7ff f8f9 	bl	3194 <usb_tx>
			tx_packet = NULL;
    3fa2:	2200      	movs	r2, #0
    3fa4:	f8c8 2000 	str.w	r2, [r8]
    3fa8:	e7e9      	b.n	3f7e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3faa:	783a      	ldrb	r2, [r7, #0]
    3fac:	b32a      	cbz	r2, 3ffa <usb_serial_write+0xe2>
    3fae:	4d18      	ldr	r5, [pc, #96]	; (4010 <usb_serial_write+0xf8>)
    3fb0:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    3fb4:	f04f 0a01 	mov.w	sl, #1
    3fb8:	e007      	b.n	3fca <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3fba:	3c01      	subs	r4, #1
    3fbc:	d016      	beq.n	3fec <usb_serial_write+0xd4>
    3fbe:	782a      	ldrb	r2, [r5, #0]
    3fc0:	b9a2      	cbnz	r2, 3fec <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    3fc2:	f000 fadf 	bl	4584 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3fc6:	783a      	ldrb	r2, [r7, #0]
    3fc8:	b1ba      	cbz	r2, 3ffa <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    3fca:	2004      	movs	r0, #4
    3fcc:	f7ff f868 	bl	30a0 <usb_tx_packet_count>
    3fd0:	2807      	cmp	r0, #7
    3fd2:	d8f2      	bhi.n	3fba <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    3fd4:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    3fd8:	f7ff fef2 	bl	3dc0 <usb_malloc>
    3fdc:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    3fe0:	2800      	cmp	r0, #0
    3fe2:	d1ac      	bne.n	3f3e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    3fe4:	4b0c      	ldr	r3, [pc, #48]	; (4018 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3fe6:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    3fe8:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3fea:	d1e8      	bne.n	3fbe <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    3fec:	2301      	movs	r3, #1
					return -1;
    3fee:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    3ff2:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3ff4:	b003      	add	sp, #12
    3ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    3ffa:	2300      	movs	r3, #0
					return -1;
    3ffc:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    4000:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    4004:	b003      	add	sp, #12
    4006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    400a:	bf00      	nop
    400c:	1fff97a0 	.word	0x1fff97a0
    4010:	1fff97b0 	.word	0x1fff97b0
    4014:	1fff97a8 	.word	0x1fff97a8
    4018:	1fff97a9 	.word	0x1fff97a9
    401c:	1fff97ac 	.word	0x1fff97ac

00004020 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4020:	b500      	push	{lr}
    4022:	b083      	sub	sp, #12
    4024:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    4026:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    4028:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    402c:	4618      	mov	r0, r3
    402e:	f7ff ff73 	bl	3f18 <usb_serial_write>
}
    4032:	b003      	add	sp, #12
    4034:	f85d fb04 	ldr.w	pc, [sp], #4

00004038 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    4038:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    403a:	4d0e      	ldr	r5, [pc, #56]	; (4074 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    403c:	4c0e      	ldr	r4, [pc, #56]	; (4078 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    403e:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    4040:	2301      	movs	r3, #1
    4042:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    4044:	b128      	cbz	r0, 4052 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    4046:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    4048:	2300      	movs	r3, #0
    404a:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    404c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    4050:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    4052:	4b0a      	ldr	r3, [pc, #40]	; (407c <usb_serial_write_buffer_free+0x44>)
    4054:	781b      	ldrb	r3, [r3, #0]
    4056:	b913      	cbnz	r3, 405e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    4058:	2000      	movs	r0, #0
    405a:	7020      	strb	r0, [r4, #0]
			return 0;
    405c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    405e:	2004      	movs	r0, #4
    4060:	f7ff f81e 	bl	30a0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    4064:	2807      	cmp	r0, #7
    4066:	d8f7      	bhi.n	4058 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    4068:	f7ff feaa 	bl	3dc0 <usb_malloc>
    406c:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    406e:	2800      	cmp	r0, #0
    4070:	d1e9      	bne.n	4046 <usb_serial_write_buffer_free+0xe>
    4072:	e7f1      	b.n	4058 <usb_serial_write_buffer_free+0x20>
    4074:	1fff97ac 	.word	0x1fff97ac
    4078:	1fff97a9 	.word	0x1fff97a9
    407c:	1fff97a0 	.word	0x1fff97a0

00004080 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    4080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    4082:	4b11      	ldr	r3, [pc, #68]	; (40c8 <usb_serial_flush_output+0x48>)
    4084:	781b      	ldrb	r3, [r3, #0]
    4086:	b18b      	cbz	r3, 40ac <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    4088:	4e10      	ldr	r6, [pc, #64]	; (40cc <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    408a:	4d11      	ldr	r5, [pc, #68]	; (40d0 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    408c:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    408e:	2701      	movs	r7, #1
    4090:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    4092:	b164      	cbz	r4, 40ae <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    4094:	4a0f      	ldr	r2, [pc, #60]	; (40d4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    4096:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    4098:	2700      	movs	r7, #0
    409a:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    409c:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    409e:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    40a0:	2004      	movs	r0, #4
    40a2:	f7ff f877 	bl	3194 <usb_tx>
		tx_packet = NULL;
    40a6:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    40a8:	2300      	movs	r3, #0
    40aa:	702b      	strb	r3, [r5, #0]
    40ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    40ae:	f7ff fe87 	bl	3dc0 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    40b2:	4b08      	ldr	r3, [pc, #32]	; (40d4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    40b4:	b128      	cbz	r0, 40c2 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    40b6:	4601      	mov	r1, r0
    40b8:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    40ba:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    40bc:	f7ff f86a 	bl	3194 <usb_tx>
    40c0:	e7f2      	b.n	40a8 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    40c2:	701f      	strb	r7, [r3, #0]
    40c4:	e7f0      	b.n	40a8 <usb_serial_flush_output+0x28>
    40c6:	bf00      	nop
    40c8:	1fff97a0 	.word	0x1fff97a0
    40cc:	1fff97ac 	.word	0x1fff97ac
    40d0:	1fff97a9 	.word	0x1fff97a9
    40d4:	1fff97a8 	.word	0x1fff97a8

000040d8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    40d8:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    40da:	4b0e      	ldr	r3, [pc, #56]	; (4114 <usb_serial_flush_callback+0x3c>)
    40dc:	781b      	ldrb	r3, [r3, #0]
    40de:	b973      	cbnz	r3, 40fe <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    40e0:	4c0d      	ldr	r4, [pc, #52]	; (4118 <usb_serial_flush_callback+0x40>)
    40e2:	6821      	ldr	r1, [r4, #0]
    40e4:	b161      	cbz	r1, 4100 <usb_serial_flush_callback+0x28>
    40e6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    40ea:	884b      	ldrh	r3, [r1, #2]
    40ec:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    40ee:	2004      	movs	r0, #4
    40f0:	f7ff f850 	bl	3194 <usb_tx>
		tx_packet = NULL;
    40f4:	6025      	str	r5, [r4, #0]
    40f6:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    40f8:	4b08      	ldr	r3, [pc, #32]	; (411c <usb_serial_flush_callback+0x44>)
    40fa:	2201      	movs	r2, #1
    40fc:	701a      	strb	r2, [r3, #0]
    40fe:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    4100:	f7ff fe5e 	bl	3dc0 <usb_malloc>
		if (tx) {
    4104:	2800      	cmp	r0, #0
    4106:	d0f7      	beq.n	40f8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    4108:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    410a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    410e:	2004      	movs	r0, #4
    4110:	f7ff b840 	b.w	3194 <usb_tx>
    4114:	1fff97a9 	.word	0x1fff97a9
    4118:	1fff97ac 	.word	0x1fff97ac
    411c:	1fff97a8 	.word	0x1fff97a8

00004120 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4120:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4122:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4126:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4128:	7f43      	ldrb	r3, [r0, #29]
    412a:	b933      	cbnz	r3, 413a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    412c:	7f01      	ldrb	r1, [r0, #28]
    412e:	2901      	cmp	r1, #1
    4130:	d007      	beq.n	4142 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4132:	2903      	cmp	r1, #3
    4134:	d00f      	beq.n	4156 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4136:	2301      	movs	r3, #1
    4138:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    413a:	b902      	cbnz	r2, 413e <EventResponder::triggerEventNotImmediate()+0x1e>
    413c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    413e:	bc10      	pop	{r4}
    4140:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4142:	4c12      	ldr	r4, [pc, #72]	; (418c <EventResponder::triggerEventNotImmediate()+0x6c>)
    4144:	6821      	ldr	r1, [r4, #0]
    4146:	b1a1      	cbz	r1, 4172 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4148:	4911      	ldr	r1, [pc, #68]	; (4190 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    414a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    414c:	680b      	ldr	r3, [r1, #0]
    414e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4150:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4152:	6158      	str	r0, [r3, #20]
    4154:	e7ef      	b.n	4136 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4156:	4c0f      	ldr	r4, [pc, #60]	; (4194 <EventResponder::triggerEventNotImmediate()+0x74>)
    4158:	6821      	ldr	r1, [r4, #0]
    415a:	b181      	cbz	r1, 417e <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    415c:	490e      	ldr	r1, [pc, #56]	; (4198 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    415e:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4160:	680b      	ldr	r3, [r1, #0]
    4162:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4164:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4166:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4168:	4b0c      	ldr	r3, [pc, #48]	; (419c <EventResponder::triggerEventNotImmediate()+0x7c>)
    416a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    416e:	6019      	str	r1, [r3, #0]
    4170:	e7e1      	b.n	4136 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4172:	4b07      	ldr	r3, [pc, #28]	; (4190 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4174:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4176:	6181      	str	r1, [r0, #24]
				firstYield = this;
    4178:	6020      	str	r0, [r4, #0]
				lastYield = this;
    417a:	6018      	str	r0, [r3, #0]
    417c:	e7db      	b.n	4136 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    417e:	4b06      	ldr	r3, [pc, #24]	; (4198 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4180:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4182:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    4184:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    4186:	6018      	str	r0, [r3, #0]
    4188:	e7ee      	b.n	4168 <EventResponder::triggerEventNotImmediate()+0x48>
    418a:	bf00      	nop
    418c:	1fff97cc 	.word	0x1fff97cc
    4190:	1fff97c8 	.word	0x1fff97c8
    4194:	1fff97bc 	.word	0x1fff97bc
    4198:	1fff97c0 	.word	0x1fff97c0
    419c:	e000ed04 	.word	0xe000ed04

000041a0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    41a0:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    41a2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    41a6:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    41a8:	4c0c      	ldr	r4, [pc, #48]	; (41dc <EventResponder::runFromInterrupt()+0x3c>)
    41aa:	6820      	ldr	r0, [r4, #0]
		if (first) {
    41ac:	b180      	cbz	r0, 41d0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    41ae:	4e0c      	ldr	r6, [pc, #48]	; (41e0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    41b0:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    41b2:	6943      	ldr	r3, [r0, #20]
    41b4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    41b6:	b173      	cbz	r3, 41d6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    41b8:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41ba:	b902      	cbnz	r2, 41be <EventResponder::runFromInterrupt()+0x1e>
    41bc:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    41be:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    41c0:	6883      	ldr	r3, [r0, #8]
    41c2:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    41c4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    41c8:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    41ca:	6820      	ldr	r0, [r4, #0]
		if (first) {
    41cc:	2800      	cmp	r0, #0
    41ce:	d1f0      	bne.n	41b2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41d0:	b902      	cbnz	r2, 41d4 <EventResponder::runFromInterrupt()+0x34>
    41d2:	b662      	cpsie	i
    41d4:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    41d6:	6033      	str	r3, [r6, #0]
    41d8:	e7ef      	b.n	41ba <EventResponder::runFromInterrupt()+0x1a>
    41da:	bf00      	nop
    41dc:	1fff97bc 	.word	0x1fff97bc
    41e0:	1fff97c0 	.word	0x1fff97c0

000041e4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    41e4:	f7ff bfdc 	b.w	41a0 <EventResponder::runFromInterrupt()>

000041e8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    41e8:	4a18      	ldr	r2, [pc, #96]	; (424c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    41ea:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    41ec:	6814      	ldr	r4, [r2, #0]
    41ee:	2c00      	cmp	r4, #0
    41f0:	d027      	beq.n	4242 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    41f2:	6803      	ldr	r3, [r0, #0]
    41f4:	6821      	ldr	r1, [r4, #0]
    41f6:	428b      	cmp	r3, r1
    41f8:	d20e      	bcs.n	4218 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    41fa:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    41fc:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    41fe:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    4200:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4202:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4204:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4206:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4208:	2302      	movs	r3, #2
    420a:	7503      	strb	r3, [r0, #20]
}
    420c:	bc30      	pop	{r4, r5}
    420e:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4210:	6811      	ldr	r1, [r2, #0]
    4212:	428b      	cmp	r3, r1
    4214:	4614      	mov	r4, r2
    4216:	d308      	bcc.n	422a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4218:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    421a:	1a5b      	subs	r3, r3, r1
    421c:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    421e:	2a00      	cmp	r2, #0
    4220:	d1f6      	bne.n	4210 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4222:	6082      	str	r2, [r0, #8]
		_prev = timer;
    4224:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    4226:	60a0      	str	r0, [r4, #8]
    4228:	e7ee      	b.n	4208 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    422a:	68d2      	ldr	r2, [r2, #12]
    422c:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    422e:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4230:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    4232:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4234:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    4236:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4238:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    423a:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    423c:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    423e:	bc30      	pop	{r4, r5}
    4240:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4242:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    4244:	60c4      	str	r4, [r0, #12]
		listActive = this;
    4246:	6010      	str	r0, [r2, #0]
    4248:	e7de      	b.n	4208 <MillisTimer::addToActiveList()+0x20>
    424a:	bf00      	nop
    424c:	1fff97c4 	.word	0x1fff97c4

00004250 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4252:	4e22      	ldr	r6, [pc, #136]	; (42dc <MillisTimer::runFromTimer()+0x8c>)
    4254:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    4256:	b32c      	cbz	r4, 42a4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4258:	6823      	ldr	r3, [r4, #0]
    425a:	2b00      	cmp	r3, #0
    425c:	d13a      	bne.n	42d4 <MillisTimer::runFromTimer()+0x84>
    425e:	4f20      	ldr	r7, [pc, #128]	; (42e0 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4260:	461d      	mov	r5, r3
    4262:	e004      	b.n	426e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4264:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4266:	b1ec      	cbz	r4, 42a4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4268:	6823      	ldr	r3, [r4, #0]
    426a:	2b00      	cmp	r3, #0
    426c:	d132      	bne.n	42d4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    426e:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4270:	b103      	cbz	r3, 4274 <MillisTimer::runFromTimer()+0x24>
    4272:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4274:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4276:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4278:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    427a:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    427c:	681b      	ldr	r3, [r3, #0]
    427e:	42bb      	cmp	r3, r7
    4280:	d121      	bne.n	42c6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4282:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4284:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4286:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4288:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    428a:	d020      	beq.n	42ce <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    428c:	f7ff ff48 	bl	4120 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4290:	6863      	ldr	r3, [r4, #4]
    4292:	2b00      	cmp	r3, #0
    4294:	d0e6      	beq.n	4264 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4296:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    4298:	4620      	mov	r0, r4
    429a:	f7ff ffa5 	bl	41e8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    429e:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    42a0:	2c00      	cmp	r4, #0
    42a2:	d1e1      	bne.n	4268 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    42a4:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    42a8:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    42aa:	4a0e      	ldr	r2, [pc, #56]	; (42e4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    42ac:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    42ae:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    42b0:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    42b2:	b903      	cbnz	r3, 42b6 <MillisTimer::runFromTimer()+0x66>
    42b4:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    42b6:	b128      	cbz	r0, 42c4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    42b8:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    42ba:	f7ff ff95 	bl	41e8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    42be:	4620      	mov	r0, r4
    42c0:	2800      	cmp	r0, #0
    42c2:	d1f9      	bne.n	42b8 <MillisTimer::runFromTimer()+0x68>
    42c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    42c6:	4622      	mov	r2, r4
    42c8:	2100      	movs	r1, #0
    42ca:	4798      	blx	r3
    42cc:	e7e0      	b.n	4290 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    42ce:	6883      	ldr	r3, [r0, #8]
    42d0:	4798      	blx	r3
    42d2:	e7dd      	b.n	4290 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    42d4:	3b01      	subs	r3, #1
    42d6:	6023      	str	r3, [r4, #0]
			break;
    42d8:	e7e4      	b.n	42a4 <MillisTimer::runFromTimer()+0x54>
    42da:	bf00      	nop
    42dc:	1fff97c4 	.word	0x1fff97c4
    42e0:	00001115 	.word	0x00001115
    42e4:	1fff97d4 	.word	0x1fff97d4

000042e8 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    42e8:	4a02      	ldr	r2, [pc, #8]	; (42f4 <systick_isr+0xc>)
    42ea:	6813      	ldr	r3, [r2, #0]
    42ec:	3301      	adds	r3, #1
    42ee:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    42f0:	f7ff bfae 	b.w	4250 <MillisTimer::runFromTimer()>
    42f4:	1fff9640 	.word	0x1fff9640

000042f8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    42f8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    42fa:	f7fc f8b7 	bl	46c <setup>
	while (1) {
		loop();
    42fe:	f7fc f943 	bl	588 <loop>
		yield();
    4302:	f000 f93f 	bl	4584 <yield>
    4306:	e7fa      	b.n	42fe <main+0x6>

00004308 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4308:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    430a:	4a06      	ldr	r2, [pc, #24]	; (4324 <Print::println()+0x1c>)
	return write(buf, 2);
    430c:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    430e:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    4310:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4312:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4314:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4316:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    431a:	2202      	movs	r2, #2
    431c:	4798      	blx	r3
}
    431e:	b003      	add	sp, #12
    4320:	f85d fb04 	ldr.w	pc, [sp], #4
    4324:	000065c4 	.word	0x000065c4

00004328 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    4328:	b5f0      	push	{r4, r5, r6, r7, lr}
    432a:	4607      	mov	r7, r0
    432c:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    432e:	2a00      	cmp	r2, #0
    4330:	d033      	beq.n	439a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    4332:	2a01      	cmp	r2, #1
    4334:	bf08      	it	eq
    4336:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    4338:	b351      	cbz	r1, 4390 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    433a:	2421      	movs	r4, #33	; 0x21
    433c:	e000      	b.n	4340 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    433e:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    4340:	fbb1 f5f2 	udiv	r5, r1, r2
    4344:	fb02 1115 	mls	r1, r2, r5, r1
    4348:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    434a:	2909      	cmp	r1, #9
    434c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    4350:	bf98      	it	ls
    4352:	b2c8      	uxtbls	r0, r1
    4354:	a90a      	add	r1, sp, #40	; 0x28
    4356:	bf88      	it	hi
    4358:	3037      	addhi	r0, #55	; 0x37
    435a:	4421      	add	r1, r4
    435c:	bf88      	it	hi
    435e:	b2c0      	uxtbhi	r0, r0
    4360:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    4364:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    4366:	4629      	mov	r1, r5
    4368:	2d00      	cmp	r5, #0
    436a:	d1e8      	bne.n	433e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    436c:	b133      	cbz	r3, 437c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    436e:	3c01      	subs	r4, #1
    4370:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    4372:	ab0a      	add	r3, sp, #40	; 0x28
    4374:	4423      	add	r3, r4
    4376:	222d      	movs	r2, #45	; 0x2d
    4378:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    437c:	683b      	ldr	r3, [r7, #0]
    437e:	aa01      	add	r2, sp, #4
    4380:	1911      	adds	r1, r2, r4
    4382:	685b      	ldr	r3, [r3, #4]
    4384:	4638      	mov	r0, r7
    4386:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    438a:	4798      	blx	r3
}
    438c:	b00b      	add	sp, #44	; 0x2c
    438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4390:	2230      	movs	r2, #48	; 0x30
    4392:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    4396:	2421      	movs	r4, #33	; 0x21
    4398:	e7e8      	b.n	436c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    439a:	6803      	ldr	r3, [r0, #0]
    439c:	b2c9      	uxtb	r1, r1
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    43a2:	b00b      	add	sp, #44	; 0x2c
    43a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43a6:	bf00      	nop

000043a8 <Print::printFloat(double, unsigned char)>:

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
    43a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    43ac:	b085      	sub	sp, #20
    43ae:	4680      	mov	r8, r0
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    43b0:	4619      	mov	r1, r3
    43b2:	4610      	mov	r0, r2
}

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
    43b4:	4616      	mov	r6, r2
    43b6:	461f      	mov	r7, r3
    43b8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    43bc:	f000 ff8c 	bl	52d8 <__aeabi_dcmpun>
    43c0:	2800      	cmp	r0, #0
    43c2:	f040 80b1 	bne.w	4528 <Print::printFloat(double, unsigned char)+0x180>
    	if (isinf(number)) return print("inf");
    43c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
    43ca:	4630      	mov	r0, r6
    43cc:	4621      	mov	r1, r4
    43ce:	f04f 32ff 	mov.w	r2, #4294967295
    43d2:	4b59      	ldr	r3, [pc, #356]	; (4538 <Print::printFloat(double, unsigned char)+0x190>)
    43d4:	f000 ff80 	bl	52d8 <__aeabi_dcmpun>
    43d8:	b998      	cbnz	r0, 4402 <Print::printFloat(double, unsigned char)+0x5a>
    43da:	4630      	mov	r0, r6
    43dc:	4621      	mov	r1, r4
    43de:	f04f 32ff 	mov.w	r2, #4294967295
    43e2:	4b55      	ldr	r3, [pc, #340]	; (4538 <Print::printFloat(double, unsigned char)+0x190>)
    43e4:	f000 ff5a 	bl	529c <__aeabi_dcmple>
    43e8:	b958      	cbnz	r0, 4402 <Print::printFloat(double, unsigned char)+0x5a>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    43ea:	f8d8 3000 	ldr.w	r3, [r8]
    43ee:	4953      	ldr	r1, [pc, #332]	; (453c <Print::printFloat(double, unsigned char)+0x194>)
    43f0:	685b      	ldr	r3, [r3, #4]
    43f2:	4640      	mov	r0, r8
    43f4:	2203      	movs	r2, #3
    43f6:	4798      	blx	r3
    43f8:	4681      	mov	r9, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    43fa:	4648      	mov	r0, r9
    43fc:	b005      	add	sp, #20
    43fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    4402:	4630      	mov	r0, r6
    4404:	4639      	mov	r1, r7
    4406:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    440a:	4b4d      	ldr	r3, [pc, #308]	; (4540 <Print::printFloat(double, unsigned char)+0x198>)
    440c:	f000 ff5a 	bl	52c4 <__aeabi_dcmpgt>
    4410:	2800      	cmp	r0, #0
    4412:	d170      	bne.n	44f6 <Print::printFloat(double, unsigned char)+0x14e>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    4414:	4630      	mov	r0, r6
    4416:	4639      	mov	r1, r7
    4418:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    441c:	4b49      	ldr	r3, [pc, #292]	; (4544 <Print::printFloat(double, unsigned char)+0x19c>)
    441e:	f000 ff33 	bl	5288 <__aeabi_dcmplt>
    4422:	2800      	cmp	r0, #0
    4424:	d167      	bne.n	44f6 <Print::printFloat(double, unsigned char)+0x14e>
	
	// Handle negative numbers
	if (number < 0.0) {
    4426:	4630      	mov	r0, r6
    4428:	4639      	mov	r1, r7
    442a:	2200      	movs	r2, #0
    442c:	2300      	movs	r3, #0
    442e:	f000 ff2b 	bl	5288 <__aeabi_dcmplt>
    4432:	2800      	cmp	r0, #0
    4434:	d163      	bne.n	44fe <Print::printFloat(double, unsigned char)+0x156>

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    4436:	4681      	mov	r9, r0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    4438:	2d00      	cmp	r5, #0
    443a:	d065      	beq.n	4508 <Print::printFloat(double, unsigned char)+0x160>
    443c:	4b42      	ldr	r3, [pc, #264]	; (4548 <Print::printFloat(double, unsigned char)+0x1a0>)
    443e:	2400      	movs	r4, #0
    4440:	2200      	movs	r2, #0
		rounding *= 0.1;
    4442:	4610      	mov	r0, r2
    4444:	4619      	mov	r1, r3
    4446:	a33a      	add	r3, pc, #232	; (adr r3, 4530 <Print::printFloat(double, unsigned char)+0x188>)
    4448:	e9d3 2300 	ldrd	r2, r3, [r3]
    444c:	f000 fcaa 	bl	4da4 <__aeabi_dmul>
    4450:	3401      	adds	r4, #1
    4452:	460b      	mov	r3, r1
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    4454:	b2e1      	uxtb	r1, r4
    4456:	428d      	cmp	r5, r1
		rounding *= 0.1;
    4458:	4602      	mov	r2, r0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    445a:	d8f2      	bhi.n	4442 <Print::printFloat(double, unsigned char)+0x9a>
		rounding *= 0.1;
	}
	number += rounding;
    445c:	4630      	mov	r0, r6
    445e:	4639      	mov	r1, r7
    4460:	f000 faee 	bl	4a40 <__adddf3>
    4464:	460f      	mov	r7, r1
    4466:	4606      	mov	r6, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    4468:	f000 ff4c 	bl	5304 <__aeabi_d2uiz>
    446c:	4604      	mov	r4, r0
	double remainder = number - (double)int_part;
    446e:	f000 fc23 	bl	4cb8 <__aeabi_ui2d>
    4472:	4602      	mov	r2, r0
    4474:	460b      	mov	r3, r1
    4476:	4630      	mov	r0, r6
    4478:	4639      	mov	r1, r7
    447a:	f000 fadf 	bl	4a3c <__aeabi_dsub>
	count += printNumber(int_part, 10, sign);
    447e:	464b      	mov	r3, r9
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    4480:	4606      	mov	r6, r0
    4482:	460f      	mov	r7, r1
	count += printNumber(int_part, 10, sign);
    4484:	220a      	movs	r2, #10
    4486:	4621      	mov	r1, r4
    4488:	4640      	mov	r0, r8
    448a:	f7ff ff4d 	bl	4328 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    448e:	2d0f      	cmp	r5, #15
    4490:	bf28      	it	cs
    4492:	250f      	movcs	r5, #15
    4494:	3501      	adds	r5, #1

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    4496:	232e      	movs	r3, #46	; 0x2e
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    4498:	4681      	mov	r9, r0
    449a:	b2ed      	uxtb	r5, r5

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    449c:	f88d 3000 	strb.w	r3, [sp]
    44a0:	2401      	movs	r4, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    44a2:	2200      	movs	r2, #0
    44a4:	4b29      	ldr	r3, [pc, #164]	; (454c <Print::printFloat(double, unsigned char)+0x1a4>)
    44a6:	4630      	mov	r0, r6
    44a8:	4639      	mov	r1, r7
    44aa:	f000 fc7b 	bl	4da4 <__aeabi_dmul>
    44ae:	460f      	mov	r7, r1
    44b0:	4606      	mov	r6, r0
			n = (uint8_t)(remainder);
    44b2:	f000 ff27 	bl	5304 <__aeabi_d2uiz>
			buf[count++] = '0' + n;
    44b6:	ab04      	add	r3, sp, #16
    44b8:	4423      	add	r3, r4
		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    44ba:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    44bc:	f100 0230 	add.w	r2, r0, #48	; 0x30
    44c0:	f803 2c10 	strb.w	r2, [r3, #-16]
			remainder -= n; 
    44c4:	f000 fc08 	bl	4cd8 <__aeabi_i2d>
    44c8:	4602      	mov	r2, r0
    44ca:	460b      	mov	r3, r1
    44cc:	4630      	mov	r0, r6
    44ce:	4639      	mov	r1, r7
    44d0:	f000 fab4 	bl	4a3c <__aeabi_dsub>
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    44d4:	3401      	adds	r4, #1
    44d6:	b2e4      	uxtb	r4, r4
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    44d8:	42ac      	cmp	r4, r5
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
    44da:	4606      	mov	r6, r0
    44dc:	460f      	mov	r7, r1
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    44de:	d1e0      	bne.n	44a2 <Print::printFloat(double, unsigned char)+0xfa>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    44e0:	f8d8 3000 	ldr.w	r3, [r8]
    44e4:	4622      	mov	r2, r4
    44e6:	685b      	ldr	r3, [r3, #4]
    44e8:	4640      	mov	r0, r8
    44ea:	4669      	mov	r1, sp
    44ec:	4798      	blx	r3
	}
	return count;
}
    44ee:	4648      	mov	r0, r9
    44f0:	b005      	add	sp, #20
    44f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    44f6:	f8d8 3000 	ldr.w	r3, [r8]
    44fa:	4915      	ldr	r1, [pc, #84]	; (4550 <Print::printFloat(double, unsigned char)+0x1a8>)
    44fc:	e778      	b.n	43f0 <Print::printFloat(double, unsigned char)+0x48>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    44fe:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    4502:	f04f 0901 	mov.w	r9, #1
    4506:	e797      	b.n	4438 <Print::printFloat(double, unsigned char)+0x90>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    4508:	2200      	movs	r2, #0
    450a:	4b0f      	ldr	r3, [pc, #60]	; (4548 <Print::printFloat(double, unsigned char)+0x1a0>)
    450c:	4630      	mov	r0, r6
    450e:	4639      	mov	r1, r7
    4510:	f000 fa96 	bl	4a40 <__adddf3>
    4514:	f000 fef6 	bl	5304 <__aeabi_d2uiz>
    4518:	464b      	mov	r3, r9
    451a:	4601      	mov	r1, r0
    451c:	220a      	movs	r2, #10
    451e:	4640      	mov	r0, r8
    4520:	f7ff ff02 	bl	4328 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4524:	4681      	mov	r9, r0
    4526:	e768      	b.n	43fa <Print::printFloat(double, unsigned char)+0x52>
    4528:	f8d8 3000 	ldr.w	r3, [r8]
    452c:	4909      	ldr	r1, [pc, #36]	; (4554 <Print::printFloat(double, unsigned char)+0x1ac>)
    452e:	e75f      	b.n	43f0 <Print::printFloat(double, unsigned char)+0x48>
    4530:	a0000000 	.word	0xa0000000
    4534:	3fb99999 	.word	0x3fb99999
    4538:	7fefffff 	.word	0x7fefffff
    453c:	000065d0 	.word	0x000065d0
    4540:	41efffff 	.word	0x41efffff
    4544:	c1efffff 	.word	0xc1efffff
    4548:	3fe00000 	.word	0x3fe00000
    454c:	40240000 	.word	0x40240000
    4550:	000065cc 	.word	0x000065cc
    4554:	000065c8 	.word	0x000065c8

00004558 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    4558:	f7ff bcc2 	b.w	3ee0 <usb_serial_flush_input>

0000455c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    455c:	f7ff bc9a 	b.w	3e94 <usb_serial_peekchar>

00004560 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4560:	f7ff bc74 	b.w	3e4c <usb_serial_getchar>

00004564 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4564:	f7ff bcae 	b.w	3ec4 <usb_serial_available>

00004568 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4568:	f7ff bd8a 	b.w	4080 <usb_serial_flush_output>

0000456c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    456c:	f7ff bd64 	b.w	4038 <usb_serial_write_buffer_free>

00004570 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4570:	4608      	mov	r0, r1
    4572:	4611      	mov	r1, r2
    4574:	f7ff bcd0 	b.w	3f18 <usb_serial_write>

00004578 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4578:	4608      	mov	r0, r1
    457a:	f7ff bd51 	b.w	4020 <usb_serial_putchar>
    457e:	bf00      	nop

00004580 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4580:	4770      	bx	lr
    4582:	bf00      	nop

00004584 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4584:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    4586:	4c22      	ldr	r4, [pc, #136]	; (4610 <yield+0x8c>)
    4588:	7823      	ldrb	r3, [r4, #0]
    458a:	b103      	cbz	r3, 458e <yield+0xa>
    458c:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    458e:	2301      	movs	r3, #1
    4590:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4592:	f7ff fc97 	bl	3ec4 <usb_serial_available>
	if (Serial.available()) serialEvent();
    4596:	bb70      	cbnz	r0, 45f6 <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4598:	f000 f8d8 	bl	474c <serial_available>
	if (Serial1.available()) serialEvent1();
    459c:	bb40      	cbnz	r0, 45f0 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    459e:	f000 f96b 	bl	4878 <serial2_available>
	if (Serial2.available()) serialEvent2();
    45a2:	bb10      	cbnz	r0, 45ea <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    45a4:	f7fe fce2 	bl	2f6c <serial3_available>
	if (Serial3.available()) serialEvent3();
    45a8:	b9e0      	cbnz	r0, 45e4 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    45aa:	2300      	movs	r3, #0
    45ac:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    45ae:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    45b2:	2b00      	cmp	r3, #0
    45b4:	d1ea      	bne.n	458c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    45b6:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    45ba:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    45bc:	4b15      	ldr	r3, [pc, #84]	; (4614 <yield+0x90>)
    45be:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    45c0:	b1e0      	cbz	r0, 45fc <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    45c2:	4c15      	ldr	r4, [pc, #84]	; (4618 <yield+0x94>)
    45c4:	7822      	ldrb	r2, [r4, #0]
    45c6:	b9ca      	cbnz	r2, 45fc <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    45c8:	6945      	ldr	r5, [r0, #20]
    45ca:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    45cc:	2301      	movs	r3, #1
    45ce:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    45d0:	b1c5      	cbz	r5, 4604 <yield+0x80>
			firstYield->_prev = nullptr;
    45d2:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    45d4:	b901      	cbnz	r1, 45d8 <yield+0x54>
    45d6:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    45d8:	2500      	movs	r5, #0
    45da:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    45dc:	6883      	ldr	r3, [r0, #8]
    45de:	4798      	blx	r3
		runningFromYield = false;
    45e0:	7025      	strb	r5, [r4, #0]
    45e2:	e7d3      	b.n	458c <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    45e4:	f000 fa24 	bl	4a30 <serialEvent3()>
    45e8:	e7df      	b.n	45aa <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    45ea:	f000 fa1f 	bl	4a2c <serialEvent2()>
    45ee:	e7d9      	b.n	45a4 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    45f0:	f000 fa1a 	bl	4a28 <serialEvent1()>
    45f4:	e7d3      	b.n	459e <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    45f6:	f7ff ffc3 	bl	4580 <serialEvent()>
    45fa:	e7cd      	b.n	4598 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    45fc:	2900      	cmp	r1, #0
    45fe:	d1c5      	bne.n	458c <yield+0x8>
    4600:	b662      	cpsie	i
    4602:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    4604:	4b05      	ldr	r3, [pc, #20]	; (461c <yield+0x98>)
    4606:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4608:	2900      	cmp	r1, #0
    460a:	d1e5      	bne.n	45d8 <yield+0x54>
    460c:	e7e3      	b.n	45d6 <yield+0x52>
    460e:	bf00      	nop
    4610:	1fff97d8 	.word	0x1fff97d8
    4614:	1fff97cc 	.word	0x1fff97cc
    4618:	1fff97d0 	.word	0x1fff97d0
    461c:	1fff97c8 	.word	0x1fff97c8

00004620 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    4620:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4622:	4829      	ldr	r0, [pc, #164]	; (46c8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4624:	4a29      	ldr	r2, [pc, #164]	; (46cc <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    4626:	4b2a      	ldr	r3, [pc, #168]	; (46d0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4628:	4d2a      	ldr	r5, [pc, #168]	; (46d4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    462a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    462c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    462e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4630:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    4632:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4634:	4c28      	ldr	r4, [pc, #160]	; (46d8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    4636:	2b08      	cmp	r3, #8
    4638:	d030      	beq.n	469c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    463a:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    463c:	4827      	ldr	r0, [pc, #156]	; (46dc <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    463e:	4928      	ldr	r1, [pc, #160]	; (46e0 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4640:	d037      	beq.n	46b2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    4642:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    4644:	bf0c      	ite	eq
    4646:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4648:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    464a:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    464c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    464e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4650:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4652:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4654:	4b23      	ldr	r3, [pc, #140]	; (46e4 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4656:	4924      	ldr	r1, [pc, #144]	; (46e8 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4658:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    465a:	4a24      	ldr	r2, [pc, #144]	; (46ec <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    465c:	b1bb      	cbz	r3, 468e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    465e:	2301      	movs	r3, #1
    4660:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4662:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4664:	4b22      	ldr	r3, [pc, #136]	; (46f0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4666:	4923      	ldr	r1, [pc, #140]	; (46f4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4668:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    466a:	4a23      	ldr	r2, [pc, #140]	; (46f8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    466c:	2b01      	cmp	r3, #1
    466e:	d926      	bls.n	46be <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    4670:	2b04      	cmp	r3, #4
    4672:	d90f      	bls.n	4694 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    4674:	2b08      	cmp	r3, #8
    4676:	d91e      	bls.n	46b6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    4678:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    467a:	bf94      	ite	ls
    467c:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    467e:	2387      	movhi	r3, #135	; 0x87
    4680:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    4682:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    4684:	4b1d      	ldr	r3, [pc, #116]	; (46fc <analog_init+0xdc>)
    4686:	2201      	movs	r2, #1
    4688:	701a      	strb	r2, [r3, #0]
}
    468a:	bc30      	pop	{r4, r5}
    468c:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    468e:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    4690:	6013      	str	r3, [r2, #0]
    4692:	e7e7      	b.n	4664 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4694:	2384      	movs	r3, #132	; 0x84
    4696:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4698:	6013      	str	r3, [r2, #0]
    469a:	e7f3      	b.n	4684 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    469c:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    46a0:	490f      	ldr	r1, [pc, #60]	; (46e0 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    46a2:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    46a4:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    46a6:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    46a8:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    46aa:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    46ac:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    46ae:	600b      	str	r3, [r1, #0]
    46b0:	e7d0      	b.n	4654 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    46b2:	2239      	movs	r2, #57	; 0x39
    46b4:	e7f7      	b.n	46a6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    46b6:	2385      	movs	r3, #133	; 0x85
    46b8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    46ba:	6013      	str	r3, [r2, #0]
    46bc:	e7e2      	b.n	4684 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    46be:	2380      	movs	r3, #128	; 0x80
    46c0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    46c2:	6013      	str	r3, [r2, #0]
    46c4:	e7de      	b.n	4684 <analog_init+0x64>
    46c6:	bf00      	nop
    46c8:	40074000 	.word	0x40074000
    46cc:	40074001 	.word	0x40074001
    46d0:	1fff8a04 	.word	0x1fff8a04
    46d4:	4003b008 	.word	0x4003b008
    46d8:	4003b00c 	.word	0x4003b00c
    46dc:	400bb008 	.word	0x400bb008
    46e0:	400bb00c 	.word	0x400bb00c
    46e4:	1fff97da 	.word	0x1fff97da
    46e8:	4003b020 	.word	0x4003b020
    46ec:	400bb020 	.word	0x400bb020
    46f0:	1fff8a05 	.word	0x1fff8a05
    46f4:	4003b024 	.word	0x4003b024
    46f8:	400bb024 	.word	0x400bb024
    46fc:	1fff97d9 	.word	0x1fff97d9

00004700 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4700:	b4f0      	push	{r4, r5, r6, r7}
    4702:	1e4d      	subs	r5, r1, #1
    4704:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    4706:	2400      	movs	r4, #0
    4708:	e000      	b.n	470c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    470a:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    470c:	fbb0 f3f2 	udiv	r3, r0, r2
    4710:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4714:	2809      	cmp	r0, #9
    4716:	f100 0730 	add.w	r7, r0, #48	; 0x30
    471a:	bf8a      	itet	hi
    471c:	3037      	addhi	r0, #55	; 0x37
    471e:	b2f8      	uxtbls	r0, r7
    4720:	b2c0      	uxtbhi	r0, r0
    4722:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    4726:	4618      	mov	r0, r3
    4728:	2b00      	cmp	r3, #0
    472a:	d1ee      	bne.n	470a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    472c:	190a      	adds	r2, r1, r4
    472e:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4730:	b14c      	cbz	r4, 4746 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4732:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4734:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    4738:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    473a:	3301      	adds	r3, #1
    473c:	1ae0      	subs	r0, r4, r3
    473e:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4740:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4744:	dbf5      	blt.n	4732 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4746:	4608      	mov	r0, r1
    4748:	bcf0      	pop	{r4, r5, r6, r7}
    474a:	4770      	bx	lr

0000474c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    474c:	4a05      	ldr	r2, [pc, #20]	; (4764 <serial_available+0x18>)
	tail = rx_buffer_tail;
    474e:	4b06      	ldr	r3, [pc, #24]	; (4768 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4750:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4752:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4754:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4756:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4758:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    475a:	bf38      	it	cc
    475c:	3040      	addcc	r0, #64	; 0x40
    475e:	1ac0      	subs	r0, r0, r3
}
    4760:	4770      	bx	lr
    4762:	bf00      	nop
    4764:	1fff97e0 	.word	0x1fff97e0
    4768:	1fff97e1 	.word	0x1fff97e1

0000476c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    476c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    476e:	4b38      	ldr	r3, [pc, #224]	; (4850 <uart0_status_isr+0xe4>)
    4770:	791a      	ldrb	r2, [r3, #4]
    4772:	f012 0f30 	tst.w	r2, #48	; 0x30
    4776:	d02c      	beq.n	47d2 <uart0_status_isr+0x66>
		__disable_irq();
    4778:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    477a:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    477c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    4780:	2900      	cmp	r1, #0
    4782:	d03d      	beq.n	4800 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4784:	b662      	cpsie	i
			head = rx_buffer_head;
    4786:	4f33      	ldr	r7, [pc, #204]	; (4854 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4788:	4933      	ldr	r1, [pc, #204]	; (4858 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    478a:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    478c:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    478e:	4e33      	ldr	r6, [pc, #204]	; (485c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4790:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4792:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    4794:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4796:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4798:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    479a:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    479c:	bf28      	it	cs
    479e:	2300      	movcs	r3, #0
				if (newhead != tail) {
    47a0:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    47a2:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    47a6:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    47a8:	bf1c      	itt	ne
    47aa:	54f1      	strbne	r1, [r6, r3]
    47ac:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    47ae:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    47b2:	d1f0      	bne.n	4796 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    47b4:	4b2a      	ldr	r3, [pc, #168]	; (4860 <uart0_status_isr+0xf4>)
    47b6:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    47b8:	b2c2      	uxtb	r2, r0
    47ba:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    47bc:	b14b      	cbz	r3, 47d2 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    47be:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    47c0:	bf36      	itet	cc
    47c2:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    47c6:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    47c8:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    47ca:	2827      	cmp	r0, #39	; 0x27
    47cc:	bfc4      	itt	gt
    47ce:	2201      	movgt	r2, #1
    47d0:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    47d2:	491f      	ldr	r1, [pc, #124]	; (4850 <uart0_status_isr+0xe4>)
    47d4:	78ca      	ldrb	r2, [r1, #3]
    47d6:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    47d8:	0615      	lsls	r5, r2, #24
    47da:	d416      	bmi.n	480a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    47dc:	0652      	lsls	r2, r2, #25
    47de:	d50d      	bpl.n	47fc <uart0_status_isr+0x90>
    47e0:	4b1b      	ldr	r3, [pc, #108]	; (4850 <uart0_status_isr+0xe4>)
    47e2:	791b      	ldrb	r3, [r3, #4]
    47e4:	065b      	lsls	r3, r3, #25
    47e6:	d509      	bpl.n	47fc <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    47e8:	4b1e      	ldr	r3, [pc, #120]	; (4864 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    47ea:	491f      	ldr	r1, [pc, #124]	; (4868 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    47ec:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    47ee:	2200      	movs	r2, #0
    47f0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    47f2:	b103      	cbz	r3, 47f6 <uart0_status_isr+0x8a>
    47f4:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    47f6:	4b16      	ldr	r3, [pc, #88]	; (4850 <uart0_status_isr+0xe4>)
    47f8:	223c      	movs	r2, #60	; 0x3c
    47fa:	70da      	strb	r2, [r3, #3]
	}
}
    47fc:	bcf0      	pop	{r4, r5, r6, r7}
    47fe:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4800:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    4802:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4804:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    4806:	b662      	cpsie	i
    4808:	e7e3      	b.n	47d2 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    480a:	790b      	ldrb	r3, [r1, #4]
    480c:	061c      	lsls	r4, r3, #24
    480e:	d5e5      	bpl.n	47dc <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4810:	4b16      	ldr	r3, [pc, #88]	; (486c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    4812:	4e17      	ldr	r6, [pc, #92]	; (4870 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4814:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4816:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4818:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    481a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    481c:	429c      	cmp	r4, r3
    481e:	d00e      	beq.n	483e <uart0_status_isr+0xd2>
    4820:	4d14      	ldr	r5, [pc, #80]	; (4874 <uart0_status_isr+0x108>)
    4822:	e001      	b.n	4828 <uart0_status_isr+0xbc>
    4824:	42a3      	cmp	r3, r4
    4826:	d00a      	beq.n	483e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    4828:	3301      	adds	r3, #1
    482a:	2b40      	cmp	r3, #64	; 0x40
    482c:	bf28      	it	cs
    482e:	2300      	movcs	r3, #0
			avail = UART0_S1;
    4830:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4832:	5ce8      	ldrb	r0, [r5, r3]
    4834:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    4836:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    4838:	7d08      	ldrb	r0, [r1, #20]
    483a:	2807      	cmp	r0, #7
    483c:	d9f2      	bls.n	4824 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    483e:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4840:	4903      	ldr	r1, [pc, #12]	; (4850 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    4842:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4844:	790b      	ldrb	r3, [r1, #4]
    4846:	0618      	lsls	r0, r3, #24
    4848:	bf44      	itt	mi
    484a:	237c      	movmi	r3, #124	; 0x7c
    484c:	70cb      	strbmi	r3, [r1, #3]
    484e:	e7c5      	b.n	47dc <uart0_status_isr+0x70>
    4850:	4006a000 	.word	0x4006a000
    4854:	1fff97e0 	.word	0x1fff97e0
    4858:	1fff97e1 	.word	0x1fff97e1
    485c:	1fff9824 	.word	0x1fff9824
    4860:	1fff97dc 	.word	0x1fff97dc
    4864:	1fff9868 	.word	0x1fff9868
    4868:	1fff9864 	.word	0x1fff9864
    486c:	1fff986c 	.word	0x1fff986c
    4870:	1fff9865 	.word	0x1fff9865
    4874:	1fff97e4 	.word	0x1fff97e4

00004878 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4878:	4a05      	ldr	r2, [pc, #20]	; (4890 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    487a:	4b06      	ldr	r3, [pc, #24]	; (4894 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    487c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    487e:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4880:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4882:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4884:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    4886:	bf38      	it	cc
    4888:	3040      	addcc	r0, #64	; 0x40
    488a:	1ac0      	subs	r0, r0, r3
}
    488c:	4770      	bx	lr
    488e:	bf00      	nop
    4890:	1fff98e0 	.word	0x1fff98e0
    4894:	1fff9875 	.word	0x1fff9875

00004898 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    4898:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    489a:	4b38      	ldr	r3, [pc, #224]	; (497c <uart1_status_isr+0xe4>)
    489c:	791a      	ldrb	r2, [r3, #4]
    489e:	f012 0f30 	tst.w	r2, #48	; 0x30
    48a2:	d02c      	beq.n	48fe <uart1_status_isr+0x66>
		__disable_irq();
    48a4:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    48a6:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    48a8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    48ac:	2900      	cmp	r1, #0
    48ae:	d03d      	beq.n	492c <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    48b0:	b662      	cpsie	i
			head = rx_buffer_head;
    48b2:	4f33      	ldr	r7, [pc, #204]	; (4980 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    48b4:	4933      	ldr	r1, [pc, #204]	; (4984 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    48b6:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    48b8:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    48ba:	4e33      	ldr	r6, [pc, #204]	; (4988 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    48bc:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    48be:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    48c0:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    48c2:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    48c4:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    48c6:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    48c8:	bf28      	it	cs
    48ca:	2300      	movcs	r3, #0
				if (newhead != tail) {
    48cc:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    48ce:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    48d2:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    48d4:	bf1c      	itt	ne
    48d6:	54f1      	strbne	r1, [r6, r3]
    48d8:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    48da:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    48de:	d1f0      	bne.n	48c2 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    48e0:	4b2a      	ldr	r3, [pc, #168]	; (498c <uart1_status_isr+0xf4>)
    48e2:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    48e4:	b2c2      	uxtb	r2, r0
    48e6:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    48e8:	b14b      	cbz	r3, 48fe <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    48ea:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    48ec:	bf36      	itet	cc
    48ee:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    48f2:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    48f4:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    48f6:	2827      	cmp	r0, #39	; 0x27
    48f8:	bfc4      	itt	gt
    48fa:	2201      	movgt	r2, #1
    48fc:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    48fe:	491f      	ldr	r1, [pc, #124]	; (497c <uart1_status_isr+0xe4>)
    4900:	78ca      	ldrb	r2, [r1, #3]
    4902:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4904:	0615      	lsls	r5, r2, #24
    4906:	d416      	bmi.n	4936 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    4908:	0652      	lsls	r2, r2, #25
    490a:	d50d      	bpl.n	4928 <uart1_status_isr+0x90>
    490c:	4b1b      	ldr	r3, [pc, #108]	; (497c <uart1_status_isr+0xe4>)
    490e:	791b      	ldrb	r3, [r3, #4]
    4910:	065b      	lsls	r3, r3, #25
    4912:	d509      	bpl.n	4928 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4914:	4b1e      	ldr	r3, [pc, #120]	; (4990 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4916:	491f      	ldr	r1, [pc, #124]	; (4994 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4918:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    491a:	2200      	movs	r2, #0
    491c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    491e:	b103      	cbz	r3, 4922 <uart1_status_isr+0x8a>
    4920:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    4922:	4b16      	ldr	r3, [pc, #88]	; (497c <uart1_status_isr+0xe4>)
    4924:	223c      	movs	r2, #60	; 0x3c
    4926:	70da      	strb	r2, [r3, #3]
	}
}
    4928:	bcf0      	pop	{r4, r5, r6, r7}
    492a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    492c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    492e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4930:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    4932:	b662      	cpsie	i
    4934:	e7e3      	b.n	48fe <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4936:	790b      	ldrb	r3, [r1, #4]
    4938:	061c      	lsls	r4, r3, #24
    493a:	d5e5      	bpl.n	4908 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    493c:	4b16      	ldr	r3, [pc, #88]	; (4998 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    493e:	4e17      	ldr	r6, [pc, #92]	; (499c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4940:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4942:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4944:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    4946:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    4948:	429c      	cmp	r4, r3
    494a:	d00e      	beq.n	496a <uart1_status_isr+0xd2>
    494c:	4d14      	ldr	r5, [pc, #80]	; (49a0 <uart1_status_isr+0x108>)
    494e:	e001      	b.n	4954 <uart1_status_isr+0xbc>
    4950:	42a3      	cmp	r3, r4
    4952:	d00a      	beq.n	496a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    4954:	3301      	adds	r3, #1
    4956:	2b28      	cmp	r3, #40	; 0x28
    4958:	bf28      	it	cs
    495a:	2300      	movcs	r3, #0
			avail = UART1_S1;
    495c:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    495e:	5ce8      	ldrb	r0, [r5, r3]
    4960:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    4962:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    4964:	7d08      	ldrb	r0, [r1, #20]
    4966:	2807      	cmp	r0, #7
    4968:	d9f2      	bls.n	4950 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    496a:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    496c:	4903      	ldr	r1, [pc, #12]	; (497c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    496e:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4970:	790b      	ldrb	r3, [r1, #4]
    4972:	0618      	lsls	r0, r3, #24
    4974:	bf44      	itt	mi
    4976:	237c      	movmi	r3, #124	; 0x7c
    4978:	70cb      	strbmi	r3, [r1, #3]
    497a:	e7c5      	b.n	4908 <uart1_status_isr+0x70>
    497c:	4006b000 	.word	0x4006b000
    4980:	1fff98e0 	.word	0x1fff98e0
    4984:	1fff9875 	.word	0x1fff9875
    4988:	1fff98a0 	.word	0x1fff98a0
    498c:	1fff9870 	.word	0x1fff9870
    4990:	1fff98e4 	.word	0x1fff98e4
    4994:	1fff9874 	.word	0x1fff9874
    4998:	1fff98e8 	.word	0x1fff98e8
    499c:	1fff98e1 	.word	0x1fff98e1
    49a0:	1fff9878 	.word	0x1fff9878

000049a4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    49a4:	b570      	push	{r4, r5, r6, lr}
    49a6:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    49a8:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    49aa:	4b19      	ldr	r3, [pc, #100]	; (4a10 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    49ac:	4d19      	ldr	r5, [pc, #100]	; (4a14 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    49ae:	481a      	ldr	r0, [pc, #104]	; (4a18 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    49b0:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    49b2:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    49b4:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    49b6:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    49b8:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    49ba:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    49bc:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    49be:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    49c0:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    49c2:	7813      	ldrb	r3, [r2, #0]
    49c4:	061b      	lsls	r3, r3, #24
    49c6:	d5fc      	bpl.n	49c2 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    49c8:	4b14      	ldr	r3, [pc, #80]	; (4a1c <usb_init_serialnumber+0x78>)
    49ca:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    49cc:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    49ce:	4b14      	ldr	r3, [pc, #80]	; (4a20 <usb_init_serialnumber+0x7c>)
    49d0:	4c14      	ldr	r4, [pc, #80]	; (4a24 <usb_init_serialnumber+0x80>)
    49d2:	4298      	cmp	r0, r3
    49d4:	bf98      	it	ls
    49d6:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    49da:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    49dc:	bf98      	it	ls
    49de:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    49e0:	220a      	movs	r2, #10
    49e2:	f7ff fe8d 	bl	4700 <ultoa>
    49e6:	a901      	add	r1, sp, #4
    49e8:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    49ea:	2300      	movs	r3, #0
		char c = buf[i];
    49ec:	f811 2b01 	ldrb.w	r2, [r1], #1
    49f0:	3301      	adds	r3, #1
		if (!c) break;
    49f2:	b13a      	cbz	r2, 4a04 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    49f4:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    49f6:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    49fa:	d1f7      	bne.n	49ec <usb_init_serialnumber+0x48>
    49fc:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    49fe:	7023      	strb	r3, [r4, #0]
}
    4a00:	b004      	add	sp, #16
    4a02:	bd70      	pop	{r4, r5, r6, pc}
    4a04:	005b      	lsls	r3, r3, #1
    4a06:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4a08:	7023      	strb	r3, [r4, #0]
}
    4a0a:	b004      	add	sp, #16
    4a0c:	bd70      	pop	{r4, r5, r6, pc}
    4a0e:	bf00      	nop
    4a10:	40020000 	.word	0x40020000
    4a14:	40020007 	.word	0x40020007
    4a18:	40020006 	.word	0x40020006
    4a1c:	40020008 	.word	0x40020008
    4a20:	0098967f 	.word	0x0098967f
    4a24:	1fff8a94 	.word	0x1fff8a94

00004a28 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4a28:	4770      	bx	lr
    4a2a:	bf00      	nop

00004a2c <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    4a2c:	4770      	bx	lr
    4a2e:	bf00      	nop

00004a30 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4a30:	4770      	bx	lr
    4a32:	bf00      	nop

00004a34 <__aeabi_drsub>:
    4a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    4a38:	e002      	b.n	4a40 <__adddf3>
    4a3a:	bf00      	nop

00004a3c <__aeabi_dsub>:
    4a3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004a40 <__adddf3>:
    4a40:	b530      	push	{r4, r5, lr}
    4a42:	ea4f 0441 	mov.w	r4, r1, lsl #1
    4a46:	ea4f 0543 	mov.w	r5, r3, lsl #1
    4a4a:	ea94 0f05 	teq	r4, r5
    4a4e:	bf08      	it	eq
    4a50:	ea90 0f02 	teqeq	r0, r2
    4a54:	bf1f      	itttt	ne
    4a56:	ea54 0c00 	orrsne.w	ip, r4, r0
    4a5a:	ea55 0c02 	orrsne.w	ip, r5, r2
    4a5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4a62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4a66:	f000 80e2 	beq.w	4c2e <__adddf3+0x1ee>
    4a6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4a6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4a72:	bfb8      	it	lt
    4a74:	426d      	neglt	r5, r5
    4a76:	dd0c      	ble.n	4a92 <__adddf3+0x52>
    4a78:	442c      	add	r4, r5
    4a7a:	ea80 0202 	eor.w	r2, r0, r2
    4a7e:	ea81 0303 	eor.w	r3, r1, r3
    4a82:	ea82 0000 	eor.w	r0, r2, r0
    4a86:	ea83 0101 	eor.w	r1, r3, r1
    4a8a:	ea80 0202 	eor.w	r2, r0, r2
    4a8e:	ea81 0303 	eor.w	r3, r1, r3
    4a92:	2d36      	cmp	r5, #54	; 0x36
    4a94:	bf88      	it	hi
    4a96:	bd30      	pophi	{r4, r5, pc}
    4a98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4a9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4aa0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4aa4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    4aa8:	d002      	beq.n	4ab0 <__adddf3+0x70>
    4aaa:	4240      	negs	r0, r0
    4aac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4ab0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4ab4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4ab8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4abc:	d002      	beq.n	4ac4 <__adddf3+0x84>
    4abe:	4252      	negs	r2, r2
    4ac0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4ac4:	ea94 0f05 	teq	r4, r5
    4ac8:	f000 80a7 	beq.w	4c1a <__adddf3+0x1da>
    4acc:	f1a4 0401 	sub.w	r4, r4, #1
    4ad0:	f1d5 0e20 	rsbs	lr, r5, #32
    4ad4:	db0d      	blt.n	4af2 <__adddf3+0xb2>
    4ad6:	fa02 fc0e 	lsl.w	ip, r2, lr
    4ada:	fa22 f205 	lsr.w	r2, r2, r5
    4ade:	1880      	adds	r0, r0, r2
    4ae0:	f141 0100 	adc.w	r1, r1, #0
    4ae4:	fa03 f20e 	lsl.w	r2, r3, lr
    4ae8:	1880      	adds	r0, r0, r2
    4aea:	fa43 f305 	asr.w	r3, r3, r5
    4aee:	4159      	adcs	r1, r3
    4af0:	e00e      	b.n	4b10 <__adddf3+0xd0>
    4af2:	f1a5 0520 	sub.w	r5, r5, #32
    4af6:	f10e 0e20 	add.w	lr, lr, #32
    4afa:	2a01      	cmp	r2, #1
    4afc:	fa03 fc0e 	lsl.w	ip, r3, lr
    4b00:	bf28      	it	cs
    4b02:	f04c 0c02 	orrcs.w	ip, ip, #2
    4b06:	fa43 f305 	asr.w	r3, r3, r5
    4b0a:	18c0      	adds	r0, r0, r3
    4b0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    4b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4b14:	d507      	bpl.n	4b26 <__adddf3+0xe6>
    4b16:	f04f 0e00 	mov.w	lr, #0
    4b1a:	f1dc 0c00 	rsbs	ip, ip, #0
    4b1e:	eb7e 0000 	sbcs.w	r0, lr, r0
    4b22:	eb6e 0101 	sbc.w	r1, lr, r1
    4b26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    4b2a:	d31b      	bcc.n	4b64 <__adddf3+0x124>
    4b2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4b30:	d30c      	bcc.n	4b4c <__adddf3+0x10c>
    4b32:	0849      	lsrs	r1, r1, #1
    4b34:	ea5f 0030 	movs.w	r0, r0, rrx
    4b38:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4b3c:	f104 0401 	add.w	r4, r4, #1
    4b40:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4b44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    4b48:	f080 809a 	bcs.w	4c80 <__adddf3+0x240>
    4b4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4b50:	bf08      	it	eq
    4b52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4b56:	f150 0000 	adcs.w	r0, r0, #0
    4b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4b5e:	ea41 0105 	orr.w	r1, r1, r5
    4b62:	bd30      	pop	{r4, r5, pc}
    4b64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4b68:	4140      	adcs	r0, r0
    4b6a:	eb41 0101 	adc.w	r1, r1, r1
    4b6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4b72:	f1a4 0401 	sub.w	r4, r4, #1
    4b76:	d1e9      	bne.n	4b4c <__adddf3+0x10c>
    4b78:	f091 0f00 	teq	r1, #0
    4b7c:	bf04      	itt	eq
    4b7e:	4601      	moveq	r1, r0
    4b80:	2000      	moveq	r0, #0
    4b82:	fab1 f381 	clz	r3, r1
    4b86:	bf08      	it	eq
    4b88:	3320      	addeq	r3, #32
    4b8a:	f1a3 030b 	sub.w	r3, r3, #11
    4b8e:	f1b3 0220 	subs.w	r2, r3, #32
    4b92:	da0c      	bge.n	4bae <__adddf3+0x16e>
    4b94:	320c      	adds	r2, #12
    4b96:	dd08      	ble.n	4baa <__adddf3+0x16a>
    4b98:	f102 0c14 	add.w	ip, r2, #20
    4b9c:	f1c2 020c 	rsb	r2, r2, #12
    4ba0:	fa01 f00c 	lsl.w	r0, r1, ip
    4ba4:	fa21 f102 	lsr.w	r1, r1, r2
    4ba8:	e00c      	b.n	4bc4 <__adddf3+0x184>
    4baa:	f102 0214 	add.w	r2, r2, #20
    4bae:	bfd8      	it	le
    4bb0:	f1c2 0c20 	rsble	ip, r2, #32
    4bb4:	fa01 f102 	lsl.w	r1, r1, r2
    4bb8:	fa20 fc0c 	lsr.w	ip, r0, ip
    4bbc:	bfdc      	itt	le
    4bbe:	ea41 010c 	orrle.w	r1, r1, ip
    4bc2:	4090      	lslle	r0, r2
    4bc4:	1ae4      	subs	r4, r4, r3
    4bc6:	bfa2      	ittt	ge
    4bc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    4bcc:	4329      	orrge	r1, r5
    4bce:	bd30      	popge	{r4, r5, pc}
    4bd0:	ea6f 0404 	mvn.w	r4, r4
    4bd4:	3c1f      	subs	r4, #31
    4bd6:	da1c      	bge.n	4c12 <__adddf3+0x1d2>
    4bd8:	340c      	adds	r4, #12
    4bda:	dc0e      	bgt.n	4bfa <__adddf3+0x1ba>
    4bdc:	f104 0414 	add.w	r4, r4, #20
    4be0:	f1c4 0220 	rsb	r2, r4, #32
    4be4:	fa20 f004 	lsr.w	r0, r0, r4
    4be8:	fa01 f302 	lsl.w	r3, r1, r2
    4bec:	ea40 0003 	orr.w	r0, r0, r3
    4bf0:	fa21 f304 	lsr.w	r3, r1, r4
    4bf4:	ea45 0103 	orr.w	r1, r5, r3
    4bf8:	bd30      	pop	{r4, r5, pc}
    4bfa:	f1c4 040c 	rsb	r4, r4, #12
    4bfe:	f1c4 0220 	rsb	r2, r4, #32
    4c02:	fa20 f002 	lsr.w	r0, r0, r2
    4c06:	fa01 f304 	lsl.w	r3, r1, r4
    4c0a:	ea40 0003 	orr.w	r0, r0, r3
    4c0e:	4629      	mov	r1, r5
    4c10:	bd30      	pop	{r4, r5, pc}
    4c12:	fa21 f004 	lsr.w	r0, r1, r4
    4c16:	4629      	mov	r1, r5
    4c18:	bd30      	pop	{r4, r5, pc}
    4c1a:	f094 0f00 	teq	r4, #0
    4c1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    4c22:	bf06      	itte	eq
    4c24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    4c28:	3401      	addeq	r4, #1
    4c2a:	3d01      	subne	r5, #1
    4c2c:	e74e      	b.n	4acc <__adddf3+0x8c>
    4c2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4c32:	bf18      	it	ne
    4c34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4c38:	d029      	beq.n	4c8e <__adddf3+0x24e>
    4c3a:	ea94 0f05 	teq	r4, r5
    4c3e:	bf08      	it	eq
    4c40:	ea90 0f02 	teqeq	r0, r2
    4c44:	d005      	beq.n	4c52 <__adddf3+0x212>
    4c46:	ea54 0c00 	orrs.w	ip, r4, r0
    4c4a:	bf04      	itt	eq
    4c4c:	4619      	moveq	r1, r3
    4c4e:	4610      	moveq	r0, r2
    4c50:	bd30      	pop	{r4, r5, pc}
    4c52:	ea91 0f03 	teq	r1, r3
    4c56:	bf1e      	ittt	ne
    4c58:	2100      	movne	r1, #0
    4c5a:	2000      	movne	r0, #0
    4c5c:	bd30      	popne	{r4, r5, pc}
    4c5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4c62:	d105      	bne.n	4c70 <__adddf3+0x230>
    4c64:	0040      	lsls	r0, r0, #1
    4c66:	4149      	adcs	r1, r1
    4c68:	bf28      	it	cs
    4c6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4c6e:	bd30      	pop	{r4, r5, pc}
    4c70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4c74:	bf3c      	itt	cc
    4c76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4c7a:	bd30      	popcc	{r4, r5, pc}
    4c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4c80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4c84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4c88:	f04f 0000 	mov.w	r0, #0
    4c8c:	bd30      	pop	{r4, r5, pc}
    4c8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4c92:	bf1a      	itte	ne
    4c94:	4619      	movne	r1, r3
    4c96:	4610      	movne	r0, r2
    4c98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4c9c:	bf1c      	itt	ne
    4c9e:	460b      	movne	r3, r1
    4ca0:	4602      	movne	r2, r0
    4ca2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4ca6:	bf06      	itte	eq
    4ca8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4cac:	ea91 0f03 	teqeq	r1, r3
    4cb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4cb4:	bd30      	pop	{r4, r5, pc}
    4cb6:	bf00      	nop

00004cb8 <__aeabi_ui2d>:
    4cb8:	f090 0f00 	teq	r0, #0
    4cbc:	bf04      	itt	eq
    4cbe:	2100      	moveq	r1, #0
    4cc0:	4770      	bxeq	lr
    4cc2:	b530      	push	{r4, r5, lr}
    4cc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4cc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4ccc:	f04f 0500 	mov.w	r5, #0
    4cd0:	f04f 0100 	mov.w	r1, #0
    4cd4:	e750      	b.n	4b78 <__adddf3+0x138>
    4cd6:	bf00      	nop

00004cd8 <__aeabi_i2d>:
    4cd8:	f090 0f00 	teq	r0, #0
    4cdc:	bf04      	itt	eq
    4cde:	2100      	moveq	r1, #0
    4ce0:	4770      	bxeq	lr
    4ce2:	b530      	push	{r4, r5, lr}
    4ce4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4ce8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4cec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4cf0:	bf48      	it	mi
    4cf2:	4240      	negmi	r0, r0
    4cf4:	f04f 0100 	mov.w	r1, #0
    4cf8:	e73e      	b.n	4b78 <__adddf3+0x138>
    4cfa:	bf00      	nop

00004cfc <__aeabi_f2d>:
    4cfc:	0042      	lsls	r2, r0, #1
    4cfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    4d02:	ea4f 0131 	mov.w	r1, r1, rrx
    4d06:	ea4f 7002 	mov.w	r0, r2, lsl #28
    4d0a:	bf1f      	itttt	ne
    4d0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4d10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4d14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    4d18:	4770      	bxne	lr
    4d1a:	f092 0f00 	teq	r2, #0
    4d1e:	bf14      	ite	ne
    4d20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4d24:	4770      	bxeq	lr
    4d26:	b530      	push	{r4, r5, lr}
    4d28:	f44f 7460 	mov.w	r4, #896	; 0x380
    4d2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4d30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4d34:	e720      	b.n	4b78 <__adddf3+0x138>
    4d36:	bf00      	nop

00004d38 <__aeabi_ul2d>:
    4d38:	ea50 0201 	orrs.w	r2, r0, r1
    4d3c:	bf08      	it	eq
    4d3e:	4770      	bxeq	lr
    4d40:	b530      	push	{r4, r5, lr}
    4d42:	f04f 0500 	mov.w	r5, #0
    4d46:	e00a      	b.n	4d5e <__aeabi_l2d+0x16>

00004d48 <__aeabi_l2d>:
    4d48:	ea50 0201 	orrs.w	r2, r0, r1
    4d4c:	bf08      	it	eq
    4d4e:	4770      	bxeq	lr
    4d50:	b530      	push	{r4, r5, lr}
    4d52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4d56:	d502      	bpl.n	4d5e <__aeabi_l2d+0x16>
    4d58:	4240      	negs	r0, r0
    4d5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4d5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4d62:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4d66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4d6a:	f43f aedc 	beq.w	4b26 <__adddf3+0xe6>
    4d6e:	f04f 0203 	mov.w	r2, #3
    4d72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4d76:	bf18      	it	ne
    4d78:	3203      	addne	r2, #3
    4d7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4d7e:	bf18      	it	ne
    4d80:	3203      	addne	r2, #3
    4d82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4d86:	f1c2 0320 	rsb	r3, r2, #32
    4d8a:	fa00 fc03 	lsl.w	ip, r0, r3
    4d8e:	fa20 f002 	lsr.w	r0, r0, r2
    4d92:	fa01 fe03 	lsl.w	lr, r1, r3
    4d96:	ea40 000e 	orr.w	r0, r0, lr
    4d9a:	fa21 f102 	lsr.w	r1, r1, r2
    4d9e:	4414      	add	r4, r2
    4da0:	e6c1      	b.n	4b26 <__adddf3+0xe6>
    4da2:	bf00      	nop

00004da4 <__aeabi_dmul>:
    4da4:	b570      	push	{r4, r5, r6, lr}
    4da6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4daa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4dae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4db2:	bf1d      	ittte	ne
    4db4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4db8:	ea94 0f0c 	teqne	r4, ip
    4dbc:	ea95 0f0c 	teqne	r5, ip
    4dc0:	f000 f8de 	bleq	4f80 <__aeabi_dmul+0x1dc>
    4dc4:	442c      	add	r4, r5
    4dc6:	ea81 0603 	eor.w	r6, r1, r3
    4dca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    4dce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    4dd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    4dd6:	bf18      	it	ne
    4dd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    4ddc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4de4:	d038      	beq.n	4e58 <__aeabi_dmul+0xb4>
    4de6:	fba0 ce02 	umull	ip, lr, r0, r2
    4dea:	f04f 0500 	mov.w	r5, #0
    4dee:	fbe1 e502 	umlal	lr, r5, r1, r2
    4df2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4df6:	fbe0 e503 	umlal	lr, r5, r0, r3
    4dfa:	f04f 0600 	mov.w	r6, #0
    4dfe:	fbe1 5603 	umlal	r5, r6, r1, r3
    4e02:	f09c 0f00 	teq	ip, #0
    4e06:	bf18      	it	ne
    4e08:	f04e 0e01 	orrne.w	lr, lr, #1
    4e0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4e10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4e14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    4e18:	d204      	bcs.n	4e24 <__aeabi_dmul+0x80>
    4e1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4e1e:	416d      	adcs	r5, r5
    4e20:	eb46 0606 	adc.w	r6, r6, r6
    4e24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4e28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4e2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4e30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4e34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4e38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4e3c:	bf88      	it	hi
    4e3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4e42:	d81e      	bhi.n	4e82 <__aeabi_dmul+0xde>
    4e44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4e48:	bf08      	it	eq
    4e4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4e4e:	f150 0000 	adcs.w	r0, r0, #0
    4e52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4e56:	bd70      	pop	{r4, r5, r6, pc}
    4e58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4e5c:	ea46 0101 	orr.w	r1, r6, r1
    4e60:	ea40 0002 	orr.w	r0, r0, r2
    4e64:	ea81 0103 	eor.w	r1, r1, r3
    4e68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4e6c:	bfc2      	ittt	gt
    4e6e:	ebd4 050c 	rsbsgt	r5, r4, ip
    4e72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4e76:	bd70      	popgt	{r4, r5, r6, pc}
    4e78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4e7c:	f04f 0e00 	mov.w	lr, #0
    4e80:	3c01      	subs	r4, #1
    4e82:	f300 80ab 	bgt.w	4fdc <__aeabi_dmul+0x238>
    4e86:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4e8a:	bfde      	ittt	le
    4e8c:	2000      	movle	r0, #0
    4e8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4e92:	bd70      	pople	{r4, r5, r6, pc}
    4e94:	f1c4 0400 	rsb	r4, r4, #0
    4e98:	3c20      	subs	r4, #32
    4e9a:	da35      	bge.n	4f08 <__aeabi_dmul+0x164>
    4e9c:	340c      	adds	r4, #12
    4e9e:	dc1b      	bgt.n	4ed8 <__aeabi_dmul+0x134>
    4ea0:	f104 0414 	add.w	r4, r4, #20
    4ea4:	f1c4 0520 	rsb	r5, r4, #32
    4ea8:	fa00 f305 	lsl.w	r3, r0, r5
    4eac:	fa20 f004 	lsr.w	r0, r0, r4
    4eb0:	fa01 f205 	lsl.w	r2, r1, r5
    4eb4:	ea40 0002 	orr.w	r0, r0, r2
    4eb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4ebc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4ec0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4ec4:	fa21 f604 	lsr.w	r6, r1, r4
    4ec8:	eb42 0106 	adc.w	r1, r2, r6
    4ecc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4ed0:	bf08      	it	eq
    4ed2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4ed6:	bd70      	pop	{r4, r5, r6, pc}
    4ed8:	f1c4 040c 	rsb	r4, r4, #12
    4edc:	f1c4 0520 	rsb	r5, r4, #32
    4ee0:	fa00 f304 	lsl.w	r3, r0, r4
    4ee4:	fa20 f005 	lsr.w	r0, r0, r5
    4ee8:	fa01 f204 	lsl.w	r2, r1, r4
    4eec:	ea40 0002 	orr.w	r0, r0, r2
    4ef0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4ef4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4ef8:	f141 0100 	adc.w	r1, r1, #0
    4efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4f00:	bf08      	it	eq
    4f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4f06:	bd70      	pop	{r4, r5, r6, pc}
    4f08:	f1c4 0520 	rsb	r5, r4, #32
    4f0c:	fa00 f205 	lsl.w	r2, r0, r5
    4f10:	ea4e 0e02 	orr.w	lr, lr, r2
    4f14:	fa20 f304 	lsr.w	r3, r0, r4
    4f18:	fa01 f205 	lsl.w	r2, r1, r5
    4f1c:	ea43 0302 	orr.w	r3, r3, r2
    4f20:	fa21 f004 	lsr.w	r0, r1, r4
    4f24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4f28:	fa21 f204 	lsr.w	r2, r1, r4
    4f2c:	ea20 0002 	bic.w	r0, r0, r2
    4f30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4f34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4f38:	bf08      	it	eq
    4f3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4f3e:	bd70      	pop	{r4, r5, r6, pc}
    4f40:	f094 0f00 	teq	r4, #0
    4f44:	d10f      	bne.n	4f66 <__aeabi_dmul+0x1c2>
    4f46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    4f4a:	0040      	lsls	r0, r0, #1
    4f4c:	eb41 0101 	adc.w	r1, r1, r1
    4f50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4f54:	bf08      	it	eq
    4f56:	3c01      	subeq	r4, #1
    4f58:	d0f7      	beq.n	4f4a <__aeabi_dmul+0x1a6>
    4f5a:	ea41 0106 	orr.w	r1, r1, r6
    4f5e:	f095 0f00 	teq	r5, #0
    4f62:	bf18      	it	ne
    4f64:	4770      	bxne	lr
    4f66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    4f6a:	0052      	lsls	r2, r2, #1
    4f6c:	eb43 0303 	adc.w	r3, r3, r3
    4f70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4f74:	bf08      	it	eq
    4f76:	3d01      	subeq	r5, #1
    4f78:	d0f7      	beq.n	4f6a <__aeabi_dmul+0x1c6>
    4f7a:	ea43 0306 	orr.w	r3, r3, r6
    4f7e:	4770      	bx	lr
    4f80:	ea94 0f0c 	teq	r4, ip
    4f84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4f88:	bf18      	it	ne
    4f8a:	ea95 0f0c 	teqne	r5, ip
    4f8e:	d00c      	beq.n	4faa <__aeabi_dmul+0x206>
    4f90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4f94:	bf18      	it	ne
    4f96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4f9a:	d1d1      	bne.n	4f40 <__aeabi_dmul+0x19c>
    4f9c:	ea81 0103 	eor.w	r1, r1, r3
    4fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4fa4:	f04f 0000 	mov.w	r0, #0
    4fa8:	bd70      	pop	{r4, r5, r6, pc}
    4faa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4fae:	bf06      	itte	eq
    4fb0:	4610      	moveq	r0, r2
    4fb2:	4619      	moveq	r1, r3
    4fb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4fb8:	d019      	beq.n	4fee <__aeabi_dmul+0x24a>
    4fba:	ea94 0f0c 	teq	r4, ip
    4fbe:	d102      	bne.n	4fc6 <__aeabi_dmul+0x222>
    4fc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    4fc4:	d113      	bne.n	4fee <__aeabi_dmul+0x24a>
    4fc6:	ea95 0f0c 	teq	r5, ip
    4fca:	d105      	bne.n	4fd8 <__aeabi_dmul+0x234>
    4fcc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    4fd0:	bf1c      	itt	ne
    4fd2:	4610      	movne	r0, r2
    4fd4:	4619      	movne	r1, r3
    4fd6:	d10a      	bne.n	4fee <__aeabi_dmul+0x24a>
    4fd8:	ea81 0103 	eor.w	r1, r1, r3
    4fdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4fe0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4fe4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4fe8:	f04f 0000 	mov.w	r0, #0
    4fec:	bd70      	pop	{r4, r5, r6, pc}
    4fee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4ff2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    4ff6:	bd70      	pop	{r4, r5, r6, pc}

00004ff8 <__aeabi_ddiv>:
    4ff8:	b570      	push	{r4, r5, r6, lr}
    4ffa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4ffe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    5002:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    5006:	bf1d      	ittte	ne
    5008:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    500c:	ea94 0f0c 	teqne	r4, ip
    5010:	ea95 0f0c 	teqne	r5, ip
    5014:	f000 f8a7 	bleq	5166 <__aeabi_ddiv+0x16e>
    5018:	eba4 0405 	sub.w	r4, r4, r5
    501c:	ea81 0e03 	eor.w	lr, r1, r3
    5020:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    5024:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5028:	f000 8088 	beq.w	513c <__aeabi_ddiv+0x144>
    502c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5030:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    5034:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    5038:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    503c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    5040:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    5044:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    5048:	ea4f 2600 	mov.w	r6, r0, lsl #8
    504c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    5050:	429d      	cmp	r5, r3
    5052:	bf08      	it	eq
    5054:	4296      	cmpeq	r6, r2
    5056:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    505a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    505e:	d202      	bcs.n	5066 <__aeabi_ddiv+0x6e>
    5060:	085b      	lsrs	r3, r3, #1
    5062:	ea4f 0232 	mov.w	r2, r2, rrx
    5066:	1ab6      	subs	r6, r6, r2
    5068:	eb65 0503 	sbc.w	r5, r5, r3
    506c:	085b      	lsrs	r3, r3, #1
    506e:	ea4f 0232 	mov.w	r2, r2, rrx
    5072:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    5076:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    507a:	ebb6 0e02 	subs.w	lr, r6, r2
    507e:	eb75 0e03 	sbcs.w	lr, r5, r3
    5082:	bf22      	ittt	cs
    5084:	1ab6      	subcs	r6, r6, r2
    5086:	4675      	movcs	r5, lr
    5088:	ea40 000c 	orrcs.w	r0, r0, ip
    508c:	085b      	lsrs	r3, r3, #1
    508e:	ea4f 0232 	mov.w	r2, r2, rrx
    5092:	ebb6 0e02 	subs.w	lr, r6, r2
    5096:	eb75 0e03 	sbcs.w	lr, r5, r3
    509a:	bf22      	ittt	cs
    509c:	1ab6      	subcs	r6, r6, r2
    509e:	4675      	movcs	r5, lr
    50a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    50a4:	085b      	lsrs	r3, r3, #1
    50a6:	ea4f 0232 	mov.w	r2, r2, rrx
    50aa:	ebb6 0e02 	subs.w	lr, r6, r2
    50ae:	eb75 0e03 	sbcs.w	lr, r5, r3
    50b2:	bf22      	ittt	cs
    50b4:	1ab6      	subcs	r6, r6, r2
    50b6:	4675      	movcs	r5, lr
    50b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    50bc:	085b      	lsrs	r3, r3, #1
    50be:	ea4f 0232 	mov.w	r2, r2, rrx
    50c2:	ebb6 0e02 	subs.w	lr, r6, r2
    50c6:	eb75 0e03 	sbcs.w	lr, r5, r3
    50ca:	bf22      	ittt	cs
    50cc:	1ab6      	subcs	r6, r6, r2
    50ce:	4675      	movcs	r5, lr
    50d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    50d4:	ea55 0e06 	orrs.w	lr, r5, r6
    50d8:	d018      	beq.n	510c <__aeabi_ddiv+0x114>
    50da:	ea4f 1505 	mov.w	r5, r5, lsl #4
    50de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    50e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    50e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    50ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    50ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    50f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    50f6:	d1c0      	bne.n	507a <__aeabi_ddiv+0x82>
    50f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    50fc:	d10b      	bne.n	5116 <__aeabi_ddiv+0x11e>
    50fe:	ea41 0100 	orr.w	r1, r1, r0
    5102:	f04f 0000 	mov.w	r0, #0
    5106:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    510a:	e7b6      	b.n	507a <__aeabi_ddiv+0x82>
    510c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5110:	bf04      	itt	eq
    5112:	4301      	orreq	r1, r0
    5114:	2000      	moveq	r0, #0
    5116:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    511a:	bf88      	it	hi
    511c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5120:	f63f aeaf 	bhi.w	4e82 <__aeabi_dmul+0xde>
    5124:	ebb5 0c03 	subs.w	ip, r5, r3
    5128:	bf04      	itt	eq
    512a:	ebb6 0c02 	subseq.w	ip, r6, r2
    512e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    5132:	f150 0000 	adcs.w	r0, r0, #0
    5136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    513a:	bd70      	pop	{r4, r5, r6, pc}
    513c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    5140:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    5144:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    5148:	bfc2      	ittt	gt
    514a:	ebd4 050c 	rsbsgt	r5, r4, ip
    514e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    5152:	bd70      	popgt	{r4, r5, r6, pc}
    5154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5158:	f04f 0e00 	mov.w	lr, #0
    515c:	3c01      	subs	r4, #1
    515e:	e690      	b.n	4e82 <__aeabi_dmul+0xde>
    5160:	ea45 0e06 	orr.w	lr, r5, r6
    5164:	e68d      	b.n	4e82 <__aeabi_dmul+0xde>
    5166:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    516a:	ea94 0f0c 	teq	r4, ip
    516e:	bf08      	it	eq
    5170:	ea95 0f0c 	teqeq	r5, ip
    5174:	f43f af3b 	beq.w	4fee <__aeabi_dmul+0x24a>
    5178:	ea94 0f0c 	teq	r4, ip
    517c:	d10a      	bne.n	5194 <__aeabi_ddiv+0x19c>
    517e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    5182:	f47f af34 	bne.w	4fee <__aeabi_dmul+0x24a>
    5186:	ea95 0f0c 	teq	r5, ip
    518a:	f47f af25 	bne.w	4fd8 <__aeabi_dmul+0x234>
    518e:	4610      	mov	r0, r2
    5190:	4619      	mov	r1, r3
    5192:	e72c      	b.n	4fee <__aeabi_dmul+0x24a>
    5194:	ea95 0f0c 	teq	r5, ip
    5198:	d106      	bne.n	51a8 <__aeabi_ddiv+0x1b0>
    519a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    519e:	f43f aefd 	beq.w	4f9c <__aeabi_dmul+0x1f8>
    51a2:	4610      	mov	r0, r2
    51a4:	4619      	mov	r1, r3
    51a6:	e722      	b.n	4fee <__aeabi_dmul+0x24a>
    51a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    51ac:	bf18      	it	ne
    51ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    51b2:	f47f aec5 	bne.w	4f40 <__aeabi_dmul+0x19c>
    51b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    51ba:	f47f af0d 	bne.w	4fd8 <__aeabi_dmul+0x234>
    51be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    51c2:	f47f aeeb 	bne.w	4f9c <__aeabi_dmul+0x1f8>
    51c6:	e712      	b.n	4fee <__aeabi_dmul+0x24a>

000051c8 <__gedf2>:
    51c8:	f04f 3cff 	mov.w	ip, #4294967295
    51cc:	e006      	b.n	51dc <__cmpdf2+0x4>
    51ce:	bf00      	nop

000051d0 <__ledf2>:
    51d0:	f04f 0c01 	mov.w	ip, #1
    51d4:	e002      	b.n	51dc <__cmpdf2+0x4>
    51d6:	bf00      	nop

000051d8 <__cmpdf2>:
    51d8:	f04f 0c01 	mov.w	ip, #1
    51dc:	f84d cd04 	str.w	ip, [sp, #-4]!
    51e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    51e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    51e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    51ec:	bf18      	it	ne
    51ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    51f2:	d01b      	beq.n	522c <__cmpdf2+0x54>
    51f4:	b001      	add	sp, #4
    51f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    51fa:	bf0c      	ite	eq
    51fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    5200:	ea91 0f03 	teqne	r1, r3
    5204:	bf02      	ittt	eq
    5206:	ea90 0f02 	teqeq	r0, r2
    520a:	2000      	moveq	r0, #0
    520c:	4770      	bxeq	lr
    520e:	f110 0f00 	cmn.w	r0, #0
    5212:	ea91 0f03 	teq	r1, r3
    5216:	bf58      	it	pl
    5218:	4299      	cmppl	r1, r3
    521a:	bf08      	it	eq
    521c:	4290      	cmpeq	r0, r2
    521e:	bf2c      	ite	cs
    5220:	17d8      	asrcs	r0, r3, #31
    5222:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    5226:	f040 0001 	orr.w	r0, r0, #1
    522a:	4770      	bx	lr
    522c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5234:	d102      	bne.n	523c <__cmpdf2+0x64>
    5236:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    523a:	d107      	bne.n	524c <__cmpdf2+0x74>
    523c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5244:	d1d6      	bne.n	51f4 <__cmpdf2+0x1c>
    5246:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    524a:	d0d3      	beq.n	51f4 <__cmpdf2+0x1c>
    524c:	f85d 0b04 	ldr.w	r0, [sp], #4
    5250:	4770      	bx	lr
    5252:	bf00      	nop

00005254 <__aeabi_cdrcmple>:
    5254:	4684      	mov	ip, r0
    5256:	4610      	mov	r0, r2
    5258:	4662      	mov	r2, ip
    525a:	468c      	mov	ip, r1
    525c:	4619      	mov	r1, r3
    525e:	4663      	mov	r3, ip
    5260:	e000      	b.n	5264 <__aeabi_cdcmpeq>
    5262:	bf00      	nop

00005264 <__aeabi_cdcmpeq>:
    5264:	b501      	push	{r0, lr}
    5266:	f7ff ffb7 	bl	51d8 <__cmpdf2>
    526a:	2800      	cmp	r0, #0
    526c:	bf48      	it	mi
    526e:	f110 0f00 	cmnmi.w	r0, #0
    5272:	bd01      	pop	{r0, pc}

00005274 <__aeabi_dcmpeq>:
    5274:	f84d ed08 	str.w	lr, [sp, #-8]!
    5278:	f7ff fff4 	bl	5264 <__aeabi_cdcmpeq>
    527c:	bf0c      	ite	eq
    527e:	2001      	moveq	r0, #1
    5280:	2000      	movne	r0, #0
    5282:	f85d fb08 	ldr.w	pc, [sp], #8
    5286:	bf00      	nop

00005288 <__aeabi_dcmplt>:
    5288:	f84d ed08 	str.w	lr, [sp, #-8]!
    528c:	f7ff ffea 	bl	5264 <__aeabi_cdcmpeq>
    5290:	bf34      	ite	cc
    5292:	2001      	movcc	r0, #1
    5294:	2000      	movcs	r0, #0
    5296:	f85d fb08 	ldr.w	pc, [sp], #8
    529a:	bf00      	nop

0000529c <__aeabi_dcmple>:
    529c:	f84d ed08 	str.w	lr, [sp, #-8]!
    52a0:	f7ff ffe0 	bl	5264 <__aeabi_cdcmpeq>
    52a4:	bf94      	ite	ls
    52a6:	2001      	movls	r0, #1
    52a8:	2000      	movhi	r0, #0
    52aa:	f85d fb08 	ldr.w	pc, [sp], #8
    52ae:	bf00      	nop

000052b0 <__aeabi_dcmpge>:
    52b0:	f84d ed08 	str.w	lr, [sp, #-8]!
    52b4:	f7ff ffce 	bl	5254 <__aeabi_cdrcmple>
    52b8:	bf94      	ite	ls
    52ba:	2001      	movls	r0, #1
    52bc:	2000      	movhi	r0, #0
    52be:	f85d fb08 	ldr.w	pc, [sp], #8
    52c2:	bf00      	nop

000052c4 <__aeabi_dcmpgt>:
    52c4:	f84d ed08 	str.w	lr, [sp, #-8]!
    52c8:	f7ff ffc4 	bl	5254 <__aeabi_cdrcmple>
    52cc:	bf34      	ite	cc
    52ce:	2001      	movcc	r0, #1
    52d0:	2000      	movcs	r0, #0
    52d2:	f85d fb08 	ldr.w	pc, [sp], #8
    52d6:	bf00      	nop

000052d8 <__aeabi_dcmpun>:
    52d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    52dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    52e0:	d102      	bne.n	52e8 <__aeabi_dcmpun+0x10>
    52e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    52e6:	d10a      	bne.n	52fe <__aeabi_dcmpun+0x26>
    52e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    52ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    52f0:	d102      	bne.n	52f8 <__aeabi_dcmpun+0x20>
    52f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    52f6:	d102      	bne.n	52fe <__aeabi_dcmpun+0x26>
    52f8:	f04f 0000 	mov.w	r0, #0
    52fc:	4770      	bx	lr
    52fe:	f04f 0001 	mov.w	r0, #1
    5302:	4770      	bx	lr

00005304 <__aeabi_d2uiz>:
    5304:	004a      	lsls	r2, r1, #1
    5306:	d211      	bcs.n	532c <__aeabi_d2uiz+0x28>
    5308:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    530c:	d211      	bcs.n	5332 <__aeabi_d2uiz+0x2e>
    530e:	d50d      	bpl.n	532c <__aeabi_d2uiz+0x28>
    5310:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    5314:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    5318:	d40e      	bmi.n	5338 <__aeabi_d2uiz+0x34>
    531a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    531e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5322:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    5326:	fa23 f002 	lsr.w	r0, r3, r2
    532a:	4770      	bx	lr
    532c:	f04f 0000 	mov.w	r0, #0
    5330:	4770      	bx	lr
    5332:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    5336:	d102      	bne.n	533e <__aeabi_d2uiz+0x3a>
    5338:	f04f 30ff 	mov.w	r0, #4294967295
    533c:	4770      	bx	lr
    533e:	f04f 0000 	mov.w	r0, #0
    5342:	4770      	bx	lr

00005344 <__aeabi_d2f>:
    5344:	ea4f 0241 	mov.w	r2, r1, lsl #1
    5348:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    534c:	bf24      	itt	cs
    534e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    5352:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    5356:	d90d      	bls.n	5374 <__aeabi_d2f+0x30>
    5358:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    535c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    5360:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    5364:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    5368:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    536c:	bf08      	it	eq
    536e:	f020 0001 	biceq.w	r0, r0, #1
    5372:	4770      	bx	lr
    5374:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    5378:	d121      	bne.n	53be <__aeabi_d2f+0x7a>
    537a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    537e:	bfbc      	itt	lt
    5380:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    5384:	4770      	bxlt	lr
    5386:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    538a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    538e:	f1c2 0218 	rsb	r2, r2, #24
    5392:	f1c2 0c20 	rsb	ip, r2, #32
    5396:	fa10 f30c 	lsls.w	r3, r0, ip
    539a:	fa20 f002 	lsr.w	r0, r0, r2
    539e:	bf18      	it	ne
    53a0:	f040 0001 	orrne.w	r0, r0, #1
    53a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    53a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    53ac:	fa03 fc0c 	lsl.w	ip, r3, ip
    53b0:	ea40 000c 	orr.w	r0, r0, ip
    53b4:	fa23 f302 	lsr.w	r3, r3, r2
    53b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    53bc:	e7cc      	b.n	5358 <__aeabi_d2f+0x14>
    53be:	ea7f 5362 	mvns.w	r3, r2, asr #21
    53c2:	d107      	bne.n	53d4 <__aeabi_d2f+0x90>
    53c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    53c8:	bf1e      	ittt	ne
    53ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    53ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    53d2:	4770      	bxne	lr
    53d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    53d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    53dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    53e0:	4770      	bx	lr
    53e2:	bf00      	nop

000053e4 <__aeabi_frsub>:
    53e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    53e8:	e002      	b.n	53f0 <__addsf3>
    53ea:	bf00      	nop

000053ec <__aeabi_fsub>:
    53ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000053f0 <__addsf3>:
    53f0:	0042      	lsls	r2, r0, #1
    53f2:	bf1f      	itttt	ne
    53f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    53f8:	ea92 0f03 	teqne	r2, r3
    53fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    5400:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    5404:	d06a      	beq.n	54dc <__addsf3+0xec>
    5406:	ea4f 6212 	mov.w	r2, r2, lsr #24
    540a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    540e:	bfc1      	itttt	gt
    5410:	18d2      	addgt	r2, r2, r3
    5412:	4041      	eorgt	r1, r0
    5414:	4048      	eorgt	r0, r1
    5416:	4041      	eorgt	r1, r0
    5418:	bfb8      	it	lt
    541a:	425b      	neglt	r3, r3
    541c:	2b19      	cmp	r3, #25
    541e:	bf88      	it	hi
    5420:	4770      	bxhi	lr
    5422:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    5426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    542a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    542e:	bf18      	it	ne
    5430:	4240      	negne	r0, r0
    5432:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    5436:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    543a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    543e:	bf18      	it	ne
    5440:	4249      	negne	r1, r1
    5442:	ea92 0f03 	teq	r2, r3
    5446:	d03f      	beq.n	54c8 <__addsf3+0xd8>
    5448:	f1a2 0201 	sub.w	r2, r2, #1
    544c:	fa41 fc03 	asr.w	ip, r1, r3
    5450:	eb10 000c 	adds.w	r0, r0, ip
    5454:	f1c3 0320 	rsb	r3, r3, #32
    5458:	fa01 f103 	lsl.w	r1, r1, r3
    545c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    5460:	d502      	bpl.n	5468 <__addsf3+0x78>
    5462:	4249      	negs	r1, r1
    5464:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    5468:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    546c:	d313      	bcc.n	5496 <__addsf3+0xa6>
    546e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    5472:	d306      	bcc.n	5482 <__addsf3+0x92>
    5474:	0840      	lsrs	r0, r0, #1
    5476:	ea4f 0131 	mov.w	r1, r1, rrx
    547a:	f102 0201 	add.w	r2, r2, #1
    547e:	2afe      	cmp	r2, #254	; 0xfe
    5480:	d251      	bcs.n	5526 <__addsf3+0x136>
    5482:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    5486:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    548a:	bf08      	it	eq
    548c:	f020 0001 	biceq.w	r0, r0, #1
    5490:	ea40 0003 	orr.w	r0, r0, r3
    5494:	4770      	bx	lr
    5496:	0049      	lsls	r1, r1, #1
    5498:	eb40 0000 	adc.w	r0, r0, r0
    549c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    54a0:	f1a2 0201 	sub.w	r2, r2, #1
    54a4:	d1ed      	bne.n	5482 <__addsf3+0x92>
    54a6:	fab0 fc80 	clz	ip, r0
    54aa:	f1ac 0c08 	sub.w	ip, ip, #8
    54ae:	ebb2 020c 	subs.w	r2, r2, ip
    54b2:	fa00 f00c 	lsl.w	r0, r0, ip
    54b6:	bfaa      	itet	ge
    54b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    54bc:	4252      	neglt	r2, r2
    54be:	4318      	orrge	r0, r3
    54c0:	bfbc      	itt	lt
    54c2:	40d0      	lsrlt	r0, r2
    54c4:	4318      	orrlt	r0, r3
    54c6:	4770      	bx	lr
    54c8:	f092 0f00 	teq	r2, #0
    54cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    54d0:	bf06      	itte	eq
    54d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    54d6:	3201      	addeq	r2, #1
    54d8:	3b01      	subne	r3, #1
    54da:	e7b5      	b.n	5448 <__addsf3+0x58>
    54dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    54e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    54e4:	bf18      	it	ne
    54e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    54ea:	d021      	beq.n	5530 <__addsf3+0x140>
    54ec:	ea92 0f03 	teq	r2, r3
    54f0:	d004      	beq.n	54fc <__addsf3+0x10c>
    54f2:	f092 0f00 	teq	r2, #0
    54f6:	bf08      	it	eq
    54f8:	4608      	moveq	r0, r1
    54fa:	4770      	bx	lr
    54fc:	ea90 0f01 	teq	r0, r1
    5500:	bf1c      	itt	ne
    5502:	2000      	movne	r0, #0
    5504:	4770      	bxne	lr
    5506:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    550a:	d104      	bne.n	5516 <__addsf3+0x126>
    550c:	0040      	lsls	r0, r0, #1
    550e:	bf28      	it	cs
    5510:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    5514:	4770      	bx	lr
    5516:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    551a:	bf3c      	itt	cc
    551c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    5520:	4770      	bxcc	lr
    5522:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    5526:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    552a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    552e:	4770      	bx	lr
    5530:	ea7f 6222 	mvns.w	r2, r2, asr #24
    5534:	bf16      	itet	ne
    5536:	4608      	movne	r0, r1
    5538:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    553c:	4601      	movne	r1, r0
    553e:	0242      	lsls	r2, r0, #9
    5540:	bf06      	itte	eq
    5542:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    5546:	ea90 0f01 	teqeq	r0, r1
    554a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    554e:	4770      	bx	lr

00005550 <__aeabi_ui2f>:
    5550:	f04f 0300 	mov.w	r3, #0
    5554:	e004      	b.n	5560 <__aeabi_i2f+0x8>
    5556:	bf00      	nop

00005558 <__aeabi_i2f>:
    5558:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    555c:	bf48      	it	mi
    555e:	4240      	negmi	r0, r0
    5560:	ea5f 0c00 	movs.w	ip, r0
    5564:	bf08      	it	eq
    5566:	4770      	bxeq	lr
    5568:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    556c:	4601      	mov	r1, r0
    556e:	f04f 0000 	mov.w	r0, #0
    5572:	e01c      	b.n	55ae <__aeabi_l2f+0x2a>

00005574 <__aeabi_ul2f>:
    5574:	ea50 0201 	orrs.w	r2, r0, r1
    5578:	bf08      	it	eq
    557a:	4770      	bxeq	lr
    557c:	f04f 0300 	mov.w	r3, #0
    5580:	e00a      	b.n	5598 <__aeabi_l2f+0x14>
    5582:	bf00      	nop

00005584 <__aeabi_l2f>:
    5584:	ea50 0201 	orrs.w	r2, r0, r1
    5588:	bf08      	it	eq
    558a:	4770      	bxeq	lr
    558c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    5590:	d502      	bpl.n	5598 <__aeabi_l2f+0x14>
    5592:	4240      	negs	r0, r0
    5594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5598:	ea5f 0c01 	movs.w	ip, r1
    559c:	bf02      	ittt	eq
    559e:	4684      	moveq	ip, r0
    55a0:	4601      	moveq	r1, r0
    55a2:	2000      	moveq	r0, #0
    55a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    55a8:	bf08      	it	eq
    55aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    55ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    55b2:	fabc f28c 	clz	r2, ip
    55b6:	3a08      	subs	r2, #8
    55b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    55bc:	db10      	blt.n	55e0 <__aeabi_l2f+0x5c>
    55be:	fa01 fc02 	lsl.w	ip, r1, r2
    55c2:	4463      	add	r3, ip
    55c4:	fa00 fc02 	lsl.w	ip, r0, r2
    55c8:	f1c2 0220 	rsb	r2, r2, #32
    55cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    55d0:	fa20 f202 	lsr.w	r2, r0, r2
    55d4:	eb43 0002 	adc.w	r0, r3, r2
    55d8:	bf08      	it	eq
    55da:	f020 0001 	biceq.w	r0, r0, #1
    55de:	4770      	bx	lr
    55e0:	f102 0220 	add.w	r2, r2, #32
    55e4:	fa01 fc02 	lsl.w	ip, r1, r2
    55e8:	f1c2 0220 	rsb	r2, r2, #32
    55ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    55f0:	fa21 f202 	lsr.w	r2, r1, r2
    55f4:	eb43 0002 	adc.w	r0, r3, r2
    55f8:	bf08      	it	eq
    55fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    55fe:	4770      	bx	lr

00005600 <__aeabi_fmul>:
    5600:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5604:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    5608:	bf1e      	ittt	ne
    560a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    560e:	ea92 0f0c 	teqne	r2, ip
    5612:	ea93 0f0c 	teqne	r3, ip
    5616:	d06f      	beq.n	56f8 <__aeabi_fmul+0xf8>
    5618:	441a      	add	r2, r3
    561a:	ea80 0c01 	eor.w	ip, r0, r1
    561e:	0240      	lsls	r0, r0, #9
    5620:	bf18      	it	ne
    5622:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    5626:	d01e      	beq.n	5666 <__aeabi_fmul+0x66>
    5628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    562c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    5630:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    5634:	fba0 3101 	umull	r3, r1, r0, r1
    5638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    563c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    5640:	bf3e      	ittt	cc
    5642:	0049      	lslcc	r1, r1, #1
    5644:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    5648:	005b      	lslcc	r3, r3, #1
    564a:	ea40 0001 	orr.w	r0, r0, r1
    564e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    5652:	2afd      	cmp	r2, #253	; 0xfd
    5654:	d81d      	bhi.n	5692 <__aeabi_fmul+0x92>
    5656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    565a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    565e:	bf08      	it	eq
    5660:	f020 0001 	biceq.w	r0, r0, #1
    5664:	4770      	bx	lr
    5666:	f090 0f00 	teq	r0, #0
    566a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    566e:	bf08      	it	eq
    5670:	0249      	lsleq	r1, r1, #9
    5672:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    5676:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    567a:	3a7f      	subs	r2, #127	; 0x7f
    567c:	bfc2      	ittt	gt
    567e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    5682:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    5686:	4770      	bxgt	lr
    5688:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    568c:	f04f 0300 	mov.w	r3, #0
    5690:	3a01      	subs	r2, #1
    5692:	dc5d      	bgt.n	5750 <__aeabi_fmul+0x150>
    5694:	f112 0f19 	cmn.w	r2, #25
    5698:	bfdc      	itt	le
    569a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    569e:	4770      	bxle	lr
    56a0:	f1c2 0200 	rsb	r2, r2, #0
    56a4:	0041      	lsls	r1, r0, #1
    56a6:	fa21 f102 	lsr.w	r1, r1, r2
    56aa:	f1c2 0220 	rsb	r2, r2, #32
    56ae:	fa00 fc02 	lsl.w	ip, r0, r2
    56b2:	ea5f 0031 	movs.w	r0, r1, rrx
    56b6:	f140 0000 	adc.w	r0, r0, #0
    56ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    56be:	bf08      	it	eq
    56c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    56c4:	4770      	bx	lr
    56c6:	f092 0f00 	teq	r2, #0
    56ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    56ce:	bf02      	ittt	eq
    56d0:	0040      	lsleq	r0, r0, #1
    56d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    56d6:	3a01      	subeq	r2, #1
    56d8:	d0f9      	beq.n	56ce <__aeabi_fmul+0xce>
    56da:	ea40 000c 	orr.w	r0, r0, ip
    56de:	f093 0f00 	teq	r3, #0
    56e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    56e6:	bf02      	ittt	eq
    56e8:	0049      	lsleq	r1, r1, #1
    56ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    56ee:	3b01      	subeq	r3, #1
    56f0:	d0f9      	beq.n	56e6 <__aeabi_fmul+0xe6>
    56f2:	ea41 010c 	orr.w	r1, r1, ip
    56f6:	e78f      	b.n	5618 <__aeabi_fmul+0x18>
    56f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    56fc:	ea92 0f0c 	teq	r2, ip
    5700:	bf18      	it	ne
    5702:	ea93 0f0c 	teqne	r3, ip
    5706:	d00a      	beq.n	571e <__aeabi_fmul+0x11e>
    5708:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    570c:	bf18      	it	ne
    570e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    5712:	d1d8      	bne.n	56c6 <__aeabi_fmul+0xc6>
    5714:	ea80 0001 	eor.w	r0, r0, r1
    5718:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    571c:	4770      	bx	lr
    571e:	f090 0f00 	teq	r0, #0
    5722:	bf17      	itett	ne
    5724:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    5728:	4608      	moveq	r0, r1
    572a:	f091 0f00 	teqne	r1, #0
    572e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    5732:	d014      	beq.n	575e <__aeabi_fmul+0x15e>
    5734:	ea92 0f0c 	teq	r2, ip
    5738:	d101      	bne.n	573e <__aeabi_fmul+0x13e>
    573a:	0242      	lsls	r2, r0, #9
    573c:	d10f      	bne.n	575e <__aeabi_fmul+0x15e>
    573e:	ea93 0f0c 	teq	r3, ip
    5742:	d103      	bne.n	574c <__aeabi_fmul+0x14c>
    5744:	024b      	lsls	r3, r1, #9
    5746:	bf18      	it	ne
    5748:	4608      	movne	r0, r1
    574a:	d108      	bne.n	575e <__aeabi_fmul+0x15e>
    574c:	ea80 0001 	eor.w	r0, r0, r1
    5750:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    5754:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    5758:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    575c:	4770      	bx	lr
    575e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    5762:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    5766:	4770      	bx	lr

00005768 <__aeabi_fdiv>:
    5768:	f04f 0cff 	mov.w	ip, #255	; 0xff
    576c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    5770:	bf1e      	ittt	ne
    5772:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    5776:	ea92 0f0c 	teqne	r2, ip
    577a:	ea93 0f0c 	teqne	r3, ip
    577e:	d069      	beq.n	5854 <__aeabi_fdiv+0xec>
    5780:	eba2 0203 	sub.w	r2, r2, r3
    5784:	ea80 0c01 	eor.w	ip, r0, r1
    5788:	0249      	lsls	r1, r1, #9
    578a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    578e:	d037      	beq.n	5800 <__aeabi_fdiv+0x98>
    5790:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5794:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    5798:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    579c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    57a0:	428b      	cmp	r3, r1
    57a2:	bf38      	it	cc
    57a4:	005b      	lslcc	r3, r3, #1
    57a6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    57aa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    57ae:	428b      	cmp	r3, r1
    57b0:	bf24      	itt	cs
    57b2:	1a5b      	subcs	r3, r3, r1
    57b4:	ea40 000c 	orrcs.w	r0, r0, ip
    57b8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    57bc:	bf24      	itt	cs
    57be:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    57c2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    57c6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    57ca:	bf24      	itt	cs
    57cc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    57d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    57d4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    57d8:	bf24      	itt	cs
    57da:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    57de:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    57e2:	011b      	lsls	r3, r3, #4
    57e4:	bf18      	it	ne
    57e6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    57ea:	d1e0      	bne.n	57ae <__aeabi_fdiv+0x46>
    57ec:	2afd      	cmp	r2, #253	; 0xfd
    57ee:	f63f af50 	bhi.w	5692 <__aeabi_fmul+0x92>
    57f2:	428b      	cmp	r3, r1
    57f4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    57f8:	bf08      	it	eq
    57fa:	f020 0001 	biceq.w	r0, r0, #1
    57fe:	4770      	bx	lr
    5800:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    5804:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    5808:	327f      	adds	r2, #127	; 0x7f
    580a:	bfc2      	ittt	gt
    580c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    5810:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    5814:	4770      	bxgt	lr
    5816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    581a:	f04f 0300 	mov.w	r3, #0
    581e:	3a01      	subs	r2, #1
    5820:	e737      	b.n	5692 <__aeabi_fmul+0x92>
    5822:	f092 0f00 	teq	r2, #0
    5826:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    582a:	bf02      	ittt	eq
    582c:	0040      	lsleq	r0, r0, #1
    582e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    5832:	3a01      	subeq	r2, #1
    5834:	d0f9      	beq.n	582a <__aeabi_fdiv+0xc2>
    5836:	ea40 000c 	orr.w	r0, r0, ip
    583a:	f093 0f00 	teq	r3, #0
    583e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    5842:	bf02      	ittt	eq
    5844:	0049      	lsleq	r1, r1, #1
    5846:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    584a:	3b01      	subeq	r3, #1
    584c:	d0f9      	beq.n	5842 <__aeabi_fdiv+0xda>
    584e:	ea41 010c 	orr.w	r1, r1, ip
    5852:	e795      	b.n	5780 <__aeabi_fdiv+0x18>
    5854:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    5858:	ea92 0f0c 	teq	r2, ip
    585c:	d108      	bne.n	5870 <__aeabi_fdiv+0x108>
    585e:	0242      	lsls	r2, r0, #9
    5860:	f47f af7d 	bne.w	575e <__aeabi_fmul+0x15e>
    5864:	ea93 0f0c 	teq	r3, ip
    5868:	f47f af70 	bne.w	574c <__aeabi_fmul+0x14c>
    586c:	4608      	mov	r0, r1
    586e:	e776      	b.n	575e <__aeabi_fmul+0x15e>
    5870:	ea93 0f0c 	teq	r3, ip
    5874:	d104      	bne.n	5880 <__aeabi_fdiv+0x118>
    5876:	024b      	lsls	r3, r1, #9
    5878:	f43f af4c 	beq.w	5714 <__aeabi_fmul+0x114>
    587c:	4608      	mov	r0, r1
    587e:	e76e      	b.n	575e <__aeabi_fmul+0x15e>
    5880:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    5884:	bf18      	it	ne
    5886:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    588a:	d1ca      	bne.n	5822 <__aeabi_fdiv+0xba>
    588c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    5890:	f47f af5c 	bne.w	574c <__aeabi_fmul+0x14c>
    5894:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    5898:	f47f af3c 	bne.w	5714 <__aeabi_fmul+0x114>
    589c:	e75f      	b.n	575e <__aeabi_fmul+0x15e>
    589e:	bf00      	nop

000058a0 <__errno>:
    58a0:	4b01      	ldr	r3, [pc, #4]	; (58a8 <__errno+0x8>)
    58a2:	6818      	ldr	r0, [r3, #0]
    58a4:	4770      	bx	lr
    58a6:	bf00      	nop
    58a8:	1fff8ed8 	.word	0x1fff8ed8

000058ac <__libc_init_array>:
    58ac:	b570      	push	{r4, r5, r6, lr}
    58ae:	4e0f      	ldr	r6, [pc, #60]	; (58ec <__libc_init_array+0x40>)
    58b0:	4d0f      	ldr	r5, [pc, #60]	; (58f0 <__libc_init_array+0x44>)
    58b2:	1b76      	subs	r6, r6, r5
    58b4:	10b6      	asrs	r6, r6, #2
    58b6:	bf18      	it	ne
    58b8:	2400      	movne	r4, #0
    58ba:	d005      	beq.n	58c8 <__libc_init_array+0x1c>
    58bc:	3401      	adds	r4, #1
    58be:	f855 3b04 	ldr.w	r3, [r5], #4
    58c2:	4798      	blx	r3
    58c4:	42a6      	cmp	r6, r4
    58c6:	d1f9      	bne.n	58bc <__libc_init_array+0x10>
    58c8:	4e0a      	ldr	r6, [pc, #40]	; (58f4 <__libc_init_array+0x48>)
    58ca:	4d0b      	ldr	r5, [pc, #44]	; (58f8 <__libc_init_array+0x4c>)
    58cc:	1b76      	subs	r6, r6, r5
    58ce:	f000 fec3 	bl	6658 <_init>
    58d2:	10b6      	asrs	r6, r6, #2
    58d4:	bf18      	it	ne
    58d6:	2400      	movne	r4, #0
    58d8:	d006      	beq.n	58e8 <__libc_init_array+0x3c>
    58da:	3401      	adds	r4, #1
    58dc:	f855 3b04 	ldr.w	r3, [r5], #4
    58e0:	4798      	blx	r3
    58e2:	42a6      	cmp	r6, r4
    58e4:	d1f9      	bne.n	58da <__libc_init_array+0x2e>
    58e6:	bd70      	pop	{r4, r5, r6, pc}
    58e8:	bd70      	pop	{r4, r5, r6, pc}
    58ea:	bf00      	nop
    58ec:	00006664 	.word	0x00006664
    58f0:	00006664 	.word	0x00006664
    58f4:	00006674 	.word	0x00006674
    58f8:	00006664 	.word	0x00006664

000058fc <malloc>:
    58fc:	4b02      	ldr	r3, [pc, #8]	; (5908 <malloc+0xc>)
    58fe:	4601      	mov	r1, r0
    5900:	6818      	ldr	r0, [r3, #0]
    5902:	f000 b803 	b.w	590c <_malloc_r>
    5906:	bf00      	nop
    5908:	1fff8ed8 	.word	0x1fff8ed8

0000590c <_malloc_r>:
    590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5910:	f101 050b 	add.w	r5, r1, #11
    5914:	2d16      	cmp	r5, #22
    5916:	b083      	sub	sp, #12
    5918:	4606      	mov	r6, r0
    591a:	f240 809f 	bls.w	5a5c <_malloc_r+0x150>
    591e:	f035 0507 	bics.w	r5, r5, #7
    5922:	f100 80bf 	bmi.w	5aa4 <_malloc_r+0x198>
    5926:	42a9      	cmp	r1, r5
    5928:	f200 80bc 	bhi.w	5aa4 <_malloc_r+0x198>
    592c:	f000 faa6 	bl	5e7c <__malloc_lock>
    5930:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    5934:	f0c0 829c 	bcc.w	5e70 <_malloc_r+0x564>
    5938:	0a6b      	lsrs	r3, r5, #9
    593a:	f000 80ba 	beq.w	5ab2 <_malloc_r+0x1a6>
    593e:	2b04      	cmp	r3, #4
    5940:	f200 8183 	bhi.w	5c4a <_malloc_r+0x33e>
    5944:	09a8      	lsrs	r0, r5, #6
    5946:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    594a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    594e:	3038      	adds	r0, #56	; 0x38
    5950:	4fc4      	ldr	r7, [pc, #784]	; (5c64 <_malloc_r+0x358>)
    5952:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    5956:	f1a3 0108 	sub.w	r1, r3, #8
    595a:	685c      	ldr	r4, [r3, #4]
    595c:	42a1      	cmp	r1, r4
    595e:	d107      	bne.n	5970 <_malloc_r+0x64>
    5960:	e0ac      	b.n	5abc <_malloc_r+0x1b0>
    5962:	2a00      	cmp	r2, #0
    5964:	f280 80ac 	bge.w	5ac0 <_malloc_r+0x1b4>
    5968:	68e4      	ldr	r4, [r4, #12]
    596a:	42a1      	cmp	r1, r4
    596c:	f000 80a6 	beq.w	5abc <_malloc_r+0x1b0>
    5970:	6863      	ldr	r3, [r4, #4]
    5972:	f023 0303 	bic.w	r3, r3, #3
    5976:	1b5a      	subs	r2, r3, r5
    5978:	2a0f      	cmp	r2, #15
    597a:	ddf2      	ble.n	5962 <_malloc_r+0x56>
    597c:	49b9      	ldr	r1, [pc, #740]	; (5c64 <_malloc_r+0x358>)
    597e:	693c      	ldr	r4, [r7, #16]
    5980:	f101 0e08 	add.w	lr, r1, #8
    5984:	4574      	cmp	r4, lr
    5986:	f000 81b3 	beq.w	5cf0 <_malloc_r+0x3e4>
    598a:	6863      	ldr	r3, [r4, #4]
    598c:	f023 0303 	bic.w	r3, r3, #3
    5990:	1b5a      	subs	r2, r3, r5
    5992:	2a0f      	cmp	r2, #15
    5994:	f300 8199 	bgt.w	5cca <_malloc_r+0x3be>
    5998:	2a00      	cmp	r2, #0
    599a:	f8c1 e014 	str.w	lr, [r1, #20]
    599e:	f8c1 e010 	str.w	lr, [r1, #16]
    59a2:	f280 809e 	bge.w	5ae2 <_malloc_r+0x1d6>
    59a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    59aa:	f080 8167 	bcs.w	5c7c <_malloc_r+0x370>
    59ae:	08db      	lsrs	r3, r3, #3
    59b0:	f103 0c01 	add.w	ip, r3, #1
    59b4:	2201      	movs	r2, #1
    59b6:	109b      	asrs	r3, r3, #2
    59b8:	fa02 f303 	lsl.w	r3, r2, r3
    59bc:	684a      	ldr	r2, [r1, #4]
    59be:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    59c2:	f8c4 8008 	str.w	r8, [r4, #8]
    59c6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    59ca:	431a      	orrs	r2, r3
    59cc:	f1a9 0308 	sub.w	r3, r9, #8
    59d0:	60e3      	str	r3, [r4, #12]
    59d2:	604a      	str	r2, [r1, #4]
    59d4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    59d8:	f8c8 400c 	str.w	r4, [r8, #12]
    59dc:	1083      	asrs	r3, r0, #2
    59de:	2401      	movs	r4, #1
    59e0:	409c      	lsls	r4, r3
    59e2:	4294      	cmp	r4, r2
    59e4:	f200 808a 	bhi.w	5afc <_malloc_r+0x1f0>
    59e8:	4214      	tst	r4, r2
    59ea:	d106      	bne.n	59fa <_malloc_r+0xee>
    59ec:	f020 0003 	bic.w	r0, r0, #3
    59f0:	0064      	lsls	r4, r4, #1
    59f2:	4214      	tst	r4, r2
    59f4:	f100 0004 	add.w	r0, r0, #4
    59f8:	d0fa      	beq.n	59f0 <_malloc_r+0xe4>
    59fa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    59fe:	46cc      	mov	ip, r9
    5a00:	4680      	mov	r8, r0
    5a02:	f8dc 100c 	ldr.w	r1, [ip, #12]
    5a06:	458c      	cmp	ip, r1
    5a08:	d107      	bne.n	5a1a <_malloc_r+0x10e>
    5a0a:	e173      	b.n	5cf4 <_malloc_r+0x3e8>
    5a0c:	2a00      	cmp	r2, #0
    5a0e:	f280 8181 	bge.w	5d14 <_malloc_r+0x408>
    5a12:	68c9      	ldr	r1, [r1, #12]
    5a14:	458c      	cmp	ip, r1
    5a16:	f000 816d 	beq.w	5cf4 <_malloc_r+0x3e8>
    5a1a:	684b      	ldr	r3, [r1, #4]
    5a1c:	f023 0303 	bic.w	r3, r3, #3
    5a20:	1b5a      	subs	r2, r3, r5
    5a22:	2a0f      	cmp	r2, #15
    5a24:	ddf2      	ble.n	5a0c <_malloc_r+0x100>
    5a26:	460c      	mov	r4, r1
    5a28:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    5a2c:	f854 8f08 	ldr.w	r8, [r4, #8]!
    5a30:	194b      	adds	r3, r1, r5
    5a32:	f045 0501 	orr.w	r5, r5, #1
    5a36:	604d      	str	r5, [r1, #4]
    5a38:	f042 0101 	orr.w	r1, r2, #1
    5a3c:	f8c8 c00c 	str.w	ip, [r8, #12]
    5a40:	4630      	mov	r0, r6
    5a42:	f8cc 8008 	str.w	r8, [ip, #8]
    5a46:	617b      	str	r3, [r7, #20]
    5a48:	613b      	str	r3, [r7, #16]
    5a4a:	f8c3 e00c 	str.w	lr, [r3, #12]
    5a4e:	f8c3 e008 	str.w	lr, [r3, #8]
    5a52:	6059      	str	r1, [r3, #4]
    5a54:	509a      	str	r2, [r3, r2]
    5a56:	f000 fa13 	bl	5e80 <__malloc_unlock>
    5a5a:	e01f      	b.n	5a9c <_malloc_r+0x190>
    5a5c:	2910      	cmp	r1, #16
    5a5e:	d821      	bhi.n	5aa4 <_malloc_r+0x198>
    5a60:	f000 fa0c 	bl	5e7c <__malloc_lock>
    5a64:	2510      	movs	r5, #16
    5a66:	2306      	movs	r3, #6
    5a68:	2002      	movs	r0, #2
    5a6a:	4f7e      	ldr	r7, [pc, #504]	; (5c64 <_malloc_r+0x358>)
    5a6c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    5a70:	f1a3 0208 	sub.w	r2, r3, #8
    5a74:	685c      	ldr	r4, [r3, #4]
    5a76:	4294      	cmp	r4, r2
    5a78:	f000 8145 	beq.w	5d06 <_malloc_r+0x3fa>
    5a7c:	6863      	ldr	r3, [r4, #4]
    5a7e:	68e1      	ldr	r1, [r4, #12]
    5a80:	68a5      	ldr	r5, [r4, #8]
    5a82:	f023 0303 	bic.w	r3, r3, #3
    5a86:	4423      	add	r3, r4
    5a88:	4630      	mov	r0, r6
    5a8a:	685a      	ldr	r2, [r3, #4]
    5a8c:	60e9      	str	r1, [r5, #12]
    5a8e:	f042 0201 	orr.w	r2, r2, #1
    5a92:	608d      	str	r5, [r1, #8]
    5a94:	605a      	str	r2, [r3, #4]
    5a96:	f000 f9f3 	bl	5e80 <__malloc_unlock>
    5a9a:	3408      	adds	r4, #8
    5a9c:	4620      	mov	r0, r4
    5a9e:	b003      	add	sp, #12
    5aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5aa4:	2400      	movs	r4, #0
    5aa6:	230c      	movs	r3, #12
    5aa8:	4620      	mov	r0, r4
    5aaa:	6033      	str	r3, [r6, #0]
    5aac:	b003      	add	sp, #12
    5aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ab2:	2380      	movs	r3, #128	; 0x80
    5ab4:	f04f 0e40 	mov.w	lr, #64	; 0x40
    5ab8:	203f      	movs	r0, #63	; 0x3f
    5aba:	e749      	b.n	5950 <_malloc_r+0x44>
    5abc:	4670      	mov	r0, lr
    5abe:	e75d      	b.n	597c <_malloc_r+0x70>
    5ac0:	4423      	add	r3, r4
    5ac2:	68e1      	ldr	r1, [r4, #12]
    5ac4:	685a      	ldr	r2, [r3, #4]
    5ac6:	68a5      	ldr	r5, [r4, #8]
    5ac8:	f042 0201 	orr.w	r2, r2, #1
    5acc:	60e9      	str	r1, [r5, #12]
    5ace:	4630      	mov	r0, r6
    5ad0:	608d      	str	r5, [r1, #8]
    5ad2:	605a      	str	r2, [r3, #4]
    5ad4:	f000 f9d4 	bl	5e80 <__malloc_unlock>
    5ad8:	3408      	adds	r4, #8
    5ada:	4620      	mov	r0, r4
    5adc:	b003      	add	sp, #12
    5ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ae2:	4423      	add	r3, r4
    5ae4:	4630      	mov	r0, r6
    5ae6:	685a      	ldr	r2, [r3, #4]
    5ae8:	f042 0201 	orr.w	r2, r2, #1
    5aec:	605a      	str	r2, [r3, #4]
    5aee:	f000 f9c7 	bl	5e80 <__malloc_unlock>
    5af2:	3408      	adds	r4, #8
    5af4:	4620      	mov	r0, r4
    5af6:	b003      	add	sp, #12
    5af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5afc:	68bc      	ldr	r4, [r7, #8]
    5afe:	6863      	ldr	r3, [r4, #4]
    5b00:	f023 0803 	bic.w	r8, r3, #3
    5b04:	45a8      	cmp	r8, r5
    5b06:	d304      	bcc.n	5b12 <_malloc_r+0x206>
    5b08:	ebc5 0308 	rsb	r3, r5, r8
    5b0c:	2b0f      	cmp	r3, #15
    5b0e:	f300 808c 	bgt.w	5c2a <_malloc_r+0x31e>
    5b12:	4b55      	ldr	r3, [pc, #340]	; (5c68 <_malloc_r+0x35c>)
    5b14:	f8df 9160 	ldr.w	r9, [pc, #352]	; 5c78 <_malloc_r+0x36c>
    5b18:	681a      	ldr	r2, [r3, #0]
    5b1a:	f8d9 3000 	ldr.w	r3, [r9]
    5b1e:	3301      	adds	r3, #1
    5b20:	442a      	add	r2, r5
    5b22:	eb04 0a08 	add.w	sl, r4, r8
    5b26:	f000 8160 	beq.w	5dea <_malloc_r+0x4de>
    5b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5b2e:	320f      	adds	r2, #15
    5b30:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    5b34:	f022 020f 	bic.w	r2, r2, #15
    5b38:	4611      	mov	r1, r2
    5b3a:	4630      	mov	r0, r6
    5b3c:	9201      	str	r2, [sp, #4]
    5b3e:	f000 f9a1 	bl	5e84 <_sbrk_r>
    5b42:	f1b0 3fff 	cmp.w	r0, #4294967295
    5b46:	4683      	mov	fp, r0
    5b48:	9a01      	ldr	r2, [sp, #4]
    5b4a:	f000 8158 	beq.w	5dfe <_malloc_r+0x4f2>
    5b4e:	4582      	cmp	sl, r0
    5b50:	f200 80fc 	bhi.w	5d4c <_malloc_r+0x440>
    5b54:	4b45      	ldr	r3, [pc, #276]	; (5c6c <_malloc_r+0x360>)
    5b56:	6819      	ldr	r1, [r3, #0]
    5b58:	45da      	cmp	sl, fp
    5b5a:	4411      	add	r1, r2
    5b5c:	6019      	str	r1, [r3, #0]
    5b5e:	f000 8153 	beq.w	5e08 <_malloc_r+0x4fc>
    5b62:	f8d9 0000 	ldr.w	r0, [r9]
    5b66:	f8df e110 	ldr.w	lr, [pc, #272]	; 5c78 <_malloc_r+0x36c>
    5b6a:	3001      	adds	r0, #1
    5b6c:	bf1b      	ittet	ne
    5b6e:	ebca 0a0b 	rsbne	sl, sl, fp
    5b72:	4451      	addne	r1, sl
    5b74:	f8ce b000 	streq.w	fp, [lr]
    5b78:	6019      	strne	r1, [r3, #0]
    5b7a:	f01b 0107 	ands.w	r1, fp, #7
    5b7e:	f000 8117 	beq.w	5db0 <_malloc_r+0x4a4>
    5b82:	f1c1 0008 	rsb	r0, r1, #8
    5b86:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    5b8a:	4483      	add	fp, r0
    5b8c:	3108      	adds	r1, #8
    5b8e:	445a      	add	r2, fp
    5b90:	f3c2 020b 	ubfx	r2, r2, #0, #12
    5b94:	ebc2 0901 	rsb	r9, r2, r1
    5b98:	4649      	mov	r1, r9
    5b9a:	4630      	mov	r0, r6
    5b9c:	9301      	str	r3, [sp, #4]
    5b9e:	f000 f971 	bl	5e84 <_sbrk_r>
    5ba2:	1c43      	adds	r3, r0, #1
    5ba4:	9b01      	ldr	r3, [sp, #4]
    5ba6:	f000 813f 	beq.w	5e28 <_malloc_r+0x51c>
    5baa:	ebcb 0200 	rsb	r2, fp, r0
    5bae:	444a      	add	r2, r9
    5bb0:	f042 0201 	orr.w	r2, r2, #1
    5bb4:	6819      	ldr	r1, [r3, #0]
    5bb6:	f8c7 b008 	str.w	fp, [r7, #8]
    5bba:	4449      	add	r1, r9
    5bbc:	42bc      	cmp	r4, r7
    5bbe:	f8cb 2004 	str.w	r2, [fp, #4]
    5bc2:	6019      	str	r1, [r3, #0]
    5bc4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5c6c <_malloc_r+0x360>
    5bc8:	d016      	beq.n	5bf8 <_malloc_r+0x2ec>
    5bca:	f1b8 0f0f 	cmp.w	r8, #15
    5bce:	f240 80fd 	bls.w	5dcc <_malloc_r+0x4c0>
    5bd2:	6862      	ldr	r2, [r4, #4]
    5bd4:	f1a8 030c 	sub.w	r3, r8, #12
    5bd8:	f023 0307 	bic.w	r3, r3, #7
    5bdc:	18e0      	adds	r0, r4, r3
    5bde:	f002 0201 	and.w	r2, r2, #1
    5be2:	f04f 0e05 	mov.w	lr, #5
    5be6:	431a      	orrs	r2, r3
    5be8:	2b0f      	cmp	r3, #15
    5bea:	6062      	str	r2, [r4, #4]
    5bec:	f8c0 e004 	str.w	lr, [r0, #4]
    5bf0:	f8c0 e008 	str.w	lr, [r0, #8]
    5bf4:	f200 811c 	bhi.w	5e30 <_malloc_r+0x524>
    5bf8:	4b1d      	ldr	r3, [pc, #116]	; (5c70 <_malloc_r+0x364>)
    5bfa:	68bc      	ldr	r4, [r7, #8]
    5bfc:	681a      	ldr	r2, [r3, #0]
    5bfe:	4291      	cmp	r1, r2
    5c00:	bf88      	it	hi
    5c02:	6019      	strhi	r1, [r3, #0]
    5c04:	4b1b      	ldr	r3, [pc, #108]	; (5c74 <_malloc_r+0x368>)
    5c06:	681a      	ldr	r2, [r3, #0]
    5c08:	4291      	cmp	r1, r2
    5c0a:	6862      	ldr	r2, [r4, #4]
    5c0c:	bf88      	it	hi
    5c0e:	6019      	strhi	r1, [r3, #0]
    5c10:	f022 0203 	bic.w	r2, r2, #3
    5c14:	4295      	cmp	r5, r2
    5c16:	eba2 0305 	sub.w	r3, r2, r5
    5c1a:	d801      	bhi.n	5c20 <_malloc_r+0x314>
    5c1c:	2b0f      	cmp	r3, #15
    5c1e:	dc04      	bgt.n	5c2a <_malloc_r+0x31e>
    5c20:	4630      	mov	r0, r6
    5c22:	f000 f92d 	bl	5e80 <__malloc_unlock>
    5c26:	2400      	movs	r4, #0
    5c28:	e738      	b.n	5a9c <_malloc_r+0x190>
    5c2a:	1962      	adds	r2, r4, r5
    5c2c:	f043 0301 	orr.w	r3, r3, #1
    5c30:	f045 0501 	orr.w	r5, r5, #1
    5c34:	6065      	str	r5, [r4, #4]
    5c36:	4630      	mov	r0, r6
    5c38:	60ba      	str	r2, [r7, #8]
    5c3a:	6053      	str	r3, [r2, #4]
    5c3c:	f000 f920 	bl	5e80 <__malloc_unlock>
    5c40:	3408      	adds	r4, #8
    5c42:	4620      	mov	r0, r4
    5c44:	b003      	add	sp, #12
    5c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c4a:	2b14      	cmp	r3, #20
    5c4c:	d971      	bls.n	5d32 <_malloc_r+0x426>
    5c4e:	2b54      	cmp	r3, #84	; 0x54
    5c50:	f200 80a4 	bhi.w	5d9c <_malloc_r+0x490>
    5c54:	0b28      	lsrs	r0, r5, #12
    5c56:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    5c5a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5c5e:	306e      	adds	r0, #110	; 0x6e
    5c60:	e676      	b.n	5950 <_malloc_r+0x44>
    5c62:	bf00      	nop
    5c64:	1fff8edc 	.word	0x1fff8edc
    5c68:	1fff98f4 	.word	0x1fff98f4
    5c6c:	1fff98f8 	.word	0x1fff98f8
    5c70:	1fff98f0 	.word	0x1fff98f0
    5c74:	1fff98ec 	.word	0x1fff98ec
    5c78:	1fff92e8 	.word	0x1fff92e8
    5c7c:	0a5a      	lsrs	r2, r3, #9
    5c7e:	2a04      	cmp	r2, #4
    5c80:	d95e      	bls.n	5d40 <_malloc_r+0x434>
    5c82:	2a14      	cmp	r2, #20
    5c84:	f200 80b3 	bhi.w	5dee <_malloc_r+0x4e2>
    5c88:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    5c8c:	0049      	lsls	r1, r1, #1
    5c8e:	325b      	adds	r2, #91	; 0x5b
    5c90:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    5c94:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    5c98:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 5e78 <_malloc_r+0x56c>
    5c9c:	f1ac 0c08 	sub.w	ip, ip, #8
    5ca0:	458c      	cmp	ip, r1
    5ca2:	f000 8088 	beq.w	5db6 <_malloc_r+0x4aa>
    5ca6:	684a      	ldr	r2, [r1, #4]
    5ca8:	f022 0203 	bic.w	r2, r2, #3
    5cac:	4293      	cmp	r3, r2
    5cae:	d202      	bcs.n	5cb6 <_malloc_r+0x3aa>
    5cb0:	6889      	ldr	r1, [r1, #8]
    5cb2:	458c      	cmp	ip, r1
    5cb4:	d1f7      	bne.n	5ca6 <_malloc_r+0x39a>
    5cb6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    5cba:	687a      	ldr	r2, [r7, #4]
    5cbc:	f8c4 c00c 	str.w	ip, [r4, #12]
    5cc0:	60a1      	str	r1, [r4, #8]
    5cc2:	f8cc 4008 	str.w	r4, [ip, #8]
    5cc6:	60cc      	str	r4, [r1, #12]
    5cc8:	e688      	b.n	59dc <_malloc_r+0xd0>
    5cca:	1963      	adds	r3, r4, r5
    5ccc:	f042 0701 	orr.w	r7, r2, #1
    5cd0:	f045 0501 	orr.w	r5, r5, #1
    5cd4:	6065      	str	r5, [r4, #4]
    5cd6:	4630      	mov	r0, r6
    5cd8:	614b      	str	r3, [r1, #20]
    5cda:	610b      	str	r3, [r1, #16]
    5cdc:	f8c3 e00c 	str.w	lr, [r3, #12]
    5ce0:	f8c3 e008 	str.w	lr, [r3, #8]
    5ce4:	605f      	str	r7, [r3, #4]
    5ce6:	509a      	str	r2, [r3, r2]
    5ce8:	3408      	adds	r4, #8
    5cea:	f000 f8c9 	bl	5e80 <__malloc_unlock>
    5cee:	e6d5      	b.n	5a9c <_malloc_r+0x190>
    5cf0:	684a      	ldr	r2, [r1, #4]
    5cf2:	e673      	b.n	59dc <_malloc_r+0xd0>
    5cf4:	f108 0801 	add.w	r8, r8, #1
    5cf8:	f018 0f03 	tst.w	r8, #3
    5cfc:	f10c 0c08 	add.w	ip, ip, #8
    5d00:	f47f ae7f 	bne.w	5a02 <_malloc_r+0xf6>
    5d04:	e030      	b.n	5d68 <_malloc_r+0x45c>
    5d06:	68dc      	ldr	r4, [r3, #12]
    5d08:	42a3      	cmp	r3, r4
    5d0a:	bf08      	it	eq
    5d0c:	3002      	addeq	r0, #2
    5d0e:	f43f ae35 	beq.w	597c <_malloc_r+0x70>
    5d12:	e6b3      	b.n	5a7c <_malloc_r+0x170>
    5d14:	440b      	add	r3, r1
    5d16:	460c      	mov	r4, r1
    5d18:	685a      	ldr	r2, [r3, #4]
    5d1a:	68c9      	ldr	r1, [r1, #12]
    5d1c:	f854 5f08 	ldr.w	r5, [r4, #8]!
    5d20:	f042 0201 	orr.w	r2, r2, #1
    5d24:	605a      	str	r2, [r3, #4]
    5d26:	4630      	mov	r0, r6
    5d28:	60e9      	str	r1, [r5, #12]
    5d2a:	608d      	str	r5, [r1, #8]
    5d2c:	f000 f8a8 	bl	5e80 <__malloc_unlock>
    5d30:	e6b4      	b.n	5a9c <_malloc_r+0x190>
    5d32:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    5d36:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    5d3a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5d3e:	e607      	b.n	5950 <_malloc_r+0x44>
    5d40:	099a      	lsrs	r2, r3, #6
    5d42:	f102 0139 	add.w	r1, r2, #57	; 0x39
    5d46:	0049      	lsls	r1, r1, #1
    5d48:	3238      	adds	r2, #56	; 0x38
    5d4a:	e7a1      	b.n	5c90 <_malloc_r+0x384>
    5d4c:	42bc      	cmp	r4, r7
    5d4e:	4b4a      	ldr	r3, [pc, #296]	; (5e78 <_malloc_r+0x56c>)
    5d50:	f43f af00 	beq.w	5b54 <_malloc_r+0x248>
    5d54:	689c      	ldr	r4, [r3, #8]
    5d56:	6862      	ldr	r2, [r4, #4]
    5d58:	f022 0203 	bic.w	r2, r2, #3
    5d5c:	e75a      	b.n	5c14 <_malloc_r+0x308>
    5d5e:	f859 3908 	ldr.w	r3, [r9], #-8
    5d62:	4599      	cmp	r9, r3
    5d64:	f040 8082 	bne.w	5e6c <_malloc_r+0x560>
    5d68:	f010 0f03 	tst.w	r0, #3
    5d6c:	f100 30ff 	add.w	r0, r0, #4294967295
    5d70:	d1f5      	bne.n	5d5e <_malloc_r+0x452>
    5d72:	687b      	ldr	r3, [r7, #4]
    5d74:	ea23 0304 	bic.w	r3, r3, r4
    5d78:	607b      	str	r3, [r7, #4]
    5d7a:	0064      	lsls	r4, r4, #1
    5d7c:	429c      	cmp	r4, r3
    5d7e:	f63f aebd 	bhi.w	5afc <_malloc_r+0x1f0>
    5d82:	2c00      	cmp	r4, #0
    5d84:	f43f aeba 	beq.w	5afc <_malloc_r+0x1f0>
    5d88:	421c      	tst	r4, r3
    5d8a:	4640      	mov	r0, r8
    5d8c:	f47f ae35 	bne.w	59fa <_malloc_r+0xee>
    5d90:	0064      	lsls	r4, r4, #1
    5d92:	421c      	tst	r4, r3
    5d94:	f100 0004 	add.w	r0, r0, #4
    5d98:	d0fa      	beq.n	5d90 <_malloc_r+0x484>
    5d9a:	e62e      	b.n	59fa <_malloc_r+0xee>
    5d9c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5da0:	d818      	bhi.n	5dd4 <_malloc_r+0x4c8>
    5da2:	0be8      	lsrs	r0, r5, #15
    5da4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    5da8:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5dac:	3077      	adds	r0, #119	; 0x77
    5dae:	e5cf      	b.n	5950 <_malloc_r+0x44>
    5db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5db4:	e6eb      	b.n	5b8e <_malloc_r+0x282>
    5db6:	2101      	movs	r1, #1
    5db8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5dbc:	1092      	asrs	r2, r2, #2
    5dbe:	fa01 f202 	lsl.w	r2, r1, r2
    5dc2:	431a      	orrs	r2, r3
    5dc4:	f8c8 2004 	str.w	r2, [r8, #4]
    5dc8:	4661      	mov	r1, ip
    5dca:	e777      	b.n	5cbc <_malloc_r+0x3b0>
    5dcc:	2301      	movs	r3, #1
    5dce:	f8cb 3004 	str.w	r3, [fp, #4]
    5dd2:	e725      	b.n	5c20 <_malloc_r+0x314>
    5dd4:	f240 5254 	movw	r2, #1364	; 0x554
    5dd8:	4293      	cmp	r3, r2
    5dda:	d820      	bhi.n	5e1e <_malloc_r+0x512>
    5ddc:	0ca8      	lsrs	r0, r5, #18
    5dde:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    5de2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5de6:	307c      	adds	r0, #124	; 0x7c
    5de8:	e5b2      	b.n	5950 <_malloc_r+0x44>
    5dea:	3210      	adds	r2, #16
    5dec:	e6a4      	b.n	5b38 <_malloc_r+0x22c>
    5dee:	2a54      	cmp	r2, #84	; 0x54
    5df0:	d826      	bhi.n	5e40 <_malloc_r+0x534>
    5df2:	0b1a      	lsrs	r2, r3, #12
    5df4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    5df8:	0049      	lsls	r1, r1, #1
    5dfa:	326e      	adds	r2, #110	; 0x6e
    5dfc:	e748      	b.n	5c90 <_malloc_r+0x384>
    5dfe:	68bc      	ldr	r4, [r7, #8]
    5e00:	6862      	ldr	r2, [r4, #4]
    5e02:	f022 0203 	bic.w	r2, r2, #3
    5e06:	e705      	b.n	5c14 <_malloc_r+0x308>
    5e08:	f3ca 000b 	ubfx	r0, sl, #0, #12
    5e0c:	2800      	cmp	r0, #0
    5e0e:	f47f aea8 	bne.w	5b62 <_malloc_r+0x256>
    5e12:	4442      	add	r2, r8
    5e14:	68bb      	ldr	r3, [r7, #8]
    5e16:	f042 0201 	orr.w	r2, r2, #1
    5e1a:	605a      	str	r2, [r3, #4]
    5e1c:	e6ec      	b.n	5bf8 <_malloc_r+0x2ec>
    5e1e:	23fe      	movs	r3, #254	; 0xfe
    5e20:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    5e24:	207e      	movs	r0, #126	; 0x7e
    5e26:	e593      	b.n	5950 <_malloc_r+0x44>
    5e28:	2201      	movs	r2, #1
    5e2a:	f04f 0900 	mov.w	r9, #0
    5e2e:	e6c1      	b.n	5bb4 <_malloc_r+0x2a8>
    5e30:	f104 0108 	add.w	r1, r4, #8
    5e34:	4630      	mov	r0, r6
    5e36:	f000 f8a9 	bl	5f8c <_free_r>
    5e3a:	f8d9 1000 	ldr.w	r1, [r9]
    5e3e:	e6db      	b.n	5bf8 <_malloc_r+0x2ec>
    5e40:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5e44:	d805      	bhi.n	5e52 <_malloc_r+0x546>
    5e46:	0bda      	lsrs	r2, r3, #15
    5e48:	f102 0178 	add.w	r1, r2, #120	; 0x78
    5e4c:	0049      	lsls	r1, r1, #1
    5e4e:	3277      	adds	r2, #119	; 0x77
    5e50:	e71e      	b.n	5c90 <_malloc_r+0x384>
    5e52:	f240 5154 	movw	r1, #1364	; 0x554
    5e56:	428a      	cmp	r2, r1
    5e58:	d805      	bhi.n	5e66 <_malloc_r+0x55a>
    5e5a:	0c9a      	lsrs	r2, r3, #18
    5e5c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    5e60:	0049      	lsls	r1, r1, #1
    5e62:	327c      	adds	r2, #124	; 0x7c
    5e64:	e714      	b.n	5c90 <_malloc_r+0x384>
    5e66:	21fe      	movs	r1, #254	; 0xfe
    5e68:	227e      	movs	r2, #126	; 0x7e
    5e6a:	e711      	b.n	5c90 <_malloc_r+0x384>
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	e784      	b.n	5d7a <_malloc_r+0x46e>
    5e70:	08e8      	lsrs	r0, r5, #3
    5e72:	1c43      	adds	r3, r0, #1
    5e74:	005b      	lsls	r3, r3, #1
    5e76:	e5f8      	b.n	5a6a <_malloc_r+0x15e>
    5e78:	1fff8edc 	.word	0x1fff8edc

00005e7c <__malloc_lock>:
    5e7c:	4770      	bx	lr
    5e7e:	bf00      	nop

00005e80 <__malloc_unlock>:
    5e80:	4770      	bx	lr
    5e82:	bf00      	nop

00005e84 <_sbrk_r>:
    5e84:	b538      	push	{r3, r4, r5, lr}
    5e86:	4c07      	ldr	r4, [pc, #28]	; (5ea4 <_sbrk_r+0x20>)
    5e88:	2300      	movs	r3, #0
    5e8a:	4605      	mov	r5, r0
    5e8c:	4608      	mov	r0, r1
    5e8e:	6023      	str	r3, [r4, #0]
    5e90:	f7fc fe0a 	bl	2aa8 <_sbrk>
    5e94:	1c43      	adds	r3, r0, #1
    5e96:	d000      	beq.n	5e9a <_sbrk_r+0x16>
    5e98:	bd38      	pop	{r3, r4, r5, pc}
    5e9a:	6823      	ldr	r3, [r4, #0]
    5e9c:	2b00      	cmp	r3, #0
    5e9e:	d0fb      	beq.n	5e98 <_sbrk_r+0x14>
    5ea0:	602b      	str	r3, [r5, #0]
    5ea2:	bd38      	pop	{r3, r4, r5, pc}
    5ea4:	1fff9934 	.word	0x1fff9934

00005ea8 <register_fini>:
    5ea8:	4b02      	ldr	r3, [pc, #8]	; (5eb4 <register_fini+0xc>)
    5eaa:	b113      	cbz	r3, 5eb2 <register_fini+0xa>
    5eac:	4802      	ldr	r0, [pc, #8]	; (5eb8 <register_fini+0x10>)
    5eae:	f000 b805 	b.w	5ebc <atexit>
    5eb2:	4770      	bx	lr
    5eb4:	00000000 	.word	0x00000000
    5eb8:	00005ec9 	.word	0x00005ec9

00005ebc <atexit>:
    5ebc:	2300      	movs	r3, #0
    5ebe:	4601      	mov	r1, r0
    5ec0:	461a      	mov	r2, r3
    5ec2:	4618      	mov	r0, r3
    5ec4:	f000 b94a 	b.w	615c <__register_exitproc>

00005ec8 <__libc_fini_array>:
    5ec8:	b538      	push	{r3, r4, r5, lr}
    5eca:	4d07      	ldr	r5, [pc, #28]	; (5ee8 <__libc_fini_array+0x20>)
    5ecc:	4c07      	ldr	r4, [pc, #28]	; (5eec <__libc_fini_array+0x24>)
    5ece:	1b2c      	subs	r4, r5, r4
    5ed0:	10a4      	asrs	r4, r4, #2
    5ed2:	d005      	beq.n	5ee0 <__libc_fini_array+0x18>
    5ed4:	3c01      	subs	r4, #1
    5ed6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    5eda:	4798      	blx	r3
    5edc:	2c00      	cmp	r4, #0
    5ede:	d1f9      	bne.n	5ed4 <__libc_fini_array+0xc>
    5ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5ee4:	f000 bbc6 	b.w	6674 <__init_array_end>
	...

00005ef0 <_malloc_trim_r>:
    5ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ef2:	4f23      	ldr	r7, [pc, #140]	; (5f80 <_malloc_trim_r+0x90>)
    5ef4:	460c      	mov	r4, r1
    5ef6:	4606      	mov	r6, r0
    5ef8:	f7ff ffc0 	bl	5e7c <__malloc_lock>
    5efc:	68bb      	ldr	r3, [r7, #8]
    5efe:	685d      	ldr	r5, [r3, #4]
    5f00:	f025 0503 	bic.w	r5, r5, #3
    5f04:	1b29      	subs	r1, r5, r4
    5f06:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    5f0a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    5f0e:	f021 010f 	bic.w	r1, r1, #15
    5f12:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    5f16:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    5f1a:	db07      	blt.n	5f2c <_malloc_trim_r+0x3c>
    5f1c:	2100      	movs	r1, #0
    5f1e:	4630      	mov	r0, r6
    5f20:	f7ff ffb0 	bl	5e84 <_sbrk_r>
    5f24:	68bb      	ldr	r3, [r7, #8]
    5f26:	442b      	add	r3, r5
    5f28:	4298      	cmp	r0, r3
    5f2a:	d004      	beq.n	5f36 <_malloc_trim_r+0x46>
    5f2c:	4630      	mov	r0, r6
    5f2e:	f7ff ffa7 	bl	5e80 <__malloc_unlock>
    5f32:	2000      	movs	r0, #0
    5f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f36:	4261      	negs	r1, r4
    5f38:	4630      	mov	r0, r6
    5f3a:	f7ff ffa3 	bl	5e84 <_sbrk_r>
    5f3e:	3001      	adds	r0, #1
    5f40:	d00d      	beq.n	5f5e <_malloc_trim_r+0x6e>
    5f42:	4b10      	ldr	r3, [pc, #64]	; (5f84 <_malloc_trim_r+0x94>)
    5f44:	68ba      	ldr	r2, [r7, #8]
    5f46:	6819      	ldr	r1, [r3, #0]
    5f48:	1b2d      	subs	r5, r5, r4
    5f4a:	f045 0501 	orr.w	r5, r5, #1
    5f4e:	4630      	mov	r0, r6
    5f50:	1b09      	subs	r1, r1, r4
    5f52:	6055      	str	r5, [r2, #4]
    5f54:	6019      	str	r1, [r3, #0]
    5f56:	f7ff ff93 	bl	5e80 <__malloc_unlock>
    5f5a:	2001      	movs	r0, #1
    5f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f5e:	2100      	movs	r1, #0
    5f60:	4630      	mov	r0, r6
    5f62:	f7ff ff8f 	bl	5e84 <_sbrk_r>
    5f66:	68ba      	ldr	r2, [r7, #8]
    5f68:	1a83      	subs	r3, r0, r2
    5f6a:	2b0f      	cmp	r3, #15
    5f6c:	ddde      	ble.n	5f2c <_malloc_trim_r+0x3c>
    5f6e:	4c06      	ldr	r4, [pc, #24]	; (5f88 <_malloc_trim_r+0x98>)
    5f70:	4904      	ldr	r1, [pc, #16]	; (5f84 <_malloc_trim_r+0x94>)
    5f72:	6824      	ldr	r4, [r4, #0]
    5f74:	f043 0301 	orr.w	r3, r3, #1
    5f78:	1b00      	subs	r0, r0, r4
    5f7a:	6053      	str	r3, [r2, #4]
    5f7c:	6008      	str	r0, [r1, #0]
    5f7e:	e7d5      	b.n	5f2c <_malloc_trim_r+0x3c>
    5f80:	1fff8edc 	.word	0x1fff8edc
    5f84:	1fff98f8 	.word	0x1fff98f8
    5f88:	1fff92e8 	.word	0x1fff92e8

00005f8c <_free_r>:
    5f8c:	2900      	cmp	r1, #0
    5f8e:	d045      	beq.n	601c <_free_r+0x90>
    5f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f94:	460d      	mov	r5, r1
    5f96:	4680      	mov	r8, r0
    5f98:	f7ff ff70 	bl	5e7c <__malloc_lock>
    5f9c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    5fa0:	496a      	ldr	r1, [pc, #424]	; (614c <_free_r+0x1c0>)
    5fa2:	f027 0301 	bic.w	r3, r7, #1
    5fa6:	f1a5 0408 	sub.w	r4, r5, #8
    5faa:	18e2      	adds	r2, r4, r3
    5fac:	688e      	ldr	r6, [r1, #8]
    5fae:	6850      	ldr	r0, [r2, #4]
    5fb0:	42b2      	cmp	r2, r6
    5fb2:	f020 0003 	bic.w	r0, r0, #3
    5fb6:	d062      	beq.n	607e <_free_r+0xf2>
    5fb8:	07fe      	lsls	r6, r7, #31
    5fba:	6050      	str	r0, [r2, #4]
    5fbc:	d40b      	bmi.n	5fd6 <_free_r+0x4a>
    5fbe:	f855 7c08 	ldr.w	r7, [r5, #-8]
    5fc2:	1be4      	subs	r4, r4, r7
    5fc4:	f101 0e08 	add.w	lr, r1, #8
    5fc8:	68a5      	ldr	r5, [r4, #8]
    5fca:	4575      	cmp	r5, lr
    5fcc:	443b      	add	r3, r7
    5fce:	d06f      	beq.n	60b0 <_free_r+0x124>
    5fd0:	68e7      	ldr	r7, [r4, #12]
    5fd2:	60ef      	str	r7, [r5, #12]
    5fd4:	60bd      	str	r5, [r7, #8]
    5fd6:	1815      	adds	r5, r2, r0
    5fd8:	686d      	ldr	r5, [r5, #4]
    5fda:	07ed      	lsls	r5, r5, #31
    5fdc:	d542      	bpl.n	6064 <_free_r+0xd8>
    5fde:	f043 0201 	orr.w	r2, r3, #1
    5fe2:	6062      	str	r2, [r4, #4]
    5fe4:	50e3      	str	r3, [r4, r3]
    5fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5fea:	d218      	bcs.n	601e <_free_r+0x92>
    5fec:	08db      	lsrs	r3, r3, #3
    5fee:	1c5a      	adds	r2, r3, #1
    5ff0:	684d      	ldr	r5, [r1, #4]
    5ff2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    5ff6:	60a7      	str	r7, [r4, #8]
    5ff8:	2001      	movs	r0, #1
    5ffa:	109b      	asrs	r3, r3, #2
    5ffc:	fa00 f303 	lsl.w	r3, r0, r3
    6000:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    6004:	431d      	orrs	r5, r3
    6006:	3808      	subs	r0, #8
    6008:	60e0      	str	r0, [r4, #12]
    600a:	604d      	str	r5, [r1, #4]
    600c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    6010:	60fc      	str	r4, [r7, #12]
    6012:	4640      	mov	r0, r8
    6014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6018:	f7ff bf32 	b.w	5e80 <__malloc_unlock>
    601c:	4770      	bx	lr
    601e:	0a5a      	lsrs	r2, r3, #9
    6020:	2a04      	cmp	r2, #4
    6022:	d853      	bhi.n	60cc <_free_r+0x140>
    6024:	099a      	lsrs	r2, r3, #6
    6026:	f102 0739 	add.w	r7, r2, #57	; 0x39
    602a:	007f      	lsls	r7, r7, #1
    602c:	f102 0538 	add.w	r5, r2, #56	; 0x38
    6030:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    6034:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    6038:	4944      	ldr	r1, [pc, #272]	; (614c <_free_r+0x1c0>)
    603a:	3808      	subs	r0, #8
    603c:	4290      	cmp	r0, r2
    603e:	d04d      	beq.n	60dc <_free_r+0x150>
    6040:	6851      	ldr	r1, [r2, #4]
    6042:	f021 0103 	bic.w	r1, r1, #3
    6046:	428b      	cmp	r3, r1
    6048:	d202      	bcs.n	6050 <_free_r+0xc4>
    604a:	6892      	ldr	r2, [r2, #8]
    604c:	4290      	cmp	r0, r2
    604e:	d1f7      	bne.n	6040 <_free_r+0xb4>
    6050:	68d0      	ldr	r0, [r2, #12]
    6052:	60e0      	str	r0, [r4, #12]
    6054:	60a2      	str	r2, [r4, #8]
    6056:	6084      	str	r4, [r0, #8]
    6058:	60d4      	str	r4, [r2, #12]
    605a:	4640      	mov	r0, r8
    605c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6060:	f7ff bf0e 	b.w	5e80 <__malloc_unlock>
    6064:	6895      	ldr	r5, [r2, #8]
    6066:	4f3a      	ldr	r7, [pc, #232]	; (6150 <_free_r+0x1c4>)
    6068:	42bd      	cmp	r5, r7
    606a:	4403      	add	r3, r0
    606c:	d03f      	beq.n	60ee <_free_r+0x162>
    606e:	68d0      	ldr	r0, [r2, #12]
    6070:	60e8      	str	r0, [r5, #12]
    6072:	f043 0201 	orr.w	r2, r3, #1
    6076:	6085      	str	r5, [r0, #8]
    6078:	6062      	str	r2, [r4, #4]
    607a:	50e3      	str	r3, [r4, r3]
    607c:	e7b3      	b.n	5fe6 <_free_r+0x5a>
    607e:	07ff      	lsls	r7, r7, #31
    6080:	4403      	add	r3, r0
    6082:	d407      	bmi.n	6094 <_free_r+0x108>
    6084:	f855 2c08 	ldr.w	r2, [r5, #-8]
    6088:	1aa4      	subs	r4, r4, r2
    608a:	4413      	add	r3, r2
    608c:	68a0      	ldr	r0, [r4, #8]
    608e:	68e2      	ldr	r2, [r4, #12]
    6090:	60c2      	str	r2, [r0, #12]
    6092:	6090      	str	r0, [r2, #8]
    6094:	4a2f      	ldr	r2, [pc, #188]	; (6154 <_free_r+0x1c8>)
    6096:	6812      	ldr	r2, [r2, #0]
    6098:	f043 0001 	orr.w	r0, r3, #1
    609c:	4293      	cmp	r3, r2
    609e:	6060      	str	r0, [r4, #4]
    60a0:	608c      	str	r4, [r1, #8]
    60a2:	d3b6      	bcc.n	6012 <_free_r+0x86>
    60a4:	4b2c      	ldr	r3, [pc, #176]	; (6158 <_free_r+0x1cc>)
    60a6:	4640      	mov	r0, r8
    60a8:	6819      	ldr	r1, [r3, #0]
    60aa:	f7ff ff21 	bl	5ef0 <_malloc_trim_r>
    60ae:	e7b0      	b.n	6012 <_free_r+0x86>
    60b0:	1811      	adds	r1, r2, r0
    60b2:	6849      	ldr	r1, [r1, #4]
    60b4:	07c9      	lsls	r1, r1, #31
    60b6:	d444      	bmi.n	6142 <_free_r+0x1b6>
    60b8:	6891      	ldr	r1, [r2, #8]
    60ba:	68d2      	ldr	r2, [r2, #12]
    60bc:	60ca      	str	r2, [r1, #12]
    60be:	4403      	add	r3, r0
    60c0:	f043 0001 	orr.w	r0, r3, #1
    60c4:	6091      	str	r1, [r2, #8]
    60c6:	6060      	str	r0, [r4, #4]
    60c8:	50e3      	str	r3, [r4, r3]
    60ca:	e7a2      	b.n	6012 <_free_r+0x86>
    60cc:	2a14      	cmp	r2, #20
    60ce:	d817      	bhi.n	6100 <_free_r+0x174>
    60d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    60d4:	007f      	lsls	r7, r7, #1
    60d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    60da:	e7a9      	b.n	6030 <_free_r+0xa4>
    60dc:	10aa      	asrs	r2, r5, #2
    60de:	684b      	ldr	r3, [r1, #4]
    60e0:	2501      	movs	r5, #1
    60e2:	fa05 f202 	lsl.w	r2, r5, r2
    60e6:	4313      	orrs	r3, r2
    60e8:	604b      	str	r3, [r1, #4]
    60ea:	4602      	mov	r2, r0
    60ec:	e7b1      	b.n	6052 <_free_r+0xc6>
    60ee:	f043 0201 	orr.w	r2, r3, #1
    60f2:	614c      	str	r4, [r1, #20]
    60f4:	610c      	str	r4, [r1, #16]
    60f6:	60e5      	str	r5, [r4, #12]
    60f8:	60a5      	str	r5, [r4, #8]
    60fa:	6062      	str	r2, [r4, #4]
    60fc:	50e3      	str	r3, [r4, r3]
    60fe:	e788      	b.n	6012 <_free_r+0x86>
    6100:	2a54      	cmp	r2, #84	; 0x54
    6102:	d806      	bhi.n	6112 <_free_r+0x186>
    6104:	0b1a      	lsrs	r2, r3, #12
    6106:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    610a:	007f      	lsls	r7, r7, #1
    610c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    6110:	e78e      	b.n	6030 <_free_r+0xa4>
    6112:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    6116:	d806      	bhi.n	6126 <_free_r+0x19a>
    6118:	0bda      	lsrs	r2, r3, #15
    611a:	f102 0778 	add.w	r7, r2, #120	; 0x78
    611e:	007f      	lsls	r7, r7, #1
    6120:	f102 0577 	add.w	r5, r2, #119	; 0x77
    6124:	e784      	b.n	6030 <_free_r+0xa4>
    6126:	f240 5054 	movw	r0, #1364	; 0x554
    612a:	4282      	cmp	r2, r0
    612c:	d806      	bhi.n	613c <_free_r+0x1b0>
    612e:	0c9a      	lsrs	r2, r3, #18
    6130:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    6134:	007f      	lsls	r7, r7, #1
    6136:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    613a:	e779      	b.n	6030 <_free_r+0xa4>
    613c:	27fe      	movs	r7, #254	; 0xfe
    613e:	257e      	movs	r5, #126	; 0x7e
    6140:	e776      	b.n	6030 <_free_r+0xa4>
    6142:	f043 0201 	orr.w	r2, r3, #1
    6146:	6062      	str	r2, [r4, #4]
    6148:	50e3      	str	r3, [r4, r3]
    614a:	e762      	b.n	6012 <_free_r+0x86>
    614c:	1fff8edc 	.word	0x1fff8edc
    6150:	1fff8ee4 	.word	0x1fff8ee4
    6154:	1fff92e4 	.word	0x1fff92e4
    6158:	1fff98f4 	.word	0x1fff98f4

0000615c <__register_exitproc>:
    615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6160:	4c25      	ldr	r4, [pc, #148]	; (61f8 <__register_exitproc+0x9c>)
    6162:	6825      	ldr	r5, [r4, #0]
    6164:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    6168:	4606      	mov	r6, r0
    616a:	4688      	mov	r8, r1
    616c:	4692      	mov	sl, r2
    616e:	4699      	mov	r9, r3
    6170:	b3c4      	cbz	r4, 61e4 <__register_exitproc+0x88>
    6172:	6860      	ldr	r0, [r4, #4]
    6174:	281f      	cmp	r0, #31
    6176:	dc17      	bgt.n	61a8 <__register_exitproc+0x4c>
    6178:	1c43      	adds	r3, r0, #1
    617a:	b176      	cbz	r6, 619a <__register_exitproc+0x3e>
    617c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    6180:	2201      	movs	r2, #1
    6182:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    6186:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    618a:	4082      	lsls	r2, r0
    618c:	4311      	orrs	r1, r2
    618e:	2e02      	cmp	r6, #2
    6190:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    6194:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    6198:	d01e      	beq.n	61d8 <__register_exitproc+0x7c>
    619a:	3002      	adds	r0, #2
    619c:	6063      	str	r3, [r4, #4]
    619e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    61a2:	2000      	movs	r0, #0
    61a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61a8:	4b14      	ldr	r3, [pc, #80]	; (61fc <__register_exitproc+0xa0>)
    61aa:	b303      	cbz	r3, 61ee <__register_exitproc+0x92>
    61ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
    61b0:	f7ff fba4 	bl	58fc <malloc>
    61b4:	4604      	mov	r4, r0
    61b6:	b1d0      	cbz	r0, 61ee <__register_exitproc+0x92>
    61b8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    61bc:	2700      	movs	r7, #0
    61be:	e880 0088 	stmia.w	r0, {r3, r7}
    61c2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    61c6:	4638      	mov	r0, r7
    61c8:	2301      	movs	r3, #1
    61ca:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    61ce:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    61d2:	2e00      	cmp	r6, #0
    61d4:	d0e1      	beq.n	619a <__register_exitproc+0x3e>
    61d6:	e7d1      	b.n	617c <__register_exitproc+0x20>
    61d8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    61dc:	430a      	orrs	r2, r1
    61de:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    61e2:	e7da      	b.n	619a <__register_exitproc+0x3e>
    61e4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    61e8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    61ec:	e7c1      	b.n	6172 <__register_exitproc+0x16>
    61ee:	f04f 30ff 	mov.w	r0, #4294967295
    61f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61f6:	bf00      	nop
    61f8:	00006654 	.word	0x00006654
    61fc:	000058fd 	.word	0x000058fd
    6200:	50444d56 	.word	0x50444d56
    6204:	7c315f56 	.word	0x7c315f56
    6208:	4d565f31 	.word	0x4d565f31
    620c:	0a565044 	.word	0x0a565044
    6210:	00000000 	.word	0x00000000
    6214:	72617453 	.word	0x72617453
    6218:	676e6974 	.word	0x676e6974
    621c:	6e657320 	.word	0x6e657320
    6220:	73726f73 	.word	0x73726f73
    6224:	002e2e2e 	.word	0x002e2e2e
    6228:	20445309 	.word	0x20445309
    622c:	64726163 	.word	0x64726163
    6230:	61657220 	.word	0x61657220
    6234:	00007964 	.word	0x00007964
    6238:	35534d09 	.word	0x35534d09
    623c:	20313136 	.word	0x20313136
    6240:	64616572 	.word	0x64616572
    6244:	00000079 	.word	0x00000079
    6248:	55504d09 	.word	0x55504d09
    624c:	30353239 	.word	0x30353239
    6250:	61657220 	.word	0x61657220
    6254:	ff007964 	.word	0xff007964
    6258:	3635534d 	.word	0x3635534d
    625c:	72203131 	.word	0x72203131
    6260:	74657365 	.word	0x74657365
    6264:	69616620 	.word	0x69616620
    6268:	0064656c 	.word	0x0064656c
    626c:	4d4f5250 	.word	0x4d4f5250
    6270:	61657220 	.word	0x61657220
    6274:	61662064 	.word	0x61662064
    6278:	64656c69 	.word	0x64656c69
    627c:	00000000 	.word	0x00000000
    6280:	72203144 	.word	0x72203144
    6284:	20646165 	.word	0x20646165
    6288:	6c696166 	.word	0x6c696166
    628c:	00006465 	.word	0x00006465
    6290:	72203244 	.word	0x72203244
    6294:	20646165 	.word	0x20646165
    6298:	6c696166 	.word	0x6c696166
    629c:	ff006465 	.word	0xff006465

000062a0 <TwoWire::i2c0_hardware>:
    62a0:	40048034 00000040 ffff1112 000202ff     4..@@...........
    62b0:	10130000 02ffffff 00000002 00000018     ................

000062c0 <TwoWire::i2c1_hardware>:
    62c0:	40048034 00000080 ffffff1e 000002ff     4..@............
    62d0:	ff1d0000 02ffffff 00000000 00000019     ................

000062e0 <vtable for TwoWire>:
	...
    62e8:	000007b1 00000775 00000729 00000771     ....u...)...q...
    62f8:	0000072d 00000739 00000759 30444d43     -...9...Y...CMD0
    6308:	69616620 0064656c 38444d43 69616620      failed.CMD8 fai
    6318:	0064656c 35444d43 43412f35 3134444d     led.CMD55/ACMD41
    6328:	69616620 0064656c 74697257 72652065      failed.Write er
    6338:	2e726f72 ffffff00                       ror.....

00006340 <SPISettings::ctar_div_table>:
    6340:	00030002 00050004 00080006 000c000a     ................
    6350:	00140010 00200018 00380028 00600040     ...... .(.8.@.`.
    6360:	00c00080 01800100 02800200 ffff0300     ................

00006370 <SPISettings::ctar_clock_table>:
    6370:	80000000 80010000 00000000 80020000     ................
    6380:	00010000 00001001 00020000 00011001     ................
    6390:	00002003 00020001 00012003 00003004     . ....... ...0..
    63a0:	00022003 00032003 00004005 00014005     . ... ...@...@..
    63b0:	00005006 00015006 00006007 00016007     .P...P...`...`..
    63c0:	00007008 00026007 00017008              .p...`...p..

000063cc <SPIClass::spi0_hardware>:
    63cc:	4004803c 00001000 00001a04 00007fff     <..@............
    63dc:	00001011 0000112d 0000080c 00000200     ....-...........
    63ec:	00000200 0000070b 00000240 00000200     ........@.......
    63fc:	00000e0d 00000240 00000200 0609020a     ....@...........
    640c:	16151714 0000000f 00000200 00000200     ................
    641c:	00000200 00000200 00000200 00000200     ................
    642c:	00000200 00000200 00000200 02020101     ................
    643c:	08080404 00000010 50444d56 00005f45     ........VMDPE_..
    644c:	003a323a 0000003a 444d565f 00004550     :2:.:..._VMDPE..
    645c:	50444d56 00005f43 444d565f 00004350     VMDPC_.._VMDPC..
    646c:	6f727245 41203a72 6d657474 74207470     Error: Attempt t
    647c:	6573206f 20612074 64616572 6c6e6f2d     o set a read-onl
    648c:	61762079 62616972 6f20656c 61642072     y variable or da
    649c:	74206174 20657079 20746f6e 70707573     ta type not supp
    64ac:	6574726f 000a0d64                       orted...

000064b4 <digital_pin_to_info_PGM>:
    64b4:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    64c4:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    64d4:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    64e4:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    64f4:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    6504:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    6514:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    6524:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    6534:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    6544:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    6554:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    6564:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    6574:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
    6584:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
    6594:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
    65a4:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
    65b4:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@
    65c4:	ffff0a0d 006e616e 0066766f 00666e69     ....nan.ovf.inf.

000065d4 <vtable for usb_serial_class>:
	...
    65dc:	00004579 00004571 0000456d 00004569     yE..qE..mE..iE..
    65ec:	00004565 00004561 0000455d 00004559     eE..aE..]E..YE..

000065fc <usb_endpoint_config_table>:
    65fc:	15191500                                ....

00006600 <usb_descriptor_list>:
    6600:	00000100 1fff8a08 00000012 00000200     ................
    6610:	1fff8a34 00000043 00000300 1fff8a90     4...C...........
    6620:	00000000 04090301 1fff8a1c 00000000     ................
    6630:	04090302 1fff8a78 00000000 04090303     ....x...........
    6640:	1fff8a94 00000000 00000000 00000000     ................
    6650:	00000000                                ....

00006654 <_global_impure_ptr>:
    6654:	1fff8ab0                                ....

00006658 <_init>:
    6658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    665a:	bf00      	nop
    665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    665e:	bc08      	pop	{r3}
    6660:	469e      	mov	lr, r3
    6662:	4770      	bx	lr

00006664 <__init_array_start>:
    6664:	00005ea9 	.word	0x00005ea9

00006668 <__frame_dummy_init_array_entry>:
    6668:	00000435 000005e1 00002901              5........)..

Disassembly of section .fini:

00006674 <_fini>:
    6674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6676:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b08      	ldr	r3, [pc, #32]	; (1fff8744 <port_E_isr+0x24>)
1fff8724:	681c      	ldr	r4, [r3, #0]
1fff8726:	601c      	str	r4, [r3, #0]
1fff8728:	b154      	cbz	r4, 1fff8740 <port_E_isr+0x20>
1fff872a:	4d07      	ldr	r5, [pc, #28]	; (1fff8748 <port_E_isr+0x28>)
1fff872c:	fa94 f3a4 	rbit	r3, r4
1fff8730:	fab3 f383 	clz	r3, r3
1fff8734:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8738:	4798      	blx	r3
1fff873a:	1e63      	subs	r3, r4, #1
1fff873c:	401c      	ands	r4, r3
1fff873e:	d1f5      	bne.n	1fff872c <port_E_isr+0xc>
1fff8740:	bd38      	pop	{r3, r4, r5, pc}
1fff8742:	bf00      	nop
1fff8744:	4004d0a0 	.word	0x4004d0a0
1fff8748:	1fff89e8 	.word	0x1fff89e8

1fff874c <port_D_isr>:

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
1fff874c:	b538      	push	{r3, r4, r5, lr}
1fff874e:	4b08      	ldr	r3, [pc, #32]	; (1fff8770 <port_D_isr+0x24>)
1fff8750:	681c      	ldr	r4, [r3, #0]
1fff8752:	601c      	str	r4, [r3, #0]
1fff8754:	b154      	cbz	r4, 1fff876c <port_D_isr+0x20>
1fff8756:	4d07      	ldr	r5, [pc, #28]	; (1fff8774 <port_D_isr+0x28>)
1fff8758:	fa94 f3a4 	rbit	r3, r4
1fff875c:	fab3 f383 	clz	r3, r3
1fff8760:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8764:	4798      	blx	r3
1fff8766:	1e63      	subs	r3, r4, #1
1fff8768:	401c      	ands	r4, r3
1fff876a:	d1f5      	bne.n	1fff8758 <port_D_isr+0xc>
1fff876c:	bd38      	pop	{r3, r4, r5, pc}
1fff876e:	bf00      	nop
1fff8770:	4004c0a0 	.word	0x4004c0a0
1fff8774:	1fff89c8 	.word	0x1fff89c8

1fff8778 <port_C_isr>:
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
1fff8778:	b538      	push	{r3, r4, r5, lr}
1fff877a:	4b08      	ldr	r3, [pc, #32]	; (1fff879c <port_C_isr+0x24>)
1fff877c:	681c      	ldr	r4, [r3, #0]
1fff877e:	601c      	str	r4, [r3, #0]
1fff8780:	b154      	cbz	r4, 1fff8798 <port_C_isr+0x20>
1fff8782:	4d07      	ldr	r5, [pc, #28]	; (1fff87a0 <port_C_isr+0x28>)
1fff8784:	fa94 f3a4 	rbit	r3, r4
1fff8788:	fab3 f383 	clz	r3, r3
1fff878c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8790:	4798      	blx	r3
1fff8792:	1e63      	subs	r3, r4, #1
1fff8794:	401c      	ands	r4, r3
1fff8796:	d1f5      	bne.n	1fff8784 <port_C_isr+0xc>
1fff8798:	bd38      	pop	{r3, r4, r5, pc}
1fff879a:	bf00      	nop
1fff879c:	4004b0a0 	.word	0x4004b0a0
1fff87a0:	1fff8998 	.word	0x1fff8998

1fff87a4 <port_B_isr>:
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
1fff87a4:	b538      	push	{r3, r4, r5, lr}
1fff87a6:	4b08      	ldr	r3, [pc, #32]	; (1fff87c8 <port_B_isr+0x24>)
1fff87a8:	681c      	ldr	r4, [r3, #0]
1fff87aa:	601c      	str	r4, [r3, #0]
1fff87ac:	b154      	cbz	r4, 1fff87c4 <port_B_isr+0x20>
1fff87ae:	4d07      	ldr	r5, [pc, #28]	; (1fff87cc <port_B_isr+0x28>)
1fff87b0:	fa94 f3a4 	rbit	r3, r4
1fff87b4:	fab3 f383 	clz	r3, r3
1fff87b8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87bc:	4798      	blx	r3
1fff87be:	1e63      	subs	r3, r4, #1
1fff87c0:	401c      	ands	r4, r3
1fff87c2:	d1f5      	bne.n	1fff87b0 <port_B_isr+0xc>
1fff87c4:	bd38      	pop	{r3, r4, r5, pc}
1fff87c6:	bf00      	nop
1fff87c8:	4004a0a0 	.word	0x4004a0a0
1fff87cc:	1fff8948 	.word	0x1fff8948

1fff87d0 <port_A_isr>:
		}                                                     \
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
1fff87d0:	b538      	push	{r3, r4, r5, lr}
1fff87d2:	4b08      	ldr	r3, [pc, #32]	; (1fff87f4 <port_A_isr+0x24>)
1fff87d4:	681c      	ldr	r4, [r3, #0]
1fff87d6:	601c      	str	r4, [r3, #0]
1fff87d8:	b154      	cbz	r4, 1fff87f0 <port_A_isr+0x20>
1fff87da:	4d07      	ldr	r5, [pc, #28]	; (1fff87f8 <port_A_isr+0x28>)
1fff87dc:	fa94 f3a4 	rbit	r3, r4
1fff87e0:	fab3 f383 	clz	r3, r3
1fff87e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87e8:	4798      	blx	r3
1fff87ea:	1e63      	subs	r3, r4, #1
1fff87ec:	401c      	ands	r4, r3
1fff87ee:	d1f5      	bne.n	1fff87dc <port_A_isr+0xc>
1fff87f0:	bd38      	pop	{r3, r4, r5, pc}
1fff87f2:	bf00      	nop
1fff87f4:	400490a0 	.word	0x400490a0
1fff87f8:	1fff8910 	.word	0x1fff8910

1fff87fc <Wire>:
1fff87fc:	000062e8 00000000 000003e8 00000000     .b..............
1fff880c:	40066000 000062a0 00000000 00000000     .`.@.b..........
	...

1fff8868 <Wire1>:
1fff8868:	000062e8 00000000 000003e8 00000000     .b..............
1fff8878:	40067000 000062c0 00000000 00000000     .p.@.b..........
	...

1fff88d4 <SPI>:
1fff88d4:	4002c000 000063cc 00000000 00000000     ...@.c..........
	...

1fff890c <__brkval>:
1fff890c:	1fff9938                                8...

1fff8910 <isr_table_portA>:
1fff8910:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff8920:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff8930:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff8940:	00002ad5 00002ad5                       .*...*..

1fff8948 <isr_table_portB>:
1fff8948:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff8958:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff8968:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff8978:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff8988:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..

1fff8998 <isr_table_portC>:
1fff8998:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff89a8:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff89b8:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..

1fff89c8 <isr_table_portD>:
1fff89c8:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..
1fff89d8:	00002ad5 00002ad5 00002ad5 00002ad5     .*...*...*...*..

1fff89e8 <isr_table_portE>:
1fff89e8:	00002ad5 00002ad5                       .*...*..

1fff89f0 <usb_buffer_available>:
1fff89f0:	ffffffff                                ....

1fff89f4 <Serial>:
1fff89f4:	000065dc 00000000 000003e8 00000000     .e..............

1fff8a04 <analog_config_bits>:
1fff8a04:	0000040a                                         .

1fff8a05 <analog_num_average>:
1fff8a05:	12000004                                         ...

1fff8a08 <device_descriptor>:
1fff8a08:	01100112 40000002 048316c0 02010275     .......@....u...
1fff8a18:	00000103                                ....

1fff8a1c <usb_string_manufacturer_name_default>:
1fff8a1c:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8a2c:	00690075 006f006e                       u.i.n.o.

1fff8a34 <config_descriptor>:
1fff8a34:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8a44:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8a54:	00062405 82050701 40001003 00010409     .$.........@....
1fff8a64:	00000a02 03050700 00004002 02840507     .........@......
1fff8a74:	00000040                                @...

1fff8a78 <usb_string_product_name_default>:
1fff8a78:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8a88:	00610069 0000006c                       i.a.l...

1fff8a90 <string0>:
1fff8a90:	04090304                                ....

1fff8a94 <usb_string_serial_number_default>:
1fff8a94:	0000030c 00000000 00000000 00000000     ................
	...

1fff8ab0 <impure_data>:
1fff8ab0:	00000000 1fff8d9c 1fff8e04 1fff8e6c     ............l...
	...
1fff8b58:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff8b68:	0005deec 0000000b 00000000 00000000     ................
	...

1fff8ed8 <_impure_ptr>:
1fff8ed8:	1fff8ab0                                ....

1fff8edc <__malloc_av_>:
	...
1fff8ee4:	1fff8edc 1fff8edc 1fff8ee4 1fff8ee4     ................
1fff8ef4:	1fff8eec 1fff8eec 1fff8ef4 1fff8ef4     ................
1fff8f04:	1fff8efc 1fff8efc 1fff8f04 1fff8f04     ................
1fff8f14:	1fff8f0c 1fff8f0c 1fff8f14 1fff8f14     ................
1fff8f24:	1fff8f1c 1fff8f1c 1fff8f24 1fff8f24     ........$...$...
1fff8f34:	1fff8f2c 1fff8f2c 1fff8f34 1fff8f34     ,...,...4...4...
1fff8f44:	1fff8f3c 1fff8f3c 1fff8f44 1fff8f44     <...<...D...D...
1fff8f54:	1fff8f4c 1fff8f4c 1fff8f54 1fff8f54     L...L...T...T...
1fff8f64:	1fff8f5c 1fff8f5c 1fff8f64 1fff8f64     \...\...d...d...
1fff8f74:	1fff8f6c 1fff8f6c 1fff8f74 1fff8f74     l...l...t...t...
1fff8f84:	1fff8f7c 1fff8f7c 1fff8f84 1fff8f84     |...|...........
1fff8f94:	1fff8f8c 1fff8f8c 1fff8f94 1fff8f94     ................
1fff8fa4:	1fff8f9c 1fff8f9c 1fff8fa4 1fff8fa4     ................
1fff8fb4:	1fff8fac 1fff8fac 1fff8fb4 1fff8fb4     ................
1fff8fc4:	1fff8fbc 1fff8fbc 1fff8fc4 1fff8fc4     ................
1fff8fd4:	1fff8fcc 1fff8fcc 1fff8fd4 1fff8fd4     ................
1fff8fe4:	1fff8fdc 1fff8fdc 1fff8fe4 1fff8fe4     ................
1fff8ff4:	1fff8fec 1fff8fec 1fff8ff4 1fff8ff4     ................
1fff9004:	1fff8ffc 1fff8ffc 1fff9004 1fff9004     ................
1fff9014:	1fff900c 1fff900c 1fff9014 1fff9014     ................
1fff9024:	1fff901c 1fff901c 1fff9024 1fff9024     ........$...$...
1fff9034:	1fff902c 1fff902c 1fff9034 1fff9034     ,...,...4...4...
1fff9044:	1fff903c 1fff903c 1fff9044 1fff9044     <...<...D...D...
1fff9054:	1fff904c 1fff904c 1fff9054 1fff9054     L...L...T...T...
1fff9064:	1fff905c 1fff905c 1fff9064 1fff9064     \...\...d...d...
1fff9074:	1fff906c 1fff906c 1fff9074 1fff9074     l...l...t...t...
1fff9084:	1fff907c 1fff907c 1fff9084 1fff9084     |...|...........
1fff9094:	1fff908c 1fff908c 1fff9094 1fff9094     ................
1fff90a4:	1fff909c 1fff909c 1fff90a4 1fff90a4     ................
1fff90b4:	1fff90ac 1fff90ac 1fff90b4 1fff90b4     ................
1fff90c4:	1fff90bc 1fff90bc 1fff90c4 1fff90c4     ................
1fff90d4:	1fff90cc 1fff90cc 1fff90d4 1fff90d4     ................
1fff90e4:	1fff90dc 1fff90dc 1fff90e4 1fff90e4     ................
1fff90f4:	1fff90ec 1fff90ec 1fff90f4 1fff90f4     ................
1fff9104:	1fff90fc 1fff90fc 1fff9104 1fff9104     ................
1fff9114:	1fff910c 1fff910c 1fff9114 1fff9114     ................
1fff9124:	1fff911c 1fff911c 1fff9124 1fff9124     ........$...$...
1fff9134:	1fff912c 1fff912c 1fff9134 1fff9134     ,...,...4...4...
1fff9144:	1fff913c 1fff913c 1fff9144 1fff9144     <...<...D...D...
1fff9154:	1fff914c 1fff914c 1fff9154 1fff9154     L...L...T...T...
1fff9164:	1fff915c 1fff915c 1fff9164 1fff9164     \...\...d...d...
1fff9174:	1fff916c 1fff916c 1fff9174 1fff9174     l...l...t...t...
1fff9184:	1fff917c 1fff917c 1fff9184 1fff9184     |...|...........
1fff9194:	1fff918c 1fff918c 1fff9194 1fff9194     ................
1fff91a4:	1fff919c 1fff919c 1fff91a4 1fff91a4     ................
1fff91b4:	1fff91ac 1fff91ac 1fff91b4 1fff91b4     ................
1fff91c4:	1fff91bc 1fff91bc 1fff91c4 1fff91c4     ................
1fff91d4:	1fff91cc 1fff91cc 1fff91d4 1fff91d4     ................
1fff91e4:	1fff91dc 1fff91dc 1fff91e4 1fff91e4     ................
1fff91f4:	1fff91ec 1fff91ec 1fff91f4 1fff91f4     ................
1fff9204:	1fff91fc 1fff91fc 1fff9204 1fff9204     ................
1fff9214:	1fff920c 1fff920c 1fff9214 1fff9214     ................
1fff9224:	1fff921c 1fff921c 1fff9224 1fff9224     ........$...$...
1fff9234:	1fff922c 1fff922c 1fff9234 1fff9234     ,...,...4...4...
1fff9244:	1fff923c 1fff923c 1fff9244 1fff9244     <...<...D...D...
1fff9254:	1fff924c 1fff924c 1fff9254 1fff9254     L...L...T...T...
1fff9264:	1fff925c 1fff925c 1fff9264 1fff9264     \...\...d...d...
1fff9274:	1fff926c 1fff926c 1fff9274 1fff9274     l...l...t...t...
1fff9284:	1fff927c 1fff927c 1fff9284 1fff9284     |...|...........
1fff9294:	1fff928c 1fff928c 1fff9294 1fff9294     ................
1fff92a4:	1fff929c 1fff929c 1fff92a4 1fff92a4     ................
1fff92b4:	1fff92ac 1fff92ac 1fff92b4 1fff92b4     ................
1fff92c4:	1fff92bc 1fff92bc 1fff92c4 1fff92c4     ................
1fff92d4:	1fff92cc 1fff92cc 1fff92d4 1fff92d4     ................

1fff92e4 <__malloc_trim_threshold>:
1fff92e4:	00020000                                ....

1fff92e8 <__malloc_sbrk_base>:
1fff92e8:	ffffffff                                ....
